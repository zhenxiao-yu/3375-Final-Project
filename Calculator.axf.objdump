
Calculator.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	40 00 00 00 88 0f 00 00 8c 0f 00 00 90 0f 00 00     @...............
      30:	94 0f 00 00 84 0f 00 00 98 0f 00 00 9c 0f 00 00     ................

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	ip, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	ip!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, ip
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, ip
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	ip, r2, r3
      bc:	e15e000c 	cmp	lr, ip
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000391 	bl	f20 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001084 	.word	0x00001084

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000014d0 	.word	0x000014d0

00000124 <__cs3_heap_start_ptr>:
     124:	00001508 	.word	0x00001508

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000014d8 	.word	0x000014d8
     170:	000014db 	.word	0x000014db
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	000014d8 	.word	0x000014d8
     1bc:	000014d8 	.word	0x000014d8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000014d8 	.word	0x000014d8
     200:	00000000 	.word	0x00000000
     204:	00001028 	.word	0x00001028

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001028 	.word	0x00001028
     250:	000014dc 	.word	0x000014dc
     254:	00001088 	.word	0x00001088
     258:	00000000 	.word	0x00000000

0000025c <countDigit>:
volatile int * LED_ptr = (int * ) LED_BASE;

//* utilty functions*//
int countDigit(int val) {
  int count = 0;
  while (val != 0) {
     25c:	e2503000 	subs	r3, r0, #0
     260:	0a000008 	beq	288 <countDigit+0x2c>
volatile int * Display2_ptr = (int * ) HEX5_HEX4_BASE;
volatile int * LED_ptr = (int * ) LED_BASE;

//* utilty functions*//
int countDigit(int val) {
  int count = 0;
     264:	e3a00000 	mov	r0, #0
  while (val != 0) {
    val = val / 10;
     268:	e3061667 	movw	r1, #26215	; 0x6667
     26c:	e3461666 	movt	r1, #26214	; 0x6666
     270:	e0c2c391 	smull	ip, r2, r1, r3
     274:	e1a03fc3 	asr	r3, r3, #31
    count++;
     278:	e2800001 	add	r0, r0, #1
volatile int * LED_ptr = (int * ) LED_BASE;

//* utilty functions*//
int countDigit(int val) {
  int count = 0;
  while (val != 0) {
     27c:	e0733142 	rsbs	r3, r3, r2, asr #2
     280:	1afffffa 	bne	270 <countDigit+0x14>
     284:	e12fff1e 	bx	lr
volatile int * Display2_ptr = (int * ) HEX5_HEX4_BASE;
volatile int * LED_ptr = (int * ) LED_BASE;

//* utilty functions*//
int countDigit(int val) {
  int count = 0;
     288:	e3a00000 	mov	r0, #0
  while (val != 0) {
    val = val / 10;
    count++;
  }
  return count;
}
     28c:	e12fff1e 	bx	lr

00000290 <intToBin>:

//convert from interger value to binary value
unsigned intToBin(unsigned k) {
     290:	e92d4010 	push	{r4, lr}
  if (k == 0) return 0;
     294:	e2504000 	subs	r4, r0, #0
     298:	0a000007 	beq	2bc <intToBin+0x2c>
  if (k == 1) return 1; /* optional */
     29c:	e3540001 	cmp	r4, #1
     2a0:	0a000007 	beq	2c4 <intToBin+0x34>
  return (k % 2) + 10 * intToBin(k / 2);
     2a4:	e1a000a4 	lsr	r0, r4, #1
     2a8:	ebfffff8 	bl	290 <intToBin>
     2ac:	e0800100 	add	r0, r0, r0, lsl #2
     2b0:	e2044001 	and	r4, r4, #1
     2b4:	e0840080 	add	r0, r4, r0, lsl #1
     2b8:	e8bd8010 	pop	{r4, pc}
  return count;
}

//convert from interger value to binary value
unsigned intToBin(unsigned k) {
  if (k == 0) return 0;
     2bc:	e3a00000 	mov	r0, #0
     2c0:	e8bd8010 	pop	{r4, pc}
  if (k == 1) return 1; /* optional */
     2c4:	e3a00001 	mov	r0, #1
  return (k % 2) + 10 * intToBin(k / 2);
}
     2c8:	e8bd8010 	pop	{r4, pc}

000002cc <DisplayError>:
  int BYTE = 8;
  int Letter_E = 0x79; //1111001
  int letter_r = 0x50; //1010000
  int letter_o = 0x5C; //1011100
  // Displaying r + o
  * Display1_ptr = letter_r << (3 * BYTE) |
     2cc:	e3013090 	movw	r3, #4240	; 0x1090
     2d0:	e3403000 	movt	r3, #0
     2d4:	e5931000 	ldr	r1, [r3]
     2d8:	e3052c50 	movw	r2, #23632	; 0x5c50
     2dc:	e3452050 	movt	r2, #20560	; 0x5050
     2e0:	e5812000 	str	r2, [r1]
    letter_r << (2 * BYTE) |
    letter_o << (1 * BYTE) |
    letter_r << (0 * BYTE);
  // Displaying E
  * Display2_ptr = Letter_E;
     2e4:	e5933004 	ldr	r3, [r3, #4]
     2e8:	e3a02079 	mov	r2, #121	; 0x79
     2ec:	e5832000 	str	r2, [r3]
     2f0:	e12fff1e 	bx	lr

000002f4 <DisplayOperator>:
}

//Display the Operator ID on 7-segment Display
void DisplayOperator(int oprID) {
     2f4:	e24dd008 	sub	sp, sp, #8
  char oprTable[5];
  oprTable[0] = 0x3F; // used as capital letter 'O'
     2f8:	e3a0303f 	mov	r3, #63	; 0x3f
     2fc:	e5cd3000 	strb	r3, [sp]
  oprTable[1] = 0x06; // + 
     300:	e3a03006 	mov	r3, #6
     304:	e5cd3001 	strb	r3, [sp, #1]
  oprTable[2] = 0x5B; // -
     308:	e3a0305b 	mov	r3, #91	; 0x5b
     30c:	e5cd3002 	strb	r3, [sp, #2]
  oprTable[3] = 0x4F; // x
     310:	e3a0304f 	mov	r3, #79	; 0x4f
     314:	e5cd3003 	strb	r3, [sp, #3]
  oprTable[4] = 0x66; // /
     318:	e3a03066 	mov	r3, #102	; 0x66
     31c:	e5cd3004 	strb	r3, [sp, #4]
  int BYTE = 8;
  int letter_p = 0x73; //1110011
  int letter_r = 0x50; //1010000
  // Displaying O + p + r + operator ID
  * Display1_ptr = oprTable[0] << (3 * BYTE) |
     320:	e3013090 	movw	r3, #4240	; 0x1090
     324:	e3403000 	movt	r3, #0
     328:	e5931000 	ldr	r1, [r3]
    letter_p << (2 * BYTE) |
    letter_r << (1 * BYTE) |
    oprTable[oprID] << (0 * BYTE);
     32c:	e28d2008 	add	r2, sp, #8
     330:	e0820000 	add	r0, r2, r0
     334:	e5500008 	ldrb	r0, [r0, #-8]
  int letter_p = 0x73; //1110011
  int letter_r = 0x50; //1010000
  // Displaying O + p + r + operator ID
  * Display1_ptr = oprTable[0] << (3 * BYTE) |
    letter_p << (2 * BYTE) |
    letter_r << (1 * BYTE) |
     338:	e3a02a05 	mov	r2, #20480	; 0x5000
     33c:	e3432f73 	movt	r2, #16243	; 0x3f73
     340:	e1802002 	orr	r2, r0, r2
  oprTable[4] = 0x66; // /
  int BYTE = 8;
  int letter_p = 0x73; //1110011
  int letter_r = 0x50; //1010000
  // Displaying O + p + r + operator ID
  * Display1_ptr = oprTable[0] << (3 * BYTE) |
     344:	e5812000 	str	r2, [r1]
    letter_p << (2 * BYTE) |
    letter_r << (1 * BYTE) |
    oprTable[oprID] << (0 * BYTE);
  // turn off
  * Display2_ptr = 0x00;
     348:	e5933004 	ldr	r3, [r3, #4]
     34c:	e3a02000 	mov	r2, #0
     350:	e5832000 	str	r2, [r3]
}
     354:	e28dd008 	add	sp, sp, #8
     358:	e12fff1e 	bx	lr

0000035c <DisplayValue>:

// Displays numbers on 7 seg display
void DisplayValue(int value) { // max = 10, displays number from 0 - 9
     35c:	e92d0030 	push	{r4, r5}
     360:	e24dd028 	sub	sp, sp, #40	; 0x28
  char lookUpTable[10];
  lookUpTable[0] = 0x3F;
     364:	e3a0303f 	mov	r3, #63	; 0x3f
     368:	e5cd301c 	strb	r3, [sp, #28]
  lookUpTable[1] = 0x06;
     36c:	e3a03006 	mov	r3, #6
     370:	e5cd301d 	strb	r3, [sp, #29]
  lookUpTable[2] = 0x5B;
     374:	e3a0305b 	mov	r3, #91	; 0x5b
     378:	e5cd301e 	strb	r3, [sp, #30]
  lookUpTable[3] = 0x4F;
     37c:	e3a0304f 	mov	r3, #79	; 0x4f
     380:	e5cd301f 	strb	r3, [sp, #31]
  lookUpTable[4] = 0x66;
     384:	e3a03066 	mov	r3, #102	; 0x66
     388:	e5cd3020 	strb	r3, [sp, #32]
  lookUpTable[5] = 0x6D;
     38c:	e3a0306d 	mov	r3, #109	; 0x6d
     390:	e5cd3021 	strb	r3, [sp, #33]	; 0x21
  lookUpTable[6] = 0x7D;
     394:	e3a0307d 	mov	r3, #125	; 0x7d
     398:	e5cd3022 	strb	r3, [sp, #34]	; 0x22
  lookUpTable[7] = 0x07;
     39c:	e3a03007 	mov	r3, #7
     3a0:	e5cd3023 	strb	r3, [sp, #35]	; 0x23
  lookUpTable[8] = 0x7F;
     3a4:	e3a0307f 	mov	r3, #127	; 0x7f
     3a8:	e5cd3024 	strb	r3, [sp, #36]	; 0x24
  lookUpTable[9] = 0x6F;
     3ac:	e3a0306f 	mov	r3, #111	; 0x6f
     3b0:	e5cd3025 	strb	r3, [sp, #37]	; 0x25
     3b4:	e28d2018 	add	r2, sp, #24
  // turn off
  * Display2_ptr = 0x00;
}

// Displays numbers on 7 seg display
void DisplayValue(int value) { // max = 10, displays number from 0 - 9
     3b8:	e1a0400d 	mov	r4, sp
  int BYTE = 8;
  // if value can be represented by 6 digits
  int bitArray[6];
  int i = 5;
  while (i >= 0) {
    bitArray[i] = value % 10;
     3bc:	e306c667 	movw	ip, #26215	; 0x6667
     3c0:	e346c666 	movt	ip, #26214	; 0x6666
     3c4:	e0c1309c 	smull	r3, r1, ip, r0
     3c8:	e1a03fc0 	asr	r3, r0, #31
     3cc:	e0633141 	rsb	r3, r3, r1, asr #2
     3d0:	e0831103 	add	r1, r3, r3, lsl #2
     3d4:	e0400081 	sub	r0, r0, r1, lsl #1
     3d8:	e4020004 	str	r0, [r2], #-4
    value /= 10;
     3dc:	e1a00003 	mov	r0, r3
  lookUpTable[9] = 0x6F;
  int BYTE = 8;
  // if value can be represented by 6 digits
  int bitArray[6];
  int i = 5;
  while (i >= 0) {
     3e0:	e1520004 	cmp	r2, r4
     3e4:	1afffff6 	bne	3c4 <DisplayValue+0x68>
    bitArray[i] = value % 10;
    value /= 10;
    i--;
  }
  //assign bit b=values with digits
  int bit6 = lookUpTable[bitArray[0]];
     3e8:	e59d3004 	ldr	r3, [sp, #4]
     3ec:	e28d4028 	add	r4, sp, #40	; 0x28
     3f0:	e0843003 	add	r3, r4, r3
     3f4:	e553100c 	ldrb	r1, [r3, #-12]
  int bit5 = lookUpTable[bitArray[1]];
     3f8:	e59d3008 	ldr	r3, [sp, #8]
     3fc:	e0843003 	add	r3, r4, r3
     400:	e553200c 	ldrb	r2, [r3, #-12]
  int bit3 = lookUpTable[bitArray[3]];
  int bit2 = lookUpTable[bitArray[4]];
  int bit1 = lookUpTable[bitArray[5]];

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
     404:	e3013090 	movw	r3, #4240	; 0x1090
     408:	e3403000 	movt	r3, #0
     40c:	e5930000 	ldr	r0, [r3]
    i--;
  }
  //assign bit b=values with digits
  int bit6 = lookUpTable[bitArray[0]];
  int bit5 = lookUpTable[bitArray[1]];
  int bit4 = lookUpTable[bitArray[2]];
     410:	e59dc00c 	ldr	ip, [sp, #12]
     414:	e084c00c 	add	ip, r4, ip
     418:	e55c400c 	ldrb	r4, [ip, #-12]
  int bit3 = lookUpTable[bitArray[3]];
     41c:	e59dc010 	ldr	ip, [sp, #16]
     420:	e28d5028 	add	r5, sp, #40	; 0x28
     424:	e085c00c 	add	ip, r5, ip
     428:	e55cc00c 	ldrb	ip, [ip, #-12]
  int bit2 = lookUpTable[bitArray[4]];
  int bit1 = lookUpTable[bitArray[5]];

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
    bit3 << (2 * BYTE) |
     42c:	e1a0c80c 	lsl	ip, ip, #16
  int bit3 = lookUpTable[bitArray[3]];
  int bit2 = lookUpTable[bitArray[4]];
  int bit1 = lookUpTable[bitArray[5]];

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
     430:	e18ccc04 	orr	ip, ip, r4, lsl #24
  int bit6 = lookUpTable[bitArray[0]];
  int bit5 = lookUpTable[bitArray[1]];
  int bit4 = lookUpTable[bitArray[2]];
  int bit3 = lookUpTable[bitArray[3]];
  int bit2 = lookUpTable[bitArray[4]];
  int bit1 = lookUpTable[bitArray[5]];
     434:	e59d4018 	ldr	r4, [sp, #24]
     438:	e0854004 	add	r4, r5, r4
     43c:	e554400c 	ldrb	r4, [r4, #-12]

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
    bit3 << (2 * BYTE) |
     440:	e18cc004 	orr	ip, ip, r4
  //assign bit b=values with digits
  int bit6 = lookUpTable[bitArray[0]];
  int bit5 = lookUpTable[bitArray[1]];
  int bit4 = lookUpTable[bitArray[2]];
  int bit3 = lookUpTable[bitArray[3]];
  int bit2 = lookUpTable[bitArray[4]];
     444:	e59d4014 	ldr	r4, [sp, #20]
     448:	e0854004 	add	r4, r5, r4
     44c:	e554400c 	ldrb	r4, [r4, #-12]
  int bit1 = lookUpTable[bitArray[5]];

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
    bit3 << (2 * BYTE) |
    bit2 << (1 * BYTE) |
     450:	e18cc404 	orr	ip, ip, r4, lsl #8
  int bit3 = lookUpTable[bitArray[3]];
  int bit2 = lookUpTable[bitArray[4]];
  int bit1 = lookUpTable[bitArray[5]];

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
     454:	e580c000 	str	ip, [r0]
    bit3 << (2 * BYTE) |
    bit2 << (1 * BYTE) |
    bit1 << (0 * BYTE);

  // Displaying bit 5 - 6 of value 
  * Display2_ptr = bit6 << (1 * BYTE) |
     458:	e5933004 	ldr	r3, [r3, #4]
     45c:	e1822401 	orr	r2, r2, r1, lsl #8
     460:	e5832000 	str	r2, [r3]
    bit5 << (0 * BYTE);
}
     464:	e28dd028 	add	sp, sp, #40	; 0x28
     468:	e8bd0030 	pop	{r4, r5}
     46c:	e12fff1e 	bx	lr

00000470 <ReadButton>:

// Reads buttons
int ReadButton(int btn) {
  volatile int * BTN_ptr = (int * ) KEY_BASE;
  // Returns 1 if the given button is pressed, 0 otherwise due to & operator
  return (( * BTN_ptr >> (btn)) & 1);
     470:	e3a03000 	mov	r3, #0
     474:	e34f3f20 	movt	r3, #65312	; 0xff20
     478:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     47c:	e1a00053 	asr	r0, r3, r0
}
     480:	e2000001 	and	r0, r0, #1
     484:	e12fff1e 	bx	lr

00000488 <ReadSwitch>:
// Reads switches
int ReadSwitch(int sw) {
  // pointer to switch address
  volatile int * SW_ptr = (int * ) SW_BASE;
  // Returns 1 if the given button is pressed, 0 otherwise due to & operator
  return (( * SW_ptr >> (sw)) & 1);
     488:	e3a03000 	mov	r3, #0
     48c:	e34f3f20 	movt	r3, #65312	; 0xff20
     490:	e5933040 	ldr	r3, [r3, #64]	; 0x40
     494:	e1a00053 	asr	r0, r3, r0
}
     498:	e2000001 	and	r0, r0, #1
     49c:	e12fff1e 	bx	lr

000004a0 <GetInput>:

// get input from switch 0 - 5
int GetInput(void) {
     4a0:	e24dd008 	sub	sp, sp, #8
  // pointer to switch address
  volatile int * SW_ptr = (int * ) SW_BASE;
  volatile int inputValue = * (SW_ptr);
     4a4:	e3a03000 	mov	r3, #0
     4a8:	e34f3f20 	movt	r3, #65312	; 0xff20
     4ac:	e5933040 	ldr	r3, [r3, #64]	; 0x40
     4b0:	e58d3004 	str	r3, [sp, #4]
  // reads slide switch bank and return current value (encoded in binary)
  // return lowest 6 bits in the switch bank (2 ^ 6)
  return (inputValue % (2 * 2 * 2 * 2 * 2 * 2));
     4b4:	e59d2004 	ldr	r2, [sp, #4]
     4b8:	e1a03fc2 	asr	r3, r2, #31
     4bc:	e1a03d23 	lsr	r3, r3, #26
     4c0:	e0822003 	add	r2, r2, r3
     4c4:	e202003f 	and	r0, r2, #63	; 0x3f
}
     4c8:	e0630000 	rsb	r0, r3, r0
     4cc:	e28dd008 	add	sp, sp, #8
     4d0:	e12fff1e 	bx	lr

000004d4 <showingOperator>:



int showingOperator() {
     4d4:	e92d4008 	push	{r3, lr}
  if (ReadButton(0) || ReadButton(1) || ReadButton(2) || ReadButton(3)) {
     4d8:	e3a00000 	mov	r0, #0
     4dc:	ebffffe3 	bl	470 <ReadButton>
     4e0:	e3500000 	cmp	r0, #0
     4e4:	1a00000c 	bne	51c <showingOperator+0x48>
     4e8:	e3a00001 	mov	r0, #1
     4ec:	ebffffdf 	bl	470 <ReadButton>
     4f0:	e3500000 	cmp	r0, #0
     4f4:	1a00000a 	bne	524 <showingOperator+0x50>
     4f8:	e3a00002 	mov	r0, #2
     4fc:	ebffffdb 	bl	470 <ReadButton>
     500:	e3500000 	cmp	r0, #0
     504:	1a000008 	bne	52c <showingOperator+0x58>
     508:	e3a00003 	mov	r0, #3
     50c:	ebffffd7 	bl	470 <ReadButton>
     510:	e2900000 	adds	r0, r0, #0
     514:	13a00001 	movne	r0, #1
     518:	e8bd8008 	pop	{r3, pc}
    return 1;
     51c:	e3a00001 	mov	r0, #1
     520:	e8bd8008 	pop	{r3, pc}
     524:	e3a00001 	mov	r0, #1
     528:	e8bd8008 	pop	{r3, pc}
     52c:	e3a00001 	mov	r0, #1
  } else {
    return 0;
  }
}
     530:	e8bd8008 	pop	{r3, pc}

00000534 <main>:
int answer;
int num1;
int num2;
int operator;

int main(void) {
     534:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DisplayValue(0); // Initialize display
     538:	e3a00000 	mov	r0, #0
     53c:	ebffff86 	bl	35c <DisplayValue>
	*LED_ptr = 0b0000000000;
     540:	e3013090 	movw	r3, #4240	; 0x1090
     544:	e3403000 	movt	r3, #0
     548:	e5933008 	ldr	r3, [r3, #8]
     54c:	e3a02000 	mov	r2, #0
     550:	e5832000 	str	r2, [r3]
  // Main loop
  while (1) {
    //turn display off when switch 9 is not flipped
    if (!ReadSwitch(9)) {
     554:	e3a05009 	mov	r5, #9
      * Display2_ptr = 0x00;
     558:	e3016090 	movw	r6, #4240	; 0x1090
     55c:	e3406000 	movt	r6, #0
     560:	e1a04002 	mov	r4, r2
        num1 = GetInput();
		*LED_ptr = 0b0000011111;
      }

      // switch mode
      if (ReadSwitch(6) && showingOperator() == 0 && !ReadSwitch(7)) {
     564:	e3a08006 	mov	r8, #6
          DisplayError();
        }
      }
      
      //clear answer
      if (ReadSwitch(8)) {
     568:	e3a0a008 	mov	sl, #8
		  *LED_ptr = 0b0000000000;
      }

      // show answer
      if (ReadSwitch(7) && !ReadSwitch(8)) {  
        num2 = GetInput();
     56c:	e30174f4 	movw	r7, #5364	; 0x14f4
     570:	e3407000 	movt	r7, #0
  DisplayValue(0); // Initialize display
	*LED_ptr = 0b0000000000;
  // Main loop
  while (1) {
    //turn display off when switch 9 is not flipped
    if (!ReadSwitch(9)) {
     574:	e1a00005 	mov	r0, r5
     578:	ebffffc2 	bl	488 <ReadSwitch>
     57c:	e3500000 	cmp	r0, #0
     580:	1a000004 	bne	598 <main+0x64>
      * Display2_ptr = 0x00;
     584:	e5963004 	ldr	r3, [r6, #4]
     588:	e5834000 	str	r4, [r3]
      * Display1_ptr = 0x00;
     58c:	e5963000 	ldr	r3, [r6]
     590:	e5834000 	str	r4, [r3]
     594:	eafffff6 	b	574 <main+0x40>
    } else if (ReadSwitch(9)) {
     598:	e1a00005 	mov	r0, r5
     59c:	ebffffb9 	bl	488 <ReadSwitch>
     5a0:	e3500000 	cmp	r0, #0
     5a4:	0afffff2 	beq	574 <main+0x40>
      // plus
      if (ReadButton(0) && !ReadButton(1) && !ReadButton(2) && !ReadButton(3)) {
     5a8:	e1a00004 	mov	r0, r4
     5ac:	ebffffaf 	bl	470 <ReadButton>
     5b0:	e3500000 	cmp	r0, #0
     5b4:	0a000014 	beq	60c <main+0xd8>
     5b8:	e3a00001 	mov	r0, #1
     5bc:	ebffffab 	bl	470 <ReadButton>
     5c0:	e3500000 	cmp	r0, #0
     5c4:	1a000010 	bne	60c <main+0xd8>
     5c8:	e3a00002 	mov	r0, #2
     5cc:	ebffffa7 	bl	470 <ReadButton>
     5d0:	e3500000 	cmp	r0, #0
     5d4:	1a00000c 	bne	60c <main+0xd8>
     5d8:	e3a00003 	mov	r0, #3
     5dc:	ebffffa3 	bl	470 <ReadButton>
     5e0:	e3500000 	cmp	r0, #0
     5e4:	1a000008 	bne	60c <main+0xd8>
        DisplayOperator(1);
     5e8:	e3a00001 	mov	r0, #1
     5ec:	ebffff40 	bl	2f4 <DisplayOperator>
        operator = 1;
     5f0:	e3a03001 	mov	r3, #1
     5f4:	e5873000 	str	r3, [r7]
        num1 = GetInput();
     5f8:	ebffffa8 	bl	4a0 <GetInput>
     5fc:	e5870004 	str	r0, [r7, #4]
		*LED_ptr = 0b0000011111;
     600:	e5963008 	ldr	r3, [r6, #8]
     604:	e3a0201f 	mov	r2, #31
     608:	e5832000 	str	r2, [r3]
      }
      // minus
      if (!ReadButton(0) && ReadButton(1) && !ReadButton(2) && !ReadButton(3)) {
     60c:	e1a00004 	mov	r0, r4
     610:	ebffff96 	bl	470 <ReadButton>
     614:	e3500000 	cmp	r0, #0
     618:	1a000014 	bne	670 <main+0x13c>
     61c:	e3a00001 	mov	r0, #1
     620:	ebffff92 	bl	470 <ReadButton>
     624:	e3500000 	cmp	r0, #0
     628:	0a000010 	beq	670 <main+0x13c>
     62c:	e3a00002 	mov	r0, #2
     630:	ebffff8e 	bl	470 <ReadButton>
     634:	e3500000 	cmp	r0, #0
     638:	1a00000c 	bne	670 <main+0x13c>
     63c:	e3a00003 	mov	r0, #3
     640:	ebffff8a 	bl	470 <ReadButton>
     644:	e3500000 	cmp	r0, #0
     648:	1a000008 	bne	670 <main+0x13c>
        DisplayOperator(2);
     64c:	e3a00002 	mov	r0, #2
     650:	ebffff27 	bl	2f4 <DisplayOperator>
        operator = 2;
     654:	e3a03002 	mov	r3, #2
     658:	e5873000 	str	r3, [r7]
        num1 = GetInput();
     65c:	ebffff8f 	bl	4a0 <GetInput>
     660:	e5870004 	str	r0, [r7, #4]
		*LED_ptr = 0b0000011111;
     664:	e5963008 	ldr	r3, [r6, #8]
     668:	e3a0201f 	mov	r2, #31
     66c:	e5832000 	str	r2, [r3]
      }
      // multiply
      if (!ReadButton(0) && !ReadButton(1) && ReadButton(2) && !ReadButton(3)) {
     670:	e1a00004 	mov	r0, r4
     674:	ebffff7d 	bl	470 <ReadButton>
     678:	e3500000 	cmp	r0, #0
     67c:	1a000014 	bne	6d4 <main+0x1a0>
     680:	e3a00001 	mov	r0, #1
     684:	ebffff79 	bl	470 <ReadButton>
     688:	e3500000 	cmp	r0, #0
     68c:	1a000010 	bne	6d4 <main+0x1a0>
     690:	e3a00002 	mov	r0, #2
     694:	ebffff75 	bl	470 <ReadButton>
     698:	e3500000 	cmp	r0, #0
     69c:	0a00000c 	beq	6d4 <main+0x1a0>
     6a0:	e3a00003 	mov	r0, #3
     6a4:	ebffff71 	bl	470 <ReadButton>
     6a8:	e3500000 	cmp	r0, #0
     6ac:	1a000008 	bne	6d4 <main+0x1a0>
        DisplayOperator(3);
     6b0:	e3a00003 	mov	r0, #3
     6b4:	ebffff0e 	bl	2f4 <DisplayOperator>
        operator = 3;
     6b8:	e3a03003 	mov	r3, #3
     6bc:	e5873000 	str	r3, [r7]
        num1 = GetInput();
     6c0:	ebffff76 	bl	4a0 <GetInput>
     6c4:	e5870004 	str	r0, [r7, #4]
		*LED_ptr = 0b0000011111;
     6c8:	e5963008 	ldr	r3, [r6, #8]
     6cc:	e3a0201f 	mov	r2, #31
     6d0:	e5832000 	str	r2, [r3]
      }
      //divide
      if (!ReadButton(0) && !ReadButton(1) && !ReadButton(2) && ReadButton(3)) {
     6d4:	e1a00004 	mov	r0, r4
     6d8:	ebffff64 	bl	470 <ReadButton>
     6dc:	e3500000 	cmp	r0, #0
     6e0:	1a000014 	bne	738 <main+0x204>
     6e4:	e3a00001 	mov	r0, #1
     6e8:	ebffff60 	bl	470 <ReadButton>
     6ec:	e3500000 	cmp	r0, #0
     6f0:	1a000010 	bne	738 <main+0x204>
     6f4:	e3a00002 	mov	r0, #2
     6f8:	ebffff5c 	bl	470 <ReadButton>
     6fc:	e3500000 	cmp	r0, #0
     700:	1a00000c 	bne	738 <main+0x204>
     704:	e3a00003 	mov	r0, #3
     708:	ebffff58 	bl	470 <ReadButton>
     70c:	e3500000 	cmp	r0, #0
     710:	0a000008 	beq	738 <main+0x204>
        DisplayOperator(4);
     714:	e3a00004 	mov	r0, #4
     718:	ebfffef5 	bl	2f4 <DisplayOperator>
        operator = 4;
     71c:	e3a03004 	mov	r3, #4
     720:	e5873000 	str	r3, [r7]
        num1 = GetInput();
     724:	ebffff5d 	bl	4a0 <GetInput>
     728:	e5870004 	str	r0, [r7, #4]
		*LED_ptr = 0b0000011111;
     72c:	e5963008 	ldr	r3, [r6, #8]
     730:	e3a0201f 	mov	r2, #31
     734:	e5832000 	str	r2, [r3]
      }

      // switch mode
      if (ReadSwitch(6) && showingOperator() == 0 && !ReadSwitch(7)) {
     738:	e1a00008 	mov	r0, r8
     73c:	ebffff51 	bl	488 <ReadSwitch>
     740:	e3500000 	cmp	r0, #0
     744:	0a00000f 	beq	788 <main+0x254>
     748:	ebffff61 	bl	4d4 <showingOperator>
     74c:	e3500000 	cmp	r0, #0
     750:	1a00000c 	bne	788 <main+0x254>
     754:	e3a00007 	mov	r0, #7
     758:	ebffff4a 	bl	488 <ReadSwitch>
     75c:	e3500000 	cmp	r0, #0
     760:	1a000008 	bne	788 <main+0x254>
        // display decimal value
        if (countDigit(GetInput()) <= 6) {
     764:	ebffff4d 	bl	4a0 <GetInput>
     768:	ebfffebb 	bl	25c <countDigit>
     76c:	e3500006 	cmp	r0, #6
     770:	ca000002 	bgt	780 <main+0x24c>
          DisplayValue(GetInput());
     774:	ebffff49 	bl	4a0 <GetInput>
     778:	ebfffef7 	bl	35c <DisplayValue>
     77c:	ea000016 	b	7dc <main+0x2a8>
        } else {
          DisplayError();
     780:	ebfffed1 	bl	2cc <DisplayError>
     784:	ea000014 	b	7dc <main+0x2a8>
        }
      } else if (!ReadSwitch(6) && showingOperator() == 0 && !ReadSwitch(7)) {
     788:	e1a00008 	mov	r0, r8
     78c:	ebffff3d 	bl	488 <ReadSwitch>
     790:	e3500000 	cmp	r0, #0
     794:	1a000010 	bne	7dc <main+0x2a8>
     798:	ebffff4d 	bl	4d4 <showingOperator>
     79c:	e3500000 	cmp	r0, #0
     7a0:	1a00000d 	bne	7dc <main+0x2a8>
     7a4:	e3a00007 	mov	r0, #7
     7a8:	ebffff36 	bl	488 <ReadSwitch>
     7ac:	e3500000 	cmp	r0, #0
     7b0:	1a000009 	bne	7dc <main+0x2a8>
        // display binary value
        if (countDigit(intToBin(GetInput())) <= 6) {
     7b4:	ebffff39 	bl	4a0 <GetInput>
     7b8:	ebfffeb4 	bl	290 <intToBin>
     7bc:	ebfffea6 	bl	25c <countDigit>
     7c0:	e3500006 	cmp	r0, #6
     7c4:	ca000003 	bgt	7d8 <main+0x2a4>
          DisplayValue(intToBin(GetInput()));
     7c8:	ebffff34 	bl	4a0 <GetInput>
     7cc:	ebfffeaf 	bl	290 <intToBin>
     7d0:	ebfffee1 	bl	35c <DisplayValue>
     7d4:	ea000000 	b	7dc <main+0x2a8>
        } else {
          DisplayError();
     7d8:	ebfffebb 	bl	2cc <DisplayError>
        }
      }
      
      //clear answer
      if (ReadSwitch(8)) {
     7dc:	e1a0000a 	mov	r0, sl
     7e0:	ebffff28 	bl	488 <ReadSwitch>
     7e4:	e3500000 	cmp	r0, #0
     7e8:	0a000007 	beq	80c <main+0x2d8>
          num1 = 0;
     7ec:	e5874004 	str	r4, [r7, #4]
          num2 = 0;
     7f0:	e5874008 	str	r4, [r7, #8]
          answer = 0;
     7f4:	e587400c 	str	r4, [r7, #12]
          operator = 0;
     7f8:	e5874000 	str	r4, [r7]
          DisplayValue(0);
     7fc:	e1a00004 	mov	r0, r4
     800:	ebfffed5 	bl	35c <DisplayValue>
		  *LED_ptr = 0b0000000000;
     804:	e5963008 	ldr	r3, [r6, #8]
     808:	e5834000 	str	r4, [r3]
      }

      // show answer
      if (ReadSwitch(7) && !ReadSwitch(8)) {  
     80c:	e3a00007 	mov	r0, #7
     810:	ebffff1c 	bl	488 <ReadSwitch>
     814:	e3500000 	cmp	r0, #0
     818:	0affff55 	beq	574 <main+0x40>
     81c:	e1a0000a 	mov	r0, sl
     820:	ebffff18 	bl	488 <ReadSwitch>
     824:	e3500000 	cmp	r0, #0
     828:	1affff51 	bne	574 <main+0x40>
        num2 = GetInput();
     82c:	ebffff1b 	bl	4a0 <GetInput>
     830:	e5870008 	str	r0, [r7, #8]
        if (operator == 1) {
     834:	e5973000 	ldr	r3, [r7]
     838:	e3530001 	cmp	r3, #1
     83c:	1a000024 	bne	8d4 <main+0x3a0>
		  *LED_ptr = 0b1111111111;	
     840:	e5963008 	ldr	r3, [r6, #8]
     844:	e30023ff 	movw	r2, #1023	; 0x3ff
     848:	e5832000 	str	r2, [r3]
          answer = num1 + num2;
     84c:	e5972004 	ldr	r2, [r7, #4]
     850:	e5973008 	ldr	r3, [r7, #8]
     854:	e0823003 	add	r3, r2, r3
     858:	e587300c 	str	r3, [r7, #12]
          if (!ReadSwitch(6)) { //not in decimal mode
     85c:	e1a00008 	mov	r0, r8
     860:	ebffff08 	bl	488 <ReadSwitch>
     864:	e3500000 	cmp	r0, #0
     868:	1a00000d 	bne	8a4 <main+0x370>
            if (countDigit(intToBin(answer)) <= 6 && answer>=0) {
     86c:	e597900c 	ldr	r9, [r7, #12]
     870:	e1a00009 	mov	r0, r9
     874:	ebfffe85 	bl	290 <intToBin>
     878:	e1a0b000 	mov	fp, r0
     87c:	ebfffe76 	bl	25c <countDigit>
     880:	e3500006 	cmp	r0, #6
     884:	ca000004 	bgt	89c <main+0x368>
     888:	e3590000 	cmp	r9, #0
     88c:	ba000002 	blt	89c <main+0x368>
              DisplayValue(intToBin(answer));
     890:	e1a0000b 	mov	r0, fp
     894:	ebfffeb0 	bl	35c <DisplayValue>
     898:	eaffff35 	b	574 <main+0x40>
            } else {
              DisplayError();
     89c:	ebfffe8a 	bl	2cc <DisplayError>
     8a0:	eaffff33 	b	574 <main+0x40>
            }
          } else {
            if (countDigit(answer) <= 6 && answer>=0) {
     8a4:	e597900c 	ldr	r9, [r7, #12]
     8a8:	e1a00009 	mov	r0, r9
     8ac:	ebfffe6a 	bl	25c <countDigit>
     8b0:	e3500006 	cmp	r0, #6
     8b4:	ca000004 	bgt	8cc <main+0x398>
     8b8:	e3590000 	cmp	r9, #0
     8bc:	ba000002 	blt	8cc <main+0x398>
              DisplayValue(answer);
     8c0:	e1a00009 	mov	r0, r9
     8c4:	ebfffea4 	bl	35c <DisplayValue>
     8c8:	eaffff29 	b	574 <main+0x40>
            } else {
              DisplayError();
     8cc:	ebfffe7e 	bl	2cc <DisplayError>
     8d0:	eaffff27 	b	574 <main+0x40>
            }
          }
        } else if (operator == 2) {
     8d4:	e3530002 	cmp	r3, #2
     8d8:	1a000024 	bne	970 <main+0x43c>
		  *LED_ptr = 0b1111111111;	
     8dc:	e5963008 	ldr	r3, [r6, #8]
     8e0:	e30023ff 	movw	r2, #1023	; 0x3ff
     8e4:	e5832000 	str	r2, [r3]
          answer = num1 - num2;
     8e8:	e5972004 	ldr	r2, [r7, #4]
     8ec:	e5973008 	ldr	r3, [r7, #8]
     8f0:	e0633002 	rsb	r3, r3, r2
     8f4:	e587300c 	str	r3, [r7, #12]
          if (!ReadSwitch(6)) { //not in decimal mode
     8f8:	e1a00008 	mov	r0, r8
     8fc:	ebfffee1 	bl	488 <ReadSwitch>
     900:	e3500000 	cmp	r0, #0
     904:	1a00000d 	bne	940 <main+0x40c>
            if (countDigit(intToBin(answer)) <= 6 && answer>=0) {
     908:	e597900c 	ldr	r9, [r7, #12]
     90c:	e1a00009 	mov	r0, r9
     910:	ebfffe5e 	bl	290 <intToBin>
     914:	e1a0b000 	mov	fp, r0
     918:	ebfffe4f 	bl	25c <countDigit>
     91c:	e3500006 	cmp	r0, #6
     920:	ca000004 	bgt	938 <main+0x404>
     924:	e3590000 	cmp	r9, #0
     928:	ba000002 	blt	938 <main+0x404>
              DisplayValue(intToBin(answer));
     92c:	e1a0000b 	mov	r0, fp
     930:	ebfffe89 	bl	35c <DisplayValue>
     934:	eaffff0e 	b	574 <main+0x40>
            } else {
              DisplayError();
     938:	ebfffe63 	bl	2cc <DisplayError>
     93c:	eaffff0c 	b	574 <main+0x40>
            }
          } else {
            if (countDigit(answer) <= 6 && answer>=0) {
     940:	e597900c 	ldr	r9, [r7, #12]
     944:	e1a00009 	mov	r0, r9
     948:	ebfffe43 	bl	25c <countDigit>
     94c:	e3500006 	cmp	r0, #6
     950:	ca000004 	bgt	968 <main+0x434>
     954:	e3590000 	cmp	r9, #0
     958:	ba000002 	blt	968 <main+0x434>
              DisplayValue(answer);
     95c:	e1a00009 	mov	r0, r9
     960:	ebfffe7d 	bl	35c <DisplayValue>
     964:	eaffff02 	b	574 <main+0x40>
            } else {
              DisplayError();
     968:	ebfffe57 	bl	2cc <DisplayError>
     96c:	eaffff00 	b	574 <main+0x40>
            }
          }
        } else if (operator == 3) {
     970:	e3530003 	cmp	r3, #3
     974:	1a000024 	bne	a0c <main+0x4d8>
		  *LED_ptr = 0b1111111111;
     978:	e5963008 	ldr	r3, [r6, #8]
     97c:	e30023ff 	movw	r2, #1023	; 0x3ff
     980:	e5832000 	str	r2, [r3]
          answer = num1 * num2;
     984:	e5973004 	ldr	r3, [r7, #4]
     988:	e5972008 	ldr	r2, [r7, #8]
     98c:	e0030392 	mul	r3, r2, r3
     990:	e587300c 	str	r3, [r7, #12]
          if (!ReadSwitch(6)) { //not in decimal mode
     994:	e1a00008 	mov	r0, r8
     998:	ebfffeba 	bl	488 <ReadSwitch>
     99c:	e3500000 	cmp	r0, #0
     9a0:	1a00000d 	bne	9dc <main+0x4a8>
            if (countDigit(intToBin(answer)) <= 6 && answer>=0) {
     9a4:	e597900c 	ldr	r9, [r7, #12]
     9a8:	e1a00009 	mov	r0, r9
     9ac:	ebfffe37 	bl	290 <intToBin>
     9b0:	e1a0b000 	mov	fp, r0
     9b4:	ebfffe28 	bl	25c <countDigit>
     9b8:	e3500006 	cmp	r0, #6
     9bc:	ca000004 	bgt	9d4 <main+0x4a0>
     9c0:	e3590000 	cmp	r9, #0
     9c4:	ba000002 	blt	9d4 <main+0x4a0>
              DisplayValue(intToBin(answer));
     9c8:	e1a0000b 	mov	r0, fp
     9cc:	ebfffe62 	bl	35c <DisplayValue>
     9d0:	eafffee7 	b	574 <main+0x40>
            } else {
              DisplayError();
     9d4:	ebfffe3c 	bl	2cc <DisplayError>
     9d8:	eafffee5 	b	574 <main+0x40>
            }
          } else {
            if (countDigit(answer) <= 6 && answer>=0) {
     9dc:	e597900c 	ldr	r9, [r7, #12]
     9e0:	e1a00009 	mov	r0, r9
     9e4:	ebfffe1c 	bl	25c <countDigit>
     9e8:	e3500006 	cmp	r0, #6
     9ec:	ca000004 	bgt	a04 <main+0x4d0>
     9f0:	e3590000 	cmp	r9, #0
     9f4:	ba000002 	blt	a04 <main+0x4d0>
              DisplayValue(answer);
     9f8:	e1a00009 	mov	r0, r9
     9fc:	ebfffe56 	bl	35c <DisplayValue>
     a00:	eafffedb 	b	574 <main+0x40>
            } else {
              DisplayError();
     a04:	ebfffe30 	bl	2cc <DisplayError>
     a08:	eafffed9 	b	574 <main+0x40>
            }
          }
        } else if (operator == 4) {
     a0c:	e3530004 	cmp	r3, #4
     a10:	1afffed7 	bne	574 <main+0x40>
		  *LED_ptr = 0b1111111111;
     a14:	e5963008 	ldr	r3, [r6, #8]
     a18:	e30023ff 	movw	r2, #1023	; 0x3ff
     a1c:	e5832000 	str	r2, [r3]
          answer = num1 / num2;
     a20:	e5970004 	ldr	r0, [r7, #4]
     a24:	e5971008 	ldr	r1, [r7, #8]
     a28:	eb00001e 	bl	aa8 <__aeabi_idiv>
     a2c:	e587000c 	str	r0, [r7, #12]
          if (!ReadSwitch(6)) { //not in decimal mode
     a30:	e1a00008 	mov	r0, r8
     a34:	ebfffe93 	bl	488 <ReadSwitch>
     a38:	e3500000 	cmp	r0, #0
     a3c:	1a00000d 	bne	a78 <main+0x544>
            if (countDigit(intToBin(answer)) <= 6 && answer>=0) {
     a40:	e597900c 	ldr	r9, [r7, #12]
     a44:	e1a00009 	mov	r0, r9
     a48:	ebfffe10 	bl	290 <intToBin>
     a4c:	e1a0b000 	mov	fp, r0
     a50:	ebfffe01 	bl	25c <countDigit>
     a54:	e3500006 	cmp	r0, #6
     a58:	ca000004 	bgt	a70 <main+0x53c>
     a5c:	e3590000 	cmp	r9, #0
     a60:	ba000002 	blt	a70 <main+0x53c>
              DisplayValue(intToBin(answer));
     a64:	e1a0000b 	mov	r0, fp
     a68:	ebfffe3b 	bl	35c <DisplayValue>
     a6c:	eafffec0 	b	574 <main+0x40>
            } else {
              DisplayError();
     a70:	ebfffe15 	bl	2cc <DisplayError>
     a74:	eafffebe 	b	574 <main+0x40>
            }
          } else {
            if (countDigit(answer) <= 6 && answer>=0) {	
     a78:	e597900c 	ldr	r9, [r7, #12]
     a7c:	e1a00009 	mov	r0, r9
     a80:	ebfffdf5 	bl	25c <countDigit>
     a84:	e3500006 	cmp	r0, #6
     a88:	ca000004 	bgt	aa0 <main+0x56c>
     a8c:	e3590000 	cmp	r9, #0
     a90:	ba000002 	blt	aa0 <main+0x56c>
              DisplayValue(answer);
     a94:	e1a00009 	mov	r0, r9
     a98:	ebfffe2f 	bl	35c <DisplayValue>
     a9c:	eafffeb4 	b	574 <main+0x40>
            } else {
              DisplayError();
     aa0:	ebfffe09 	bl	2cc <DisplayError>
     aa4:	eafffeb2 	b	574 <main+0x40>

00000aa8 <__aeabi_idiv>:
     aa8:	e3510000 	cmp	r1, #0
     aac:	0a000043 	beq	bc0 <.divsi3_skip_div0_test+0x110>

00000ab0 <.divsi3_skip_div0_test>:
     ab0:	e020c001 	eor	ip, r0, r1
     ab4:	42611000 	rsbmi	r1, r1, #0
     ab8:	e2512001 	subs	r2, r1, #1
     abc:	0a000027 	beq	b60 <.divsi3_skip_div0_test+0xb0>
     ac0:	e1b03000 	movs	r3, r0
     ac4:	42603000 	rsbmi	r3, r0, #0
     ac8:	e1530001 	cmp	r3, r1
     acc:	9a000026 	bls	b6c <.divsi3_skip_div0_test+0xbc>
     ad0:	e1110002 	tst	r1, r2
     ad4:	0a000028 	beq	b7c <.divsi3_skip_div0_test+0xcc>
     ad8:	e311020e 	tst	r1, #-536870912	; 0xe0000000
     adc:	01a01181 	lsleq	r1, r1, #3
     ae0:	03a02008 	moveq	r2, #8
     ae4:	13a02001 	movne	r2, #1
     ae8:	e3510201 	cmp	r1, #268435456	; 0x10000000
     aec:	31510003 	cmpcc	r1, r3
     af0:	31a01201 	lslcc	r1, r1, #4
     af4:	31a02202 	lslcc	r2, r2, #4
     af8:	3afffffa 	bcc	ae8 <.divsi3_skip_div0_test+0x38>
     afc:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
     b00:	31510003 	cmpcc	r1, r3
     b04:	31a01081 	lslcc	r1, r1, #1
     b08:	31a02082 	lslcc	r2, r2, #1
     b0c:	3afffffa 	bcc	afc <.divsi3_skip_div0_test+0x4c>
     b10:	e3a00000 	mov	r0, #0
     b14:	e1530001 	cmp	r3, r1
     b18:	20433001 	subcs	r3, r3, r1
     b1c:	21800002 	orrcs	r0, r0, r2
     b20:	e15300a1 	cmp	r3, r1, lsr #1
     b24:	204330a1 	subcs	r3, r3, r1, lsr #1
     b28:	218000a2 	orrcs	r0, r0, r2, lsr #1
     b2c:	e1530121 	cmp	r3, r1, lsr #2
     b30:	20433121 	subcs	r3, r3, r1, lsr #2
     b34:	21800122 	orrcs	r0, r0, r2, lsr #2
     b38:	e15301a1 	cmp	r3, r1, lsr #3
     b3c:	204331a1 	subcs	r3, r3, r1, lsr #3
     b40:	218001a2 	orrcs	r0, r0, r2, lsr #3
     b44:	e3530000 	cmp	r3, #0
     b48:	11b02222 	lsrsne	r2, r2, #4
     b4c:	11a01221 	lsrne	r1, r1, #4
     b50:	1affffef 	bne	b14 <.divsi3_skip_div0_test+0x64>
     b54:	e35c0000 	cmp	ip, #0
     b58:	42600000 	rsbmi	r0, r0, #0
     b5c:	e12fff1e 	bx	lr
     b60:	e13c0000 	teq	ip, r0
     b64:	42600000 	rsbmi	r0, r0, #0
     b68:	e12fff1e 	bx	lr
     b6c:	33a00000 	movcc	r0, #0
     b70:	01a00fcc 	asreq	r0, ip, #31
     b74:	03800001 	orreq	r0, r0, #1
     b78:	e12fff1e 	bx	lr
     b7c:	e3510801 	cmp	r1, #65536	; 0x10000
     b80:	21a01821 	lsrcs	r1, r1, #16
     b84:	23a02010 	movcs	r2, #16
     b88:	33a02000 	movcc	r2, #0
     b8c:	e3510c01 	cmp	r1, #256	; 0x100
     b90:	21a01421 	lsrcs	r1, r1, #8
     b94:	22822008 	addcs	r2, r2, #8
     b98:	e3510010 	cmp	r1, #16
     b9c:	21a01221 	lsrcs	r1, r1, #4
     ba0:	22822004 	addcs	r2, r2, #4
     ba4:	e3510004 	cmp	r1, #4
     ba8:	82822003 	addhi	r2, r2, #3
     bac:	908220a1 	addls	r2, r2, r1, lsr #1
     bb0:	e35c0000 	cmp	ip, #0
     bb4:	e1a00233 	lsr	r0, r3, r2
     bb8:	42600000 	rsbmi	r0, r0, #0
     bbc:	e12fff1e 	bx	lr
     bc0:	e3500000 	cmp	r0, #0
     bc4:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
     bc8:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
     bcc:	ea000007 	b	bf0 <__aeabi_idiv0>

00000bd0 <__aeabi_idivmod>:
     bd0:	e3510000 	cmp	r1, #0
     bd4:	0afffff9 	beq	bc0 <.divsi3_skip_div0_test+0x110>
     bd8:	e92d4003 	push	{r0, r1, lr}
     bdc:	ebffffb3 	bl	ab0 <.divsi3_skip_div0_test>
     be0:	e8bd4006 	pop	{r1, r2, lr}
     be4:	e0030092 	mul	r3, r2, r0
     be8:	e0411003 	sub	r1, r1, r3
     bec:	e12fff1e 	bx	lr

00000bf0 <__aeabi_idiv0>:
     bf0:	e12fff1e 	bx	lr

00000bf4 <atexit>:
     bf4:	e1a01000 	mov	r1, r0
     bf8:	e3a00000 	mov	r0, #0
     bfc:	e92d4008 	push	{r3, lr}
     c00:	e1a02000 	mov	r2, r0
     c04:	e1a03000 	mov	r3, r0
     c08:	eb00000e 	bl	c48 <__register_exitproc>
     c0c:	e8bd4008 	pop	{r3, lr}
     c10:	e12fff1e 	bx	lr

00000c14 <exit>:
     c14:	e92d4008 	push	{r3, lr}
     c18:	e3a01000 	mov	r1, #0
     c1c:	e1a04000 	mov	r4, r0
     c20:	eb000045 	bl	d3c <__call_exitprocs>
     c24:	e59f3018 	ldr	r3, [pc, #24]	; c44 <exit+0x30>
     c28:	e5930000 	ldr	r0, [r3]
     c2c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     c30:	e3530000 	cmp	r3, #0
     c34:	11a0e00f 	movne	lr, pc
     c38:	112fff13 	bxne	r3
     c3c:	e1a00004 	mov	r0, r4
     c40:	eb0000c9 	bl	f6c <_exit>
     c44:	0000102c 	.word	0x0000102c

00000c48 <__register_exitproc>:
     c48:	e59fc0e4 	ldr	ip, [pc, #228]	; d34 <__register_exitproc+0xec>
     c4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     c50:	e59c4000 	ldr	r4, [ip]
     c54:	e594c148 	ldr	ip, [r4, #328]	; 0x148
     c58:	e35c0000 	cmp	ip, #0
     c5c:	0284cf53 	addeq	ip, r4, #332	; 0x14c
     c60:	e59c5004 	ldr	r5, [ip, #4]
     c64:	0584c148 	streq	ip, [r4, #328]	; 0x148
     c68:	e355001f 	cmp	r5, #31
     c6c:	e24dd010 	sub	sp, sp, #16
     c70:	e1a06000 	mov	r6, r0
     c74:	da000015 	ble	cd0 <__register_exitproc+0x88>
     c78:	e59f00b8 	ldr	r0, [pc, #184]	; d38 <__register_exitproc+0xf0>
     c7c:	e3500000 	cmp	r0, #0
     c80:	1a000001 	bne	c8c <__register_exitproc+0x44>
     c84:	e3e00000 	mvn	r0, #0
     c88:	ea000018 	b	cf0 <__register_exitproc+0xa8>
     c8c:	e3a00e19 	mov	r0, #400	; 0x190
     c90:	e58d100c 	str	r1, [sp, #12]
     c94:	e58d2008 	str	r2, [sp, #8]
     c98:	e58d3004 	str	r3, [sp, #4]
     c9c:	e320f000 	nop	{0}
     ca0:	e250c000 	subs	ip, r0, #0
     ca4:	e59d100c 	ldr	r1, [sp, #12]
     ca8:	e59d2008 	ldr	r2, [sp, #8]
     cac:	e59d3004 	ldr	r3, [sp, #4]
     cb0:	0afffff3 	beq	c84 <__register_exitproc+0x3c>
     cb4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
     cb8:	e3a00000 	mov	r0, #0
     cbc:	e58c0004 	str	r0, [ip, #4]
     cc0:	e58c5000 	str	r5, [ip]
     cc4:	e584c148 	str	ip, [r4, #328]	; 0x148
     cc8:	e58c0188 	str	r0, [ip, #392]	; 0x188
     ccc:	e58c018c 	str	r0, [ip, #396]	; 0x18c
     cd0:	e3560000 	cmp	r6, #0
     cd4:	e59c4004 	ldr	r4, [ip, #4]
     cd8:	1a000007 	bne	cfc <__register_exitproc+0xb4>
     cdc:	e2843002 	add	r3, r4, #2
     ce0:	e2844001 	add	r4, r4, #1
     ce4:	e78c1103 	str	r1, [ip, r3, lsl #2]
     ce8:	e58c4004 	str	r4, [ip, #4]
     cec:	e3a00000 	mov	r0, #0
     cf0:	e28dd010 	add	sp, sp, #16
     cf4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     cf8:	e12fff1e 	bx	lr
     cfc:	e3a00001 	mov	r0, #1
     d00:	e1a00410 	lsl	r0, r0, r4
     d04:	e08c8104 	add	r8, ip, r4, lsl #2
     d08:	e3560002 	cmp	r6, #2
     d0c:	e59c7188 	ldr	r7, [ip, #392]	; 0x188
     d10:	e5883108 	str	r3, [r8, #264]	; 0x108
     d14:	059c318c 	ldreq	r3, [ip, #396]	; 0x18c
     d18:	e1877000 	orr	r7, r7, r0
     d1c:	01830000 	orreq	r0, r3, r0
     d20:	e1a05008 	mov	r5, r8
     d24:	e5882088 	str	r2, [r8, #136]	; 0x88
     d28:	e58c7188 	str	r7, [ip, #392]	; 0x188
     d2c:	058c018c 	streq	r0, [ip, #396]	; 0x18c
     d30:	eaffffe9 	b	cdc <__register_exitproc+0x94>
     d34:	0000102c 	.word	0x0000102c
     d38:	00000000 	.word	0x00000000

00000d3c <__call_exitprocs>:
     d3c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d40:	e59f3168 	ldr	r3, [pc, #360]	; eb0 <__call_exitprocs+0x174>
     d44:	e5933000 	ldr	r3, [r3]
     d48:	e24dd014 	sub	sp, sp, #20
     d4c:	e58d3004 	str	r3, [sp, #4]
     d50:	e2833f52 	add	r3, r3, #328	; 0x148
     d54:	e58d0008 	str	r0, [sp, #8]
     d58:	e58d300c 	str	r3, [sp, #12]
     d5c:	e1a07001 	mov	r7, r1
     d60:	e3a08001 	mov	r8, #1
     d64:	e59d3004 	ldr	r3, [sp, #4]
     d68:	e5936148 	ldr	r6, [r3, #328]	; 0x148
     d6c:	e3560000 	cmp	r6, #0
     d70:	e59db00c 	ldr	fp, [sp, #12]
     d74:	0a000033 	beq	e48 <__call_exitprocs+0x10c>
     d78:	e5965004 	ldr	r5, [r6, #4]
     d7c:	e2554001 	subs	r4, r5, #1
     d80:	5286a088 	addpl	sl, r6, #136	; 0x88
     d84:	5285501f 	addpl	r5, r5, #31
     d88:	508a5105 	addpl	r5, sl, r5, lsl #2
     d8c:	5a000007 	bpl	db0 <__call_exitprocs+0x74>
     d90:	ea000029 	b	e3c <__call_exitprocs+0x100>
     d94:	e5953000 	ldr	r3, [r5]
     d98:	e1530007 	cmp	r3, r7
     d9c:	0a000005 	beq	db8 <__call_exitprocs+0x7c>
     da0:	e2444001 	sub	r4, r4, #1
     da4:	e3740001 	cmn	r4, #1
     da8:	e2455004 	sub	r5, r5, #4
     dac:	0a000022 	beq	e3c <__call_exitprocs+0x100>
     db0:	e3570000 	cmp	r7, #0
     db4:	1afffff6 	bne	d94 <__call_exitprocs+0x58>
     db8:	e5963004 	ldr	r3, [r6, #4]
     dbc:	e06a2005 	rsb	r2, sl, r5
     dc0:	e2433001 	sub	r3, r3, #1
     dc4:	e0862002 	add	r2, r6, r2
     dc8:	e1530004 	cmp	r3, r4
     dcc:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
     dd0:	13a01000 	movne	r1, #0
     dd4:	05864004 	streq	r4, [r6, #4]
     dd8:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
     ddc:	e3530000 	cmp	r3, #0
     de0:	0affffee 	beq	da0 <__call_exitprocs+0x64>
     de4:	e1a02418 	lsl	r2, r8, r4
     de8:	e5961188 	ldr	r1, [r6, #392]	; 0x188
     dec:	e1120001 	tst	r2, r1
     df0:	e5969004 	ldr	r9, [r6, #4]
     df4:	0a000016 	beq	e54 <__call_exitprocs+0x118>
     df8:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
     dfc:	e1120001 	tst	r2, r1
     e00:	1a000016 	bne	e60 <__call_exitprocs+0x124>
     e04:	e59d0008 	ldr	r0, [sp, #8]
     e08:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
     e0c:	e1a0e00f 	mov	lr, pc
     e10:	e12fff13 	bx	r3
     e14:	e5963004 	ldr	r3, [r6, #4]
     e18:	e1530009 	cmp	r3, r9
     e1c:	1affffd0 	bne	d64 <__call_exitprocs+0x28>
     e20:	e59b3000 	ldr	r3, [fp]
     e24:	e1530006 	cmp	r3, r6
     e28:	1affffcd 	bne	d64 <__call_exitprocs+0x28>
     e2c:	e2444001 	sub	r4, r4, #1
     e30:	e3740001 	cmn	r4, #1
     e34:	e2455004 	sub	r5, r5, #4
     e38:	1affffdc 	bne	db0 <__call_exitprocs+0x74>
     e3c:	e59f1070 	ldr	r1, [pc, #112]	; eb4 <__call_exitprocs+0x178>
     e40:	e3510000 	cmp	r1, #0
     e44:	1a000009 	bne	e70 <__call_exitprocs+0x134>
     e48:	e28dd014 	add	sp, sp, #20
     e4c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e50:	e12fff1e 	bx	lr
     e54:	e1a0e00f 	mov	lr, pc
     e58:	e12fff13 	bx	r3
     e5c:	eaffffec 	b	e14 <__call_exitprocs+0xd8>
     e60:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
     e64:	e1a0e00f 	mov	lr, pc
     e68:	e12fff13 	bx	r3
     e6c:	eaffffe8 	b	e14 <__call_exitprocs+0xd8>
     e70:	e5963004 	ldr	r3, [r6, #4]
     e74:	e3530000 	cmp	r3, #0
     e78:	e5963000 	ldr	r3, [r6]
     e7c:	1a000008 	bne	ea4 <__call_exitprocs+0x168>
     e80:	e3530000 	cmp	r3, #0
     e84:	0a000006 	beq	ea4 <__call_exitprocs+0x168>
     e88:	e1a00006 	mov	r0, r6
     e8c:	e58b3000 	str	r3, [fp]
     e90:	e320f000 	nop	{0}
     e94:	e59b6000 	ldr	r6, [fp]
     e98:	e3560000 	cmp	r6, #0
     e9c:	1affffb5 	bne	d78 <__call_exitprocs+0x3c>
     ea0:	eaffffe8 	b	e48 <__call_exitprocs+0x10c>
     ea4:	e1a0b006 	mov	fp, r6
     ea8:	e1a06003 	mov	r6, r3
     eac:	eafffff9 	b	e98 <__call_exitprocs+0x15c>
     eb0:	0000102c 	.word	0x0000102c
     eb4:	00000000 	.word	0x00000000

00000eb8 <register_fini>:
     eb8:	e92d4008 	push	{r3, lr}
     ebc:	e59f3010 	ldr	r3, [pc, #16]	; ed4 <register_fini+0x1c>
     ec0:	e3530000 	cmp	r3, #0
     ec4:	159f000c 	ldrne	r0, [pc, #12]	; ed8 <register_fini+0x20>
     ec8:	1bffff49 	blne	bf4 <atexit>
     ecc:	e8bd4008 	pop	{r3, lr}
     ed0:	e12fff1e 	bx	lr
     ed4:	00001054 	.word	0x00001054
     ed8:	00000edc 	.word	0x00000edc

00000edc <__libc_fini_array>:
     edc:	e92d4038 	push	{r3, r4, r5, lr}
     ee0:	e59f5030 	ldr	r5, [pc, #48]	; f18 <__libc_fini_array+0x3c>
     ee4:	e59f4030 	ldr	r4, [pc, #48]	; f1c <__libc_fini_array+0x40>
     ee8:	e0654004 	rsb	r4, r5, r4
     eec:	e1b04144 	asrs	r4, r4, #2
     ef0:	10855104 	addne	r5, r5, r4, lsl #2
     ef4:	0a000004 	beq	f0c <__libc_fini_array+0x30>
     ef8:	e5353004 	ldr	r3, [r5, #-4]!
     efc:	e1a0e00f 	mov	lr, pc
     f00:	e12fff13 	bx	r3
     f04:	e2544001 	subs	r4, r4, #1
     f08:	1afffffa 	bne	ef8 <__libc_fini_array+0x1c>
     f0c:	eb000050 	bl	1054 <__libc_fini>
     f10:	e8bd4038 	pop	{r3, r4, r5, lr}
     f14:	e12fff1e 	bx	lr
     f18:	0000106c 	.word	0x0000106c
     f1c:	00001070 	.word	0x00001070

00000f20 <__cs3_premain>:
     f20:	e92d4008 	push	{r3, lr}
     f24:	eb00001d 	bl	fa0 <__libc_init_array>
     f28:	e59f3030 	ldr	r3, [pc, #48]	; f60 <__cs3_premain+0x40>
     f2c:	e3530000 	cmp	r3, #0
     f30:	15930000 	ldrne	r0, [r3]
     f34:	01a00003 	moveq	r0, r3
     f38:	e59f3024 	ldr	r3, [pc, #36]	; f64 <__cs3_premain+0x44>
     f3c:	e3530000 	cmp	r3, #0
     f40:	15931000 	ldrne	r1, [r3]
     f44:	01a01003 	moveq	r1, r3
     f48:	e3a02000 	mov	r2, #0
     f4c:	ebfffd78 	bl	534 <main>
     f50:	e59f3010 	ldr	r3, [pc, #16]	; f68 <__cs3_premain+0x48>
     f54:	e3530000 	cmp	r3, #0
     f58:	1bffff2d 	blne	c14 <exit>
     f5c:	eafffffe 	b	f5c <__cs3_premain+0x3c>
	...
     f68:	00000c14 	.word	0x00000c14

00000f6c <_exit>:
     f6c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f70:	e3a00018 	mov	r0, #24
     f74:	e59f1004 	ldr	r1, [pc, #4]	; f80 <_exit+0x14>
     f78:	ef123456 	svc	0x00123456
     f7c:	eafffffe 	b	f7c <_exit+0x10>
     f80:	00020026 	.word	0x00020026

00000f84 <__cs3_isr_interrupt>:
     f84:	eafffffe 	b	f84 <__cs3_isr_interrupt>

00000f88 <__cs3_isr_undef>:
     f88:	eafffffe 	b	f88 <__cs3_isr_undef>

00000f8c <__cs3_isr_swi>:
     f8c:	eafffffe 	b	f8c <__cs3_isr_swi>

00000f90 <__cs3_isr_pabort>:
     f90:	eafffffe 	b	f90 <__cs3_isr_pabort>

00000f94 <__cs3_isr_dabort>:
     f94:	eafffffe 	b	f94 <__cs3_isr_dabort>

00000f98 <__cs3_isr_irq>:
     f98:	eafffffe 	b	f98 <__cs3_isr_irq>

00000f9c <__cs3_isr_fiq>:
     f9c:	eafffffe 	b	f9c <__cs3_isr_fiq>

00000fa0 <__libc_init_array>:
     fa0:	e92d4070 	push	{r4, r5, r6, lr}
     fa4:	e59f506c 	ldr	r5, [pc, #108]	; 1018 <__libc_init_array+0x78>
     fa8:	e59f606c 	ldr	r6, [pc, #108]	; 101c <__libc_init_array+0x7c>
     fac:	e0656006 	rsb	r6, r5, r6
     fb0:	e1b06146 	asrs	r6, r6, #2
     fb4:	12455004 	subne	r5, r5, #4
     fb8:	13a04000 	movne	r4, #0
     fbc:	0a000005 	beq	fd8 <__libc_init_array+0x38>
     fc0:	e5b53004 	ldr	r3, [r5, #4]!
     fc4:	e2844001 	add	r4, r4, #1
     fc8:	e1a0e00f 	mov	lr, pc
     fcc:	e12fff13 	bx	r3
     fd0:	e1560004 	cmp	r6, r4
     fd4:	1afffff9 	bne	fc0 <__libc_init_array+0x20>
     fd8:	e59f5040 	ldr	r5, [pc, #64]	; 1020 <__libc_init_array+0x80>
     fdc:	e59f6040 	ldr	r6, [pc, #64]	; 1024 <__libc_init_array+0x84>
     fe0:	e0656006 	rsb	r6, r5, r6
     fe4:	eb000012 	bl	1034 <_init>
     fe8:	e1b06146 	asrs	r6, r6, #2
     fec:	12455004 	subne	r5, r5, #4
     ff0:	13a04000 	movne	r4, #0
     ff4:	0a000005 	beq	1010 <__libc_init_array+0x70>
     ff8:	e5b53004 	ldr	r3, [r5, #4]!
     ffc:	e2844001 	add	r4, r4, #1
    1000:	e1a0e00f 	mov	lr, pc
    1004:	e12fff13 	bx	r3
    1008:	e1560004 	cmp	r6, r4
    100c:	1afffff9 	bne	ff8 <__libc_init_array+0x58>
    1010:	e8bd4070 	pop	{r4, r5, r6, lr}
    1014:	e12fff1e 	bx	lr
    1018:	0000104c 	.word	0x0000104c
    101c:	0000104c 	.word	0x0000104c
    1020:	0000104c 	.word	0x0000104c
    1024:	00001054 	.word	0x00001054

Disassembly of section .rodata:

0000102c <_global_impure_ptr>:
    102c:	000010a8 00000043                       ....C...

00001034 <_init>:
    1034:	e1a0c00d 	mov	ip, sp
    1038:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
    103c:	e24cb004 	sub	fp, ip, #4
    1040:	e24bd028 	sub	sp, fp, #40	; 0x28
    1044:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    1048:	e12fff1e 	bx	lr

0000104c <__init_array_start>:
    104c:	00000eb8 	.word	0x00000eb8

00001050 <__frame_dummy_init_array_entry>:
    1050:	00000208                                ....

00001054 <__libc_fini>:
    1054:	e1a0c00d 	mov	ip, sp
    1058:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
    105c:	e24cb004 	sub	fp, ip, #4
    1060:	e24bd028 	sub	sp, fp, #40	; 0x28
    1064:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    1068:	e12fff1e 	bx	lr

0000106c <__fini_array_start>:
    106c:	000001c4 	.word	0x000001c4

00001070 <__cs3_regions>:
	...
    107c:	000014d8 	.word	0x000014d8
    1080:	00000030 	.word	0x00000030

00001084 <__cs3_regions_end>:
    1084:	00000000 	.word	0x00000000
