
Calculator.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 c4 09 00 00 c8 09 00 00 cc 09 00 00     @...............
  30:	d0 09 00 00 c0 09 00 00 d4 09 00 00 d8 09 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	ip, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	ip!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, ip
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, ip
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	ip, r2, r3
  bc:	e15e000c 	cmp	lr, ip
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000220 	bl	95c <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000ac0 	.word	0x00000ac0

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000f00 	.word	0x00000f00

00000124 <__cs3_heap_start_ptr>:
 124:	00000f28 	.word	0x00000f28

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000f08 	.word	0x00000f08
 170:	00000f0b 	.word	0x00000f0b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000f08 	.word	0x00000f08
 1bc:	00000f08 	.word	0x00000f08
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000f08 	.word	0x00000f08
 200:	00000000 	.word	0x00000000
 204:	00000a64 	.word	0x00000a64

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000a64 	.word	0x00000a64
 250:	00000f0c 	.word	0x00000f0c
 254:	00000ac0 	.word	0x00000ac0
 258:	00000000 	.word	0x00000000

0000025c <countDigit>:
volatile int * Display2_ptr = (int * ) HEX5_HEX4_BASE;

//* utilty functions*//
int countDigit(int val) {
  int count = 0;
  while (val != 0) {
 25c:	e2503000 	subs	r3, r0, #0
 260:	0a000008 	beq	288 <countDigit+0x2c>
volatile int * Display1_ptr = (int * ) HEX3_HEX0_BASE;
volatile int * Display2_ptr = (int * ) HEX5_HEX4_BASE;

//* utilty functions*//
int countDigit(int val) {
  int count = 0;
 264:	e3a00000 	mov	r0, #0
  while (val != 0) {
    val = val / 10;
 268:	e3061667 	movw	r1, #26215	; 0x6667
 26c:	e3461666 	movt	r1, #26214	; 0x6666
 270:	e0c2c391 	smull	ip, r2, r1, r3
 274:	e1a03fc3 	asr	r3, r3, #31
    count++;
 278:	e2800001 	add	r0, r0, #1
volatile int * Display2_ptr = (int * ) HEX5_HEX4_BASE;

//* utilty functions*//
int countDigit(int val) {
  int count = 0;
  while (val != 0) {
 27c:	e0733142 	rsbs	r3, r3, r2, asr #2
 280:	1afffffa 	bne	270 <countDigit+0x14>
 284:	e12fff1e 	bx	lr
volatile int * Display1_ptr = (int * ) HEX3_HEX0_BASE;
volatile int * Display2_ptr = (int * ) HEX5_HEX4_BASE;

//* utilty functions*//
int countDigit(int val) {
  int count = 0;
 288:	e3a00000 	mov	r0, #0
  while (val != 0) {
    val = val / 10;
    count++;
  }
  return count;
}
 28c:	e12fff1e 	bx	lr

00000290 <intToBin>:

unsigned intToBin(unsigned k) {
 290:	e92d4010 	push	{r4, lr}
  if (k == 0) return 0;
 294:	e2504000 	subs	r4, r0, #0
 298:	0a000007 	beq	2bc <intToBin+0x2c>
  if (k == 1) return 1; /* optional */
 29c:	e3540001 	cmp	r4, #1
 2a0:	0a000007 	beq	2c4 <intToBin+0x34>
  return (k % 2) + 10 * intToBin(k / 2);
 2a4:	e1a000a4 	lsr	r0, r4, #1
 2a8:	ebfffff8 	bl	290 <intToBin>
 2ac:	e0800100 	add	r0, r0, r0, lsl #2
 2b0:	e2044001 	and	r4, r4, #1
 2b4:	e0840080 	add	r0, r4, r0, lsl #1
 2b8:	e8bd8010 	pop	{r4, pc}
  }
  return count;
}

unsigned intToBin(unsigned k) {
  if (k == 0) return 0;
 2bc:	e3a00000 	mov	r0, #0
 2c0:	e8bd8010 	pop	{r4, pc}
  if (k == 1) return 1; /* optional */
 2c4:	e3a00001 	mov	r0, #1
  return (k % 2) + 10 * intToBin(k / 2);
}
 2c8:	e8bd8010 	pop	{r4, pc}

000002cc <DisplayError>:
  int BYTE = 8;
  int Letter_E = 0x79; //1111001
  int letter_r = 0x50; //1010000
  int letter_o = 0x5C; //1011100
  // Displaying r + o
  * Display1_ptr = letter_r << (3 * BYTE) |
 2cc:	e3003ac8 	movw	r3, #2760	; 0xac8
 2d0:	e3403000 	movt	r3, #0
 2d4:	e5931000 	ldr	r1, [r3]
 2d8:	e3052c50 	movw	r2, #23632	; 0x5c50
 2dc:	e3452050 	movt	r2, #20560	; 0x5050
 2e0:	e5812000 	str	r2, [r1]
    letter_r << (2 * BYTE) |
    letter_o << (1 * BYTE) |
    letter_r << (0 * BYTE);
  // Displaying E
  * Display2_ptr = Letter_E;
 2e4:	e5933004 	ldr	r3, [r3, #4]
 2e8:	e3a02079 	mov	r2, #121	; 0x79
 2ec:	e5832000 	str	r2, [r3]
 2f0:	e12fff1e 	bx	lr

000002f4 <DisplayOperator>:
}

void DisplayOperator(int oprID) {
 2f4:	e24dd008 	sub	sp, sp, #8
  char oprTable[5];
  oprTable[0] = 0x3F; // used as capital letter 'O'
 2f8:	e3a0303f 	mov	r3, #63	; 0x3f
 2fc:	e5cd3000 	strb	r3, [sp]
  oprTable[1] = 0x06; // + 
 300:	e3a03006 	mov	r3, #6
 304:	e5cd3001 	strb	r3, [sp, #1]
  oprTable[2] = 0x5B; // -
 308:	e3a0305b 	mov	r3, #91	; 0x5b
 30c:	e5cd3002 	strb	r3, [sp, #2]
  oprTable[3] = 0x4F; // x
 310:	e3a0304f 	mov	r3, #79	; 0x4f
 314:	e5cd3003 	strb	r3, [sp, #3]
  oprTable[4] = 0x66; // /
 318:	e3a03066 	mov	r3, #102	; 0x66
 31c:	e5cd3004 	strb	r3, [sp, #4]

  int BYTE = 8;
  int letter_p = 0x73; //1110011
  int letter_r = 0x50; //1010000
  // Displaying O + p + r + operator ID
  * Display1_ptr = oprTable[0] << (3 * BYTE) |
 320:	e3003ac8 	movw	r3, #2760	; 0xac8
 324:	e3403000 	movt	r3, #0
 328:	e5931000 	ldr	r1, [r3]
    letter_p << (2 * BYTE) |
    letter_r << (1 * BYTE) |
    oprTable[oprID] << (0 * BYTE);
 32c:	e28d2008 	add	r2, sp, #8
 330:	e0820000 	add	r0, r2, r0
 334:	e5500008 	ldrb	r0, [r0, #-8]
  int letter_p = 0x73; //1110011
  int letter_r = 0x50; //1010000
  // Displaying O + p + r + operator ID
  * Display1_ptr = oprTable[0] << (3 * BYTE) |
    letter_p << (2 * BYTE) |
    letter_r << (1 * BYTE) |
 338:	e3a02a05 	mov	r2, #20480	; 0x5000
 33c:	e3432f73 	movt	r2, #16243	; 0x3f73
 340:	e1802002 	orr	r2, r0, r2

  int BYTE = 8;
  int letter_p = 0x73; //1110011
  int letter_r = 0x50; //1010000
  // Displaying O + p + r + operator ID
  * Display1_ptr = oprTable[0] << (3 * BYTE) |
 344:	e5812000 	str	r2, [r1]
    letter_p << (2 * BYTE) |
    letter_r << (1 * BYTE) |
    oprTable[oprID] << (0 * BYTE);
  // turn off
  * Display2_ptr = 0x00;
 348:	e5933004 	ldr	r3, [r3, #4]
 34c:	e3a02000 	mov	r2, #0
 350:	e5832000 	str	r2, [r3]
}
 354:	e28dd008 	add	sp, sp, #8
 358:	e12fff1e 	bx	lr

0000035c <DisplayValue>:

// Displays number on 7 seg display
void DisplayValue(int value) { // max = 10, displays number from 0 - 9
 35c:	e92d0030 	push	{r4, r5}
 360:	e24dd028 	sub	sp, sp, #40	; 0x28
  char lookUpTable[10];
  lookUpTable[0] = 0x3F;
 364:	e3a0303f 	mov	r3, #63	; 0x3f
 368:	e5cd301c 	strb	r3, [sp, #28]
  lookUpTable[1] = 0x06;
 36c:	e3a03006 	mov	r3, #6
 370:	e5cd301d 	strb	r3, [sp, #29]
  lookUpTable[2] = 0x5B;
 374:	e3a0305b 	mov	r3, #91	; 0x5b
 378:	e5cd301e 	strb	r3, [sp, #30]
  lookUpTable[3] = 0x4F;
 37c:	e3a0304f 	mov	r3, #79	; 0x4f
 380:	e5cd301f 	strb	r3, [sp, #31]
  lookUpTable[4] = 0x66;
 384:	e3a03066 	mov	r3, #102	; 0x66
 388:	e5cd3020 	strb	r3, [sp, #32]
  lookUpTable[5] = 0x6D;
 38c:	e3a0306d 	mov	r3, #109	; 0x6d
 390:	e5cd3021 	strb	r3, [sp, #33]	; 0x21
  lookUpTable[6] = 0x7D;
 394:	e3a0307d 	mov	r3, #125	; 0x7d
 398:	e5cd3022 	strb	r3, [sp, #34]	; 0x22
  lookUpTable[7] = 0x07;
 39c:	e3a03007 	mov	r3, #7
 3a0:	e5cd3023 	strb	r3, [sp, #35]	; 0x23
  lookUpTable[8] = 0x7F;
 3a4:	e3a0307f 	mov	r3, #127	; 0x7f
 3a8:	e5cd3024 	strb	r3, [sp, #36]	; 0x24
  lookUpTable[9] = 0x6F;
 3ac:	e3a0306f 	mov	r3, #111	; 0x6f
 3b0:	e5cd3025 	strb	r3, [sp, #37]	; 0x25
 3b4:	e28d2018 	add	r2, sp, #24
  // turn off
  * Display2_ptr = 0x00;
}

// Displays number on 7 seg display
void DisplayValue(int value) { // max = 10, displays number from 0 - 9
 3b8:	e1a0400d 	mov	r4, sp
  int bit1, bit2, bit3, bit4, bit5, bit6;
  // if value can be represented by 6 digits
  int bitArray[6];
  int i = 5;
  while (i >= 0) {
    bitArray[i] = value % 10;
 3bc:	e306c667 	movw	ip, #26215	; 0x6667
 3c0:	e346c666 	movt	ip, #26214	; 0x6666
 3c4:	e0c1309c 	smull	r3, r1, ip, r0
 3c8:	e1a03fc0 	asr	r3, r0, #31
 3cc:	e0633141 	rsb	r3, r3, r1, asr #2
 3d0:	e0831103 	add	r1, r3, r3, lsl #2
 3d4:	e0400081 	sub	r0, r0, r1, lsl #1
 3d8:	e4020004 	str	r0, [r2], #-4
    value /= 10;
 3dc:	e1a00003 	mov	r0, r3
  int BYTE = 8;
  int bit1, bit2, bit3, bit4, bit5, bit6;
  // if value can be represented by 6 digits
  int bitArray[6];
  int i = 5;
  while (i >= 0) {
 3e0:	e1520004 	cmp	r2, r4
 3e4:	1afffff6 	bne	3c4 <DisplayValue+0x68>
    bitArray[i] = value % 10;
    value /= 10;
    i--;
  }

  bit6 = lookUpTable[bitArray[0]];
 3e8:	e59d3004 	ldr	r3, [sp, #4]
 3ec:	e28d4028 	add	r4, sp, #40	; 0x28
 3f0:	e0843003 	add	r3, r4, r3
 3f4:	e553100c 	ldrb	r1, [r3, #-12]
  bit5 = lookUpTable[bitArray[1]];
 3f8:	e59d3008 	ldr	r3, [sp, #8]
 3fc:	e0843003 	add	r3, r4, r3
 400:	e553200c 	ldrb	r2, [r3, #-12]
  bit3 = lookUpTable[bitArray[3]];
  bit2 = lookUpTable[bitArray[4]];
  bit1 = lookUpTable[bitArray[5]];

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
 404:	e3003ac8 	movw	r3, #2760	; 0xac8
 408:	e3403000 	movt	r3, #0
 40c:	e5930000 	ldr	r0, [r3]
    i--;
  }

  bit6 = lookUpTable[bitArray[0]];
  bit5 = lookUpTable[bitArray[1]];
  bit4 = lookUpTable[bitArray[2]];
 410:	e59dc00c 	ldr	ip, [sp, #12]
 414:	e084c00c 	add	ip, r4, ip
 418:	e55c400c 	ldrb	r4, [ip, #-12]
  bit3 = lookUpTable[bitArray[3]];
 41c:	e59dc010 	ldr	ip, [sp, #16]
 420:	e28d5028 	add	r5, sp, #40	; 0x28
 424:	e085c00c 	add	ip, r5, ip
 428:	e55cc00c 	ldrb	ip, [ip, #-12]
  bit2 = lookUpTable[bitArray[4]];
  bit1 = lookUpTable[bitArray[5]];

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
    bit3 << (2 * BYTE) |
 42c:	e1a0c80c 	lsl	ip, ip, #16
  bit3 = lookUpTable[bitArray[3]];
  bit2 = lookUpTable[bitArray[4]];
  bit1 = lookUpTable[bitArray[5]];

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
 430:	e18ccc04 	orr	ip, ip, r4, lsl #24
  bit6 = lookUpTable[bitArray[0]];
  bit5 = lookUpTable[bitArray[1]];
  bit4 = lookUpTable[bitArray[2]];
  bit3 = lookUpTable[bitArray[3]];
  bit2 = lookUpTable[bitArray[4]];
  bit1 = lookUpTable[bitArray[5]];
 434:	e59d4018 	ldr	r4, [sp, #24]
 438:	e0854004 	add	r4, r5, r4
 43c:	e554400c 	ldrb	r4, [r4, #-12]

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
    bit3 << (2 * BYTE) |
 440:	e18cc004 	orr	ip, ip, r4

  bit6 = lookUpTable[bitArray[0]];
  bit5 = lookUpTable[bitArray[1]];
  bit4 = lookUpTable[bitArray[2]];
  bit3 = lookUpTable[bitArray[3]];
  bit2 = lookUpTable[bitArray[4]];
 444:	e59d4014 	ldr	r4, [sp, #20]
 448:	e0854004 	add	r4, r5, r4
 44c:	e554400c 	ldrb	r4, [r4, #-12]
  bit1 = lookUpTable[bitArray[5]];

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
    bit3 << (2 * BYTE) |
    bit2 << (1 * BYTE) |
 450:	e18cc404 	orr	ip, ip, r4, lsl #8
  bit3 = lookUpTable[bitArray[3]];
  bit2 = lookUpTable[bitArray[4]];
  bit1 = lookUpTable[bitArray[5]];

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
 454:	e580c000 	str	ip, [r0]
    bit3 << (2 * BYTE) |
    bit2 << (1 * BYTE) |
    bit1 << (0 * BYTE);

  // Displaying bit 5 - 6 of value 
  * Display2_ptr = bit6 << (1 * BYTE) |
 458:	e5933004 	ldr	r3, [r3, #4]
 45c:	e1822401 	orr	r2, r2, r1, lsl #8
 460:	e5832000 	str	r2, [r3]
    bit5 << (0 * BYTE);
}
 464:	e28dd028 	add	sp, sp, #40	; 0x28
 468:	e8bd0030 	pop	{r4, r5}
 46c:	e12fff1e 	bx	lr

00000470 <ReadSwitches>:

// Reads switches
int ReadSwitches(void){
    volatile int *SW_ptr = (int *)SW_BASE;
    return (*(SW_ptr));
 470:	e3a03000 	mov	r3, #0
 474:	e34f3f20 	movt	r3, #65312	; 0xff20
 478:	e5930040 	ldr	r0, [r3, #64]	; 0x40
}
 47c:	e12fff1e 	bx	lr

00000480 <ReadButton>:

// Reads buttons
int ReadButton(int btn) {
  volatile int * BTN_ptr = (int * ) KEY_BASE;
  // Returns 1 if the given button is pressed, 0 otherwise due to & operator
  return (( * BTN_ptr >> (btn)) & 1);
 480:	e3a03000 	mov	r3, #0
 484:	e34f3f20 	movt	r3, #65312	; 0xff20
 488:	e5933050 	ldr	r3, [r3, #80]	; 0x50
 48c:	e1a00053 	asr	r0, r3, r0
}
 490:	e2000001 	and	r0, r0, #1
 494:	e12fff1e 	bx	lr

00000498 <GetInput>:

// get input from switch 0 - 5
int GetInput(void) {
 498:	e24dd008 	sub	sp, sp, #8
  // pointer to switch address
  volatile int * SW_ptr = (int * ) SW_BASE;
  volatile int inputValue = * (SW_ptr);
 49c:	e3a03000 	mov	r3, #0
 4a0:	e34f3f20 	movt	r3, #65312	; 0xff20
 4a4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
 4a8:	e58d3004 	str	r3, [sp, #4]
  // reads slide switch bank and return current value (encoded in binary)
  // return lowest 6 bits in the switch bank (2 ^ 6)
  return (inputValue % (2 * 2 * 2 * 2 * 2 * 2));
 4ac:	e59d2004 	ldr	r2, [sp, #4]
 4b0:	e1a03fc2 	asr	r3, r2, #31
 4b4:	e1a03d23 	lsr	r3, r3, #26
 4b8:	e0822003 	add	r2, r2, r3
 4bc:	e202003f 	and	r0, r2, #63	; 0x3f
}
 4c0:	e0630000 	rsb	r0, r3, r0
 4c4:	e28dd008 	add	sp, sp, #8
 4c8:	e12fff1e 	bx	lr

000004cc <main>:



int answer;

int main(void) {
 4cc:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}

  DisplayValue(0); // Initialize display
 4d0:	e3a00000 	mov	r0, #0
 4d4:	ebffffa0 	bl	35c <DisplayValue>
  // Main loop
  while (1) {
   

    // plus
    if (ReadButton(0) && !ReadButton(1) && !ReadButton(3) && !ReadButton(3)) {
 4d8:	e3a04000 	mov	r4, #0
 4dc:	e3a05001 	mov	r5, #1
 4e0:	e3a07003 	mov	r7, #3
      DisplayOperator(1);
    }
    // minus
    if (!ReadButton(0) && ReadButton(1) && !ReadButton(2) && !ReadButton(3)) {
 4e4:	e3a06002 	mov	r6, #2
    if (!ReadButton(0) && !ReadButton(1) && ReadButton(2) && !ReadButton(3)) {
      DisplayOperator(3);
    }
    //divide
    if (!ReadButton(0) && !ReadButton(1) && !ReadButton(2) && ReadButton(3)) {
      DisplayOperator(4);
 4e8:	e3a0a004 	mov	sl, #4
    // }

    // If first switch is on, display lap time
    if (ReadSwitches() == 6)
    {
        DisplayValue(123);
 4ec:	e3a0807b 	mov	r8, #123	; 0x7b
  // Main loop
  while (1) {
   

    // plus
    if (ReadButton(0) && !ReadButton(1) && !ReadButton(3) && !ReadButton(3)) {
 4f0:	e1a00004 	mov	r0, r4
 4f4:	ebffffe1 	bl	480 <ReadButton>
 4f8:	e3500000 	cmp	r0, #0
 4fc:	0a00000d 	beq	538 <main+0x6c>
 500:	e1a00005 	mov	r0, r5
 504:	ebffffdd 	bl	480 <ReadButton>
 508:	e3500000 	cmp	r0, #0
 50c:	1a000009 	bne	538 <main+0x6c>
 510:	e1a00007 	mov	r0, r7
 514:	ebffffd9 	bl	480 <ReadButton>
 518:	e3500000 	cmp	r0, #0
 51c:	1a000005 	bne	538 <main+0x6c>
 520:	e1a00007 	mov	r0, r7
 524:	ebffffd5 	bl	480 <ReadButton>
 528:	e3500000 	cmp	r0, #0
 52c:	1a000001 	bne	538 <main+0x6c>
      DisplayOperator(1);
 530:	e1a00005 	mov	r0, r5
 534:	ebffff6e 	bl	2f4 <DisplayOperator>
    }
    // minus
    if (!ReadButton(0) && ReadButton(1) && !ReadButton(2) && !ReadButton(3)) {
 538:	e1a00004 	mov	r0, r4
 53c:	ebffffcf 	bl	480 <ReadButton>
 540:	e3500000 	cmp	r0, #0
 544:	1a00000d 	bne	580 <main+0xb4>
 548:	e1a00005 	mov	r0, r5
 54c:	ebffffcb 	bl	480 <ReadButton>
 550:	e3500000 	cmp	r0, #0
 554:	0a000009 	beq	580 <main+0xb4>
 558:	e1a00006 	mov	r0, r6
 55c:	ebffffc7 	bl	480 <ReadButton>
 560:	e3500000 	cmp	r0, #0
 564:	1a000005 	bne	580 <main+0xb4>
 568:	e1a00007 	mov	r0, r7
 56c:	ebffffc3 	bl	480 <ReadButton>
 570:	e3500000 	cmp	r0, #0
 574:	1a000001 	bne	580 <main+0xb4>
      DisplayOperator(2);
 578:	e1a00006 	mov	r0, r6
 57c:	ebffff5c 	bl	2f4 <DisplayOperator>
    }
    // multiply
    if (!ReadButton(0) && !ReadButton(1) && ReadButton(2) && !ReadButton(3)) {
 580:	e1a00004 	mov	r0, r4
 584:	ebffffbd 	bl	480 <ReadButton>
 588:	e3500000 	cmp	r0, #0
 58c:	1a00000d 	bne	5c8 <main+0xfc>
 590:	e1a00005 	mov	r0, r5
 594:	ebffffb9 	bl	480 <ReadButton>
 598:	e3500000 	cmp	r0, #0
 59c:	1a000009 	bne	5c8 <main+0xfc>
 5a0:	e1a00006 	mov	r0, r6
 5a4:	ebffffb5 	bl	480 <ReadButton>
 5a8:	e3500000 	cmp	r0, #0
 5ac:	0a000005 	beq	5c8 <main+0xfc>
 5b0:	e1a00007 	mov	r0, r7
 5b4:	ebffffb1 	bl	480 <ReadButton>
 5b8:	e3500000 	cmp	r0, #0
 5bc:	1a000001 	bne	5c8 <main+0xfc>
      DisplayOperator(3);
 5c0:	e1a00007 	mov	r0, r7
 5c4:	ebffff4a 	bl	2f4 <DisplayOperator>
    }
    //divide
    if (!ReadButton(0) && !ReadButton(1) && !ReadButton(2) && ReadButton(3)) {
 5c8:	e1a00004 	mov	r0, r4
 5cc:	ebffffab 	bl	480 <ReadButton>
 5d0:	e3500000 	cmp	r0, #0
 5d4:	1a00000d 	bne	610 <main+0x144>
 5d8:	e1a00005 	mov	r0, r5
 5dc:	ebffffa7 	bl	480 <ReadButton>
 5e0:	e3500000 	cmp	r0, #0
 5e4:	1a000009 	bne	610 <main+0x144>
 5e8:	e1a00006 	mov	r0, r6
 5ec:	ebffffa3 	bl	480 <ReadButton>
 5f0:	e3500000 	cmp	r0, #0
 5f4:	1a000005 	bne	610 <main+0x144>
 5f8:	e1a00007 	mov	r0, r7
 5fc:	ebffff9f 	bl	480 <ReadButton>
 600:	e3500000 	cmp	r0, #0
 604:	0a000001 	beq	610 <main+0x144>
      DisplayOperator(4);
 608:	e1a0000a 	mov	r0, sl
 60c:	ebffff38 	bl	2f4 <DisplayOperator>
    // else if (ReadSwitches() == 8) {

    // }

    // If first switch is on, display lap time
    if (ReadSwitches() == 6)
 610:	ebffff96 	bl	470 <ReadSwitches>
 614:	e3500006 	cmp	r0, #6
 618:	1a000002 	bne	628 <main+0x15c>
    {
        DisplayValue(123);
 61c:	e1a00008 	mov	r0, r8
 620:	ebffff4d 	bl	35c <DisplayValue>
 624:	eaffffb1 	b	4f0 <main+0x24>
    } else // Otherwise, display current stopwatch time
    {
        DisplayError();
 628:	ebffff27 	bl	2cc <DisplayError>
 62c:	eaffffaf 	b	4f0 <main+0x24>

00000630 <atexit>:
 630:	e1a01000 	mov	r1, r0
 634:	e3a00000 	mov	r0, #0
 638:	e92d4008 	push	{r3, lr}
 63c:	e1a02000 	mov	r2, r0
 640:	e1a03000 	mov	r3, r0
 644:	eb00000e 	bl	684 <__register_exitproc>
 648:	e8bd4008 	pop	{r3, lr}
 64c:	e12fff1e 	bx	lr

00000650 <exit>:
 650:	e92d4008 	push	{r3, lr}
 654:	e3a01000 	mov	r1, #0
 658:	e1a04000 	mov	r4, r0
 65c:	eb000045 	bl	778 <__call_exitprocs>
 660:	e59f3018 	ldr	r3, [pc, #24]	; 680 <exit+0x30>
 664:	e5930000 	ldr	r0, [r3]
 668:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 66c:	e3530000 	cmp	r3, #0
 670:	11a0e00f 	movne	lr, pc
 674:	112fff13 	bxne	r3
 678:	e1a00004 	mov	r0, r4
 67c:	eb0000c9 	bl	9a8 <_exit>
 680:	00000a68 	.word	0x00000a68

00000684 <__register_exitproc>:
 684:	e59fc0e4 	ldr	ip, [pc, #228]	; 770 <__register_exitproc+0xec>
 688:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 68c:	e59c4000 	ldr	r4, [ip]
 690:	e594c148 	ldr	ip, [r4, #328]	; 0x148
 694:	e35c0000 	cmp	ip, #0
 698:	0284cf53 	addeq	ip, r4, #332	; 0x14c
 69c:	e59c5004 	ldr	r5, [ip, #4]
 6a0:	0584c148 	streq	ip, [r4, #328]	; 0x148
 6a4:	e355001f 	cmp	r5, #31
 6a8:	e24dd010 	sub	sp, sp, #16
 6ac:	e1a06000 	mov	r6, r0
 6b0:	da000015 	ble	70c <__register_exitproc+0x88>
 6b4:	e59f00b8 	ldr	r0, [pc, #184]	; 774 <__register_exitproc+0xf0>
 6b8:	e3500000 	cmp	r0, #0
 6bc:	1a000001 	bne	6c8 <__register_exitproc+0x44>
 6c0:	e3e00000 	mvn	r0, #0
 6c4:	ea000018 	b	72c <__register_exitproc+0xa8>
 6c8:	e3a00e19 	mov	r0, #400	; 0x190
 6cc:	e58d100c 	str	r1, [sp, #12]
 6d0:	e58d2008 	str	r2, [sp, #8]
 6d4:	e58d3004 	str	r3, [sp, #4]
 6d8:	e320f000 	nop	{0}
 6dc:	e250c000 	subs	ip, r0, #0
 6e0:	e59d100c 	ldr	r1, [sp, #12]
 6e4:	e59d2008 	ldr	r2, [sp, #8]
 6e8:	e59d3004 	ldr	r3, [sp, #4]
 6ec:	0afffff3 	beq	6c0 <__register_exitproc+0x3c>
 6f0:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 6f4:	e3a00000 	mov	r0, #0
 6f8:	e58c0004 	str	r0, [ip, #4]
 6fc:	e58c5000 	str	r5, [ip]
 700:	e584c148 	str	ip, [r4, #328]	; 0x148
 704:	e58c0188 	str	r0, [ip, #392]	; 0x188
 708:	e58c018c 	str	r0, [ip, #396]	; 0x18c
 70c:	e3560000 	cmp	r6, #0
 710:	e59c4004 	ldr	r4, [ip, #4]
 714:	1a000007 	bne	738 <__register_exitproc+0xb4>
 718:	e2843002 	add	r3, r4, #2
 71c:	e2844001 	add	r4, r4, #1
 720:	e78c1103 	str	r1, [ip, r3, lsl #2]
 724:	e58c4004 	str	r4, [ip, #4]
 728:	e3a00000 	mov	r0, #0
 72c:	e28dd010 	add	sp, sp, #16
 730:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 734:	e12fff1e 	bx	lr
 738:	e3a00001 	mov	r0, #1
 73c:	e1a00410 	lsl	r0, r0, r4
 740:	e08c8104 	add	r8, ip, r4, lsl #2
 744:	e3560002 	cmp	r6, #2
 748:	e59c7188 	ldr	r7, [ip, #392]	; 0x188
 74c:	e5883108 	str	r3, [r8, #264]	; 0x108
 750:	059c318c 	ldreq	r3, [ip, #396]	; 0x18c
 754:	e1877000 	orr	r7, r7, r0
 758:	01830000 	orreq	r0, r3, r0
 75c:	e1a05008 	mov	r5, r8
 760:	e5882088 	str	r2, [r8, #136]	; 0x88
 764:	e58c7188 	str	r7, [ip, #392]	; 0x188
 768:	058c018c 	streq	r0, [ip, #396]	; 0x18c
 76c:	eaffffe9 	b	718 <__register_exitproc+0x94>
 770:	00000a68 	.word	0x00000a68
 774:	00000000 	.word	0x00000000

00000778 <__call_exitprocs>:
 778:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 77c:	e59f3168 	ldr	r3, [pc, #360]	; 8ec <__call_exitprocs+0x174>
 780:	e5933000 	ldr	r3, [r3]
 784:	e24dd014 	sub	sp, sp, #20
 788:	e58d3004 	str	r3, [sp, #4]
 78c:	e2833f52 	add	r3, r3, #328	; 0x148
 790:	e58d0008 	str	r0, [sp, #8]
 794:	e58d300c 	str	r3, [sp, #12]
 798:	e1a07001 	mov	r7, r1
 79c:	e3a08001 	mov	r8, #1
 7a0:	e59d3004 	ldr	r3, [sp, #4]
 7a4:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 7a8:	e3560000 	cmp	r6, #0
 7ac:	e59db00c 	ldr	fp, [sp, #12]
 7b0:	0a000033 	beq	884 <__call_exitprocs+0x10c>
 7b4:	e5965004 	ldr	r5, [r6, #4]
 7b8:	e2554001 	subs	r4, r5, #1
 7bc:	5286a088 	addpl	sl, r6, #136	; 0x88
 7c0:	5285501f 	addpl	r5, r5, #31
 7c4:	508a5105 	addpl	r5, sl, r5, lsl #2
 7c8:	5a000007 	bpl	7ec <__call_exitprocs+0x74>
 7cc:	ea000029 	b	878 <__call_exitprocs+0x100>
 7d0:	e5953000 	ldr	r3, [r5]
 7d4:	e1530007 	cmp	r3, r7
 7d8:	0a000005 	beq	7f4 <__call_exitprocs+0x7c>
 7dc:	e2444001 	sub	r4, r4, #1
 7e0:	e3740001 	cmn	r4, #1
 7e4:	e2455004 	sub	r5, r5, #4
 7e8:	0a000022 	beq	878 <__call_exitprocs+0x100>
 7ec:	e3570000 	cmp	r7, #0
 7f0:	1afffff6 	bne	7d0 <__call_exitprocs+0x58>
 7f4:	e5963004 	ldr	r3, [r6, #4]
 7f8:	e06a2005 	rsb	r2, sl, r5
 7fc:	e2433001 	sub	r3, r3, #1
 800:	e0862002 	add	r2, r6, r2
 804:	e1530004 	cmp	r3, r4
 808:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 80c:	13a01000 	movne	r1, #0
 810:	05864004 	streq	r4, [r6, #4]
 814:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 818:	e3530000 	cmp	r3, #0
 81c:	0affffee 	beq	7dc <__call_exitprocs+0x64>
 820:	e1a02418 	lsl	r2, r8, r4
 824:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 828:	e1120001 	tst	r2, r1
 82c:	e5969004 	ldr	r9, [r6, #4]
 830:	0a000016 	beq	890 <__call_exitprocs+0x118>
 834:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 838:	e1120001 	tst	r2, r1
 83c:	1a000016 	bne	89c <__call_exitprocs+0x124>
 840:	e59d0008 	ldr	r0, [sp, #8]
 844:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 848:	e1a0e00f 	mov	lr, pc
 84c:	e12fff13 	bx	r3
 850:	e5963004 	ldr	r3, [r6, #4]
 854:	e1530009 	cmp	r3, r9
 858:	1affffd0 	bne	7a0 <__call_exitprocs+0x28>
 85c:	e59b3000 	ldr	r3, [fp]
 860:	e1530006 	cmp	r3, r6
 864:	1affffcd 	bne	7a0 <__call_exitprocs+0x28>
 868:	e2444001 	sub	r4, r4, #1
 86c:	e3740001 	cmn	r4, #1
 870:	e2455004 	sub	r5, r5, #4
 874:	1affffdc 	bne	7ec <__call_exitprocs+0x74>
 878:	e59f1070 	ldr	r1, [pc, #112]	; 8f0 <__call_exitprocs+0x178>
 87c:	e3510000 	cmp	r1, #0
 880:	1a000009 	bne	8ac <__call_exitprocs+0x134>
 884:	e28dd014 	add	sp, sp, #20
 888:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 88c:	e12fff1e 	bx	lr
 890:	e1a0e00f 	mov	lr, pc
 894:	e12fff13 	bx	r3
 898:	eaffffec 	b	850 <__call_exitprocs+0xd8>
 89c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 8a0:	e1a0e00f 	mov	lr, pc
 8a4:	e12fff13 	bx	r3
 8a8:	eaffffe8 	b	850 <__call_exitprocs+0xd8>
 8ac:	e5963004 	ldr	r3, [r6, #4]
 8b0:	e3530000 	cmp	r3, #0
 8b4:	e5963000 	ldr	r3, [r6]
 8b8:	1a000008 	bne	8e0 <__call_exitprocs+0x168>
 8bc:	e3530000 	cmp	r3, #0
 8c0:	0a000006 	beq	8e0 <__call_exitprocs+0x168>
 8c4:	e1a00006 	mov	r0, r6
 8c8:	e58b3000 	str	r3, [fp]
 8cc:	e320f000 	nop	{0}
 8d0:	e59b6000 	ldr	r6, [fp]
 8d4:	e3560000 	cmp	r6, #0
 8d8:	1affffb5 	bne	7b4 <__call_exitprocs+0x3c>
 8dc:	eaffffe8 	b	884 <__call_exitprocs+0x10c>
 8e0:	e1a0b006 	mov	fp, r6
 8e4:	e1a06003 	mov	r6, r3
 8e8:	eafffff9 	b	8d4 <__call_exitprocs+0x15c>
 8ec:	00000a68 	.word	0x00000a68
 8f0:	00000000 	.word	0x00000000

000008f4 <register_fini>:
 8f4:	e92d4008 	push	{r3, lr}
 8f8:	e59f3010 	ldr	r3, [pc, #16]	; 910 <register_fini+0x1c>
 8fc:	e3530000 	cmp	r3, #0
 900:	159f000c 	ldrne	r0, [pc, #12]	; 914 <register_fini+0x20>
 904:	1bffff49 	blne	630 <atexit>
 908:	e8bd4008 	pop	{r3, lr}
 90c:	e12fff1e 	bx	lr
 910:	00000a90 	.word	0x00000a90
 914:	00000918 	.word	0x00000918

00000918 <__libc_fini_array>:
 918:	e92d4038 	push	{r3, r4, r5, lr}
 91c:	e59f5030 	ldr	r5, [pc, #48]	; 954 <__libc_fini_array+0x3c>
 920:	e59f4030 	ldr	r4, [pc, #48]	; 958 <__libc_fini_array+0x40>
 924:	e0654004 	rsb	r4, r5, r4
 928:	e1b04144 	asrs	r4, r4, #2
 92c:	10855104 	addne	r5, r5, r4, lsl #2
 930:	0a000004 	beq	948 <__libc_fini_array+0x30>
 934:	e5353004 	ldr	r3, [r5, #-4]!
 938:	e1a0e00f 	mov	lr, pc
 93c:	e12fff13 	bx	r3
 940:	e2544001 	subs	r4, r4, #1
 944:	1afffffa 	bne	934 <__libc_fini_array+0x1c>
 948:	eb000050 	bl	a90 <__libc_fini>
 94c:	e8bd4038 	pop	{r3, r4, r5, lr}
 950:	e12fff1e 	bx	lr
 954:	00000aa8 	.word	0x00000aa8
 958:	00000aac 	.word	0x00000aac

0000095c <__cs3_premain>:
 95c:	e92d4008 	push	{r3, lr}
 960:	eb00001d 	bl	9dc <__libc_init_array>
 964:	e59f3030 	ldr	r3, [pc, #48]	; 99c <__cs3_premain+0x40>
 968:	e3530000 	cmp	r3, #0
 96c:	15930000 	ldrne	r0, [r3]
 970:	01a00003 	moveq	r0, r3
 974:	e59f3024 	ldr	r3, [pc, #36]	; 9a0 <__cs3_premain+0x44>
 978:	e3530000 	cmp	r3, #0
 97c:	15931000 	ldrne	r1, [r3]
 980:	01a01003 	moveq	r1, r3
 984:	e3a02000 	mov	r2, #0
 988:	ebfffecf 	bl	4cc <main>
 98c:	e59f3010 	ldr	r3, [pc, #16]	; 9a4 <__cs3_premain+0x48>
 990:	e3530000 	cmp	r3, #0
 994:	1bffff2d 	blne	650 <exit>
 998:	eafffffe 	b	998 <__cs3_premain+0x3c>
	...
 9a4:	00000650 	.word	0x00000650

000009a8 <_exit>:
 9a8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 9ac:	e3a00018 	mov	r0, #24
 9b0:	e59f1004 	ldr	r1, [pc, #4]	; 9bc <_exit+0x14>
 9b4:	ef123456 	svc	0x00123456
 9b8:	eafffffe 	b	9b8 <_exit+0x10>
 9bc:	00020026 	.word	0x00020026

000009c0 <__cs3_isr_interrupt>:
 9c0:	eafffffe 	b	9c0 <__cs3_isr_interrupt>

000009c4 <__cs3_isr_undef>:
 9c4:	eafffffe 	b	9c4 <__cs3_isr_undef>

000009c8 <__cs3_isr_swi>:
 9c8:	eafffffe 	b	9c8 <__cs3_isr_swi>

000009cc <__cs3_isr_pabort>:
 9cc:	eafffffe 	b	9cc <__cs3_isr_pabort>

000009d0 <__cs3_isr_dabort>:
 9d0:	eafffffe 	b	9d0 <__cs3_isr_dabort>

000009d4 <__cs3_isr_irq>:
 9d4:	eafffffe 	b	9d4 <__cs3_isr_irq>

000009d8 <__cs3_isr_fiq>:
 9d8:	eafffffe 	b	9d8 <__cs3_isr_fiq>

000009dc <__libc_init_array>:
 9dc:	e92d4070 	push	{r4, r5, r6, lr}
 9e0:	e59f506c 	ldr	r5, [pc, #108]	; a54 <__libc_init_array+0x78>
 9e4:	e59f606c 	ldr	r6, [pc, #108]	; a58 <__libc_init_array+0x7c>
 9e8:	e0656006 	rsb	r6, r5, r6
 9ec:	e1b06146 	asrs	r6, r6, #2
 9f0:	12455004 	subne	r5, r5, #4
 9f4:	13a04000 	movne	r4, #0
 9f8:	0a000005 	beq	a14 <__libc_init_array+0x38>
 9fc:	e5b53004 	ldr	r3, [r5, #4]!
 a00:	e2844001 	add	r4, r4, #1
 a04:	e1a0e00f 	mov	lr, pc
 a08:	e12fff13 	bx	r3
 a0c:	e1560004 	cmp	r6, r4
 a10:	1afffff9 	bne	9fc <__libc_init_array+0x20>
 a14:	e59f5040 	ldr	r5, [pc, #64]	; a5c <__libc_init_array+0x80>
 a18:	e59f6040 	ldr	r6, [pc, #64]	; a60 <__libc_init_array+0x84>
 a1c:	e0656006 	rsb	r6, r5, r6
 a20:	eb000012 	bl	a70 <_init>
 a24:	e1b06146 	asrs	r6, r6, #2
 a28:	12455004 	subne	r5, r5, #4
 a2c:	13a04000 	movne	r4, #0
 a30:	0a000005 	beq	a4c <__libc_init_array+0x70>
 a34:	e5b53004 	ldr	r3, [r5, #4]!
 a38:	e2844001 	add	r4, r4, #1
 a3c:	e1a0e00f 	mov	lr, pc
 a40:	e12fff13 	bx	r3
 a44:	e1560004 	cmp	r6, r4
 a48:	1afffff9 	bne	a34 <__libc_init_array+0x58>
 a4c:	e8bd4070 	pop	{r4, r5, r6, lr}
 a50:	e12fff1e 	bx	lr
 a54:	00000a88 	.word	0x00000a88
 a58:	00000a88 	.word	0x00000a88
 a5c:	00000a88 	.word	0x00000a88
 a60:	00000a90 	.word	0x00000a90

Disassembly of section .rodata:

00000a68 <_global_impure_ptr>:
 a68:	00000ad8 00000043                       ....C...

00000a70 <_init>:
 a70:	e1a0c00d 	mov	ip, sp
 a74:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 a78:	e24cb004 	sub	fp, ip, #4
 a7c:	e24bd028 	sub	sp, fp, #40	; 0x28
 a80:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 a84:	e12fff1e 	bx	lr

00000a88 <__init_array_start>:
 a88:	000008f4 	.word	0x000008f4

00000a8c <__frame_dummy_init_array_entry>:
 a8c:	00000208                                ....

00000a90 <__libc_fini>:
 a90:	e1a0c00d 	mov	ip, sp
 a94:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 a98:	e24cb004 	sub	fp, ip, #4
 a9c:	e24bd028 	sub	sp, fp, #40	; 0x28
 aa0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 aa4:	e12fff1e 	bx	lr

00000aa8 <__fini_array_start>:
 aa8:	000001c4 	.word	0x000001c4

00000aac <__cs3_regions>:
	...
 ab8:	00000f08 	.word	0x00000f08
 abc:	00000020 	.word	0x00000020
