
Calculator.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 50 08 00 00 54 08 00 00 58 08 00 00     @...P...T...X...
  30:	5c 08 00 00 4c 08 00 00 60 08 00 00 64 08 00 00     \...L...`...d...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	ip, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	ip!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, ip
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, ip
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	ip, r2, r3
  bc:	e15e000c 	cmp	lr, ip
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0001c3 	bl	7e8 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	0000094c 	.word	0x0000094c

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000d90 	.word	0x00000d90

00000124 <__cs3_heap_start_ptr>:
 124:	00000db8 	.word	0x00000db8

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000d98 	.word	0x00000d98
 170:	00000d9b 	.word	0x00000d9b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000d98 	.word	0x00000d98
 1bc:	00000d98 	.word	0x00000d98
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000d98 	.word	0x00000d98
 200:	00000000 	.word	0x00000000
 204:	000008f0 	.word	0x000008f0

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	000008f0 	.word	0x000008f0
 250:	00000d9c 	.word	0x00000d9c
 254:	00000950 	.word	0x00000950
 258:	00000000 	.word	0x00000000

0000025c <DisplayHex>:
    int status;
} a9_timer;

// Displays number on 7 seg display
void DisplayHex(int ms, int s, int min)
{
 25c:	e92d00f0 	push	{r4, r5, r6, r7}
 260:	e24dd010 	sub	sp, sp, #16
    char lookUpTable[10];
    lookUpTable[0] = 0x3F;
 264:	e3a0303f 	mov	r3, #63	; 0x3f
 268:	e5cd3004 	strb	r3, [sp, #4]
    lookUpTable[1] = 0x06;
 26c:	e3a03006 	mov	r3, #6
 270:	e5cd3005 	strb	r3, [sp, #5]
    lookUpTable[2] = 0x5B;
 274:	e3a0305b 	mov	r3, #91	; 0x5b
 278:	e5cd3006 	strb	r3, [sp, #6]
    lookUpTable[3] = 0x4F;
 27c:	e3a0304f 	mov	r3, #79	; 0x4f
 280:	e5cd3007 	strb	r3, [sp, #7]
    lookUpTable[4] = 0x66;
 284:	e3a03066 	mov	r3, #102	; 0x66
 288:	e5cd3008 	strb	r3, [sp, #8]
    lookUpTable[5] = 0x6D;
 28c:	e3a0306d 	mov	r3, #109	; 0x6d
 290:	e5cd3009 	strb	r3, [sp, #9]
    lookUpTable[6] = 0x7D;
 294:	e3a0307d 	mov	r3, #125	; 0x7d
 298:	e5cd300a 	strb	r3, [sp, #10]
    lookUpTable[7] = 0x07;
 29c:	e3a03007 	mov	r3, #7
 2a0:	e5cd300b 	strb	r3, [sp, #11]
    lookUpTable[8] = 0x7F;
 2a4:	e3a0307f 	mov	r3, #127	; 0x7f
 2a8:	e5cd300c 	strb	r3, [sp, #12]
    lookUpTable[9] = 0x6F;
 2ac:	e3a0306f 	mov	r3, #111	; 0x6f
 2b0:	e5cd300d 	strb	r3, [sp, #13]

    // Displaying seconds and milliseconds
    *seconds_display_ptr = lookUpTable[s / 10] << 24 | lookUpTable[s % 10] << 16 | lookUpTable[ms / 10] << 8 | lookUpTable[ms % 10];
 2b4:	e300c958 	movw	ip, #2392	; 0x958
 2b8:	e340c000 	movt	ip, #0
 2bc:	e59c5000 	ldr	r5, [ip]
 2c0:	e3063667 	movw	r3, #26215	; 0x6667
 2c4:	e3463666 	movt	r3, #26214	; 0x6666
 2c8:	e0c64093 	smull	r4, r6, r3, r0
 2cc:	e1a04fc0 	asr	r4, r0, #31
 2d0:	e0644146 	rsb	r4, r4, r6, asr #2
 2d4:	e28d7010 	add	r7, sp, #16
 2d8:	e0876004 	add	r6, r7, r4
 2dc:	e556600c 	ldrb	r6, [r6, #-12]
 2e0:	e0844104 	add	r4, r4, r4, lsl #2
 2e4:	e0400084 	sub	r0, r0, r4, lsl #1
 2e8:	e0870000 	add	r0, r7, r0
 2ec:	e550000c 	ldrb	r0, [r0, #-12]
 2f0:	e1804406 	orr	r4, r0, r6, lsl #8
 2f4:	e0c60193 	smull	r0, r6, r3, r1
 2f8:	e1a00fc1 	asr	r0, r1, #31
 2fc:	e0600146 	rsb	r0, r0, r6, asr #2
 300:	e0876000 	add	r6, r7, r0
 304:	e556600c 	ldrb	r6, [r6, #-12]
 308:	e1844c06 	orr	r4, r4, r6, lsl #24
 30c:	e0800100 	add	r0, r0, r0, lsl #2
 310:	e0411080 	sub	r1, r1, r0, lsl #1
 314:	e0871001 	add	r1, r7, r1
 318:	e551100c 	ldrb	r1, [r1, #-12]
 31c:	e1841801 	orr	r1, r4, r1, lsl #16
 320:	e5851000 	str	r1, [r5]

    // Displaying minutes
    *minutes_display_ptr = lookUpTable[min / 10] << 8 | lookUpTable[min % 10];
 324:	e59c1004 	ldr	r1, [ip, #4]
 328:	e0c34293 	smull	r4, r3, r3, r2
 32c:	e1a00fc2 	asr	r0, r2, #31
 330:	e0603143 	rsb	r3, r0, r3, asr #2
 334:	e0870003 	add	r0, r7, r3
 338:	e550000c 	ldrb	r0, [r0, #-12]
 33c:	e0833103 	add	r3, r3, r3, lsl #2
 340:	e0422083 	sub	r2, r2, r3, lsl #1
 344:	e0872002 	add	r2, r7, r2
 348:	e552300c 	ldrb	r3, [r2, #-12]
 34c:	e1833400 	orr	r3, r3, r0, lsl #8
 350:	e5813000 	str	r3, [r1]
}
 354:	e28dd010 	add	sp, sp, #16
 358:	e8bd00f0 	pop	{r4, r5, r6, r7}
 35c:	e12fff1e 	bx	lr

00000360 <ReadSwitches>:

// Reads switches
int ReadSwitches(void)
{
    volatile int *SW_ptr = (int *)SW_BASE;
    return (*(SW_ptr));
 360:	e3a03000 	mov	r3, #0
 364:	e34f3f20 	movt	r3, #65312	; 0xff20
 368:	e5930040 	ldr	r0, [r3, #64]	; 0x40
}
 36c:	e12fff1e 	bx	lr

00000370 <ReadButton>:
// Reads buttons
int ReadButton(int btn)
{
    volatile int *BTN_ptr = (int *)KEY_BASE;
    // Returns 1 if the given button is pressed, 0 otherwise due to & operator
    return ((*BTN_ptr >> (btn)) & 1);
 370:	e3a03000 	mov	r3, #0
 374:	e34f3f20 	movt	r3, #65312	; 0xff20
 378:	e5933050 	ldr	r3, [r3, #80]	; 0x50
 37c:	e1a00053 	asr	r0, r3, r0
}
 380:	e2000001 	and	r0, r0, #1
 384:	e12fff1e 	bx	lr

00000388 <main>:

int main(void)
{
 388:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 38c:	e24dd00c 	sub	sp, sp, #12
    // Pointer to timer
    volatile a9_timer *const timer = (a9_timer *)MPCORE_PRIV_TIMER;
    int interval = 2000000; // Interval for counting 1/100th of a sec for 200MHz clock with no prescaler

    // Initialize timer for 1ms interval
    timer->load = interval;
 390:	e3083480 	movw	r3, #33920	; 0x8480
 394:	e340301e 	movt	r3, #30
 398:	e3e02a13 	mvn	r2, #77824	; 0x13000
 39c:	e50239ff 	str	r3, [r2, #-2559]	; 0xfffff601
    int lap_ms = 0;
    int lap_s = 0;
    int lap_min = 0;

    // Sets initial display to 00:00:00
    DisplayHex(ms, s, min);
 3a0:	e3a00000 	mov	r0, #0
 3a4:	e1a01000 	mov	r1, r0
 3a8:	e1a02000 	mov	r2, r0
 3ac:	ebffffaa 	bl	25c <DisplayHex>
    int min = 0;

    // Initial lap values
    int lap_ms = 0;
    int lap_s = 0;
    int lap_min = 0;
 3b0:	e3a09000 	mov	r9, #0
    int s = 0;
    int min = 0;

    // Initial lap values
    int lap_ms = 0;
    int lap_s = 0;
 3b4:	e1a0b009 	mov	fp, r9
    int ms = 0;
    int s = 0;
    int min = 0;

    // Initial lap values
    int lap_ms = 0;
 3b8:	e58d9000 	str	r9, [sp]
    int running = 0;

    // Initial timer values
    int ms = 0;
    int s = 0;
    int min = 0;
 3bc:	e1a08009 	mov	r8, r9
    // Is 1 if the timer is running, 0 if it is stopped
    int running = 0;

    // Initial timer values
    int ms = 0;
    int s = 0;
 3c0:	e1a07009 	mov	r7, r9

    // Is 1 if the timer is running, 0 if it is stopped
    int running = 0;

    // Initial timer values
    int ms = 0;
 3c4:	e1a05009 	mov	r5, r9

    // Initialize timer for 1ms interval
    timer->load = interval;

    // Is 1 if the timer is running, 0 if it is stopped
    int running = 0;
 3c8:	e58d9004 	str	r9, [sp, #4]
    DisplayHex(ms, s, min);

    // Main loop
    while (1)
    {
        if (ReadButton(0))
 3cc:	e1a06009 	mov	r6, r9
        {
            // Clear any prev timeout flag
            timer->status = 1;
 3d0:	e3e04a13 	mvn	r4, #77824	; 0x13000
 3d4:	e3a0a001 	mov	sl, #1
    DisplayHex(ms, s, min);

    // Main loop
    while (1)
    {
        if (ReadButton(0))
 3d8:	e1a00006 	mov	r0, r6
 3dc:	ebffffe3 	bl	370 <ReadButton>
 3e0:	e3500000 	cmp	r0, #0
        {
            // Clear any prev timeout flag
            timer->status = 1;
 3e4:	1504a9f3 	strne	sl, [r4, #-2547]	; 0xfffff60d
            // Start timer for continuous counting
            timer->control = 3;
 3e8:	13a03003 	movne	r3, #3
 3ec:	150439f7 	strne	r3, [r4, #-2551]	; 0xfffff609
            running = 1;
 3f0:	158da004 	strne	sl, [sp, #4]
        }
        if (ReadButton(1))
 3f4:	e1a0000a 	mov	r0, sl
 3f8:	ebffffdc 	bl	370 <ReadButton>
 3fc:	e3500000 	cmp	r0, #0
        {
            // Stop timer
            timer->control = 0;
 400:	150469f7 	strne	r6, [r4, #-2551]	; 0xfffff609
            running = 0;
 404:	158d6004 	strne	r6, [sp, #4]
        }
        if (ReadButton(2))
 408:	e3a00002 	mov	r0, #2
 40c:	ebffffd7 	bl	370 <ReadButton>
        {
            // Set lap time
            lap_ms = ms;
            lap_s = s;
            lap_min = min;
 410:	e3500000 	cmp	r0, #0
 414:	11a09008 	movne	r9, r8
 418:	e3500000 	cmp	r0, #0
 41c:	11a0b007 	movne	fp, r7
 420:	e59d3000 	ldr	r3, [sp]
 424:	e3500000 	cmp	r0, #0
 428:	11a03005 	movne	r3, r5
 42c:	e58d3000 	str	r3, [sp]
        }
        if (ReadButton(3))
 430:	e3a00003 	mov	r0, #3
 434:	ebffffcd 	bl	370 <ReadButton>
 438:	e3500000 	cmp	r0, #0
        {
            // Clear timer
            ms = 0;
            s = 0;
            min = 0;
 43c:	11a08006 	movne	r8, r6
 440:	11a07006 	movne	r7, r6
 444:	11a05006 	movne	r5, r6
        }

        if (running)
 448:	e59d3004 	ldr	r3, [sp, #4]
 44c:	e3530000 	cmp	r3, #0
 450:	0a00000f 	beq	494 <main+0x10c>
        {
            // Wait until timer counts down
            while (timer->status == 0)
 454:	e51439f3 	ldr	r3, [r4, #-2547]	; 0xfffff60d
 458:	e3530000 	cmp	r3, #0
 45c:	0afffffc 	beq	454 <main+0xcc>
                ;
            // Clear timeout flag
            timer->status = 1;
 460:	e504a9f3 	str	sl, [r4, #-2547]	; 0xfffff60d

            if (ms == 99)
 464:	e3550063 	cmp	r5, #99	; 0x63
                }
                else
                    s++;
            }
            else
                ms++;
 468:	12855001 	addne	r5, r5, #1
            while (timer->status == 0)
                ;
            // Clear timeout flag
            timer->status = 1;

            if (ms == 99)
 46c:	1a000008 	bne	494 <main+0x10c>
            {
                ms = 0;
                if (s == 59)
 470:	e357003b 	cmp	r7, #59	; 0x3b
                    }
                    else
                        min++;
                }
                else
                    s++;
 474:	12877001 	addne	r7, r7, #1
            // Clear timeout flag
            timer->status = 1;

            if (ms == 99)
            {
                ms = 0;
 478:	11a05006 	movne	r5, r6
                if (s == 59)
 47c:	1a000004 	bne	494 <main+0x10c>
                {
                    s = 0;
                    if (min == 59)
 480:	e358003b 	cmp	r8, #59	; 0x3b
                    {
                        min = 0;
                    }
                    else
                        min++;
 484:	12888001 	addne	r8, r8, #1
                if (s == 59)
                {
                    s = 0;
                    if (min == 59)
                    {
                        min = 0;
 488:	01a08006 	moveq	r8, r6
            if (ms == 99)
            {
                ms = 0;
                if (s == 59)
                {
                    s = 0;
 48c:	e1a07006 	mov	r7, r6
            // Clear timeout flag
            timer->status = 1;

            if (ms == 99)
            {
                ms = 0;
 490:	e1a05006 	mov	r5, r6
            else
                ms++;
        }

        // If first switch is on, display lap time
        if (ReadSwitches() == 1)
 494:	ebffffb1 	bl	360 <ReadSwitches>
 498:	e3500001 	cmp	r0, #1
        {
            DisplayHex(lap_ms, lap_s, lap_min);
 49c:	059d0000 	ldreq	r0, [sp]
 4a0:	01a0100b 	moveq	r1, fp
 4a4:	01a02009 	moveq	r2, r9
        }
        else // Otherwise, display current stopwatch time
        {
            DisplayHex(ms, s, min);
 4a8:	11a00005 	movne	r0, r5
 4ac:	11a01007 	movne	r1, r7
 4b0:	11a02008 	movne	r2, r8
 4b4:	ebffff68 	bl	25c <DisplayHex>
 4b8:	eaffffc6 	b	3d8 <main+0x50>

000004bc <atexit>:
 4bc:	e1a01000 	mov	r1, r0
 4c0:	e3a00000 	mov	r0, #0
 4c4:	e92d4008 	push	{r3, lr}
 4c8:	e1a02000 	mov	r2, r0
 4cc:	e1a03000 	mov	r3, r0
 4d0:	eb00000e 	bl	510 <__register_exitproc>
 4d4:	e8bd4008 	pop	{r3, lr}
 4d8:	e12fff1e 	bx	lr

000004dc <exit>:
 4dc:	e92d4008 	push	{r3, lr}
 4e0:	e3a01000 	mov	r1, #0
 4e4:	e1a04000 	mov	r4, r0
 4e8:	eb000045 	bl	604 <__call_exitprocs>
 4ec:	e59f3018 	ldr	r3, [pc, #24]	; 50c <exit+0x30>
 4f0:	e5930000 	ldr	r0, [r3]
 4f4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 4f8:	e3530000 	cmp	r3, #0
 4fc:	11a0e00f 	movne	lr, pc
 500:	112fff13 	bxne	r3
 504:	e1a00004 	mov	r0, r4
 508:	eb0000c9 	bl	834 <_exit>
 50c:	000008f4 	.word	0x000008f4

00000510 <__register_exitproc>:
 510:	e59fc0e4 	ldr	ip, [pc, #228]	; 5fc <__register_exitproc+0xec>
 514:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 518:	e59c4000 	ldr	r4, [ip]
 51c:	e594c148 	ldr	ip, [r4, #328]	; 0x148
 520:	e35c0000 	cmp	ip, #0
 524:	0284cf53 	addeq	ip, r4, #332	; 0x14c
 528:	e59c5004 	ldr	r5, [ip, #4]
 52c:	0584c148 	streq	ip, [r4, #328]	; 0x148
 530:	e355001f 	cmp	r5, #31
 534:	e24dd010 	sub	sp, sp, #16
 538:	e1a06000 	mov	r6, r0
 53c:	da000015 	ble	598 <__register_exitproc+0x88>
 540:	e59f00b8 	ldr	r0, [pc, #184]	; 600 <__register_exitproc+0xf0>
 544:	e3500000 	cmp	r0, #0
 548:	1a000001 	bne	554 <__register_exitproc+0x44>
 54c:	e3e00000 	mvn	r0, #0
 550:	ea000018 	b	5b8 <__register_exitproc+0xa8>
 554:	e3a00e19 	mov	r0, #400	; 0x190
 558:	e58d100c 	str	r1, [sp, #12]
 55c:	e58d2008 	str	r2, [sp, #8]
 560:	e58d3004 	str	r3, [sp, #4]
 564:	e320f000 	nop	{0}
 568:	e250c000 	subs	ip, r0, #0
 56c:	e59d100c 	ldr	r1, [sp, #12]
 570:	e59d2008 	ldr	r2, [sp, #8]
 574:	e59d3004 	ldr	r3, [sp, #4]
 578:	0afffff3 	beq	54c <__register_exitproc+0x3c>
 57c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 580:	e3a00000 	mov	r0, #0
 584:	e58c0004 	str	r0, [ip, #4]
 588:	e58c5000 	str	r5, [ip]
 58c:	e584c148 	str	ip, [r4, #328]	; 0x148
 590:	e58c0188 	str	r0, [ip, #392]	; 0x188
 594:	e58c018c 	str	r0, [ip, #396]	; 0x18c
 598:	e3560000 	cmp	r6, #0
 59c:	e59c4004 	ldr	r4, [ip, #4]
 5a0:	1a000007 	bne	5c4 <__register_exitproc+0xb4>
 5a4:	e2843002 	add	r3, r4, #2
 5a8:	e2844001 	add	r4, r4, #1
 5ac:	e78c1103 	str	r1, [ip, r3, lsl #2]
 5b0:	e58c4004 	str	r4, [ip, #4]
 5b4:	e3a00000 	mov	r0, #0
 5b8:	e28dd010 	add	sp, sp, #16
 5bc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 5c0:	e12fff1e 	bx	lr
 5c4:	e3a00001 	mov	r0, #1
 5c8:	e1a00410 	lsl	r0, r0, r4
 5cc:	e08c8104 	add	r8, ip, r4, lsl #2
 5d0:	e3560002 	cmp	r6, #2
 5d4:	e59c7188 	ldr	r7, [ip, #392]	; 0x188
 5d8:	e5883108 	str	r3, [r8, #264]	; 0x108
 5dc:	059c318c 	ldreq	r3, [ip, #396]	; 0x18c
 5e0:	e1877000 	orr	r7, r7, r0
 5e4:	01830000 	orreq	r0, r3, r0
 5e8:	e1a05008 	mov	r5, r8
 5ec:	e5882088 	str	r2, [r8, #136]	; 0x88
 5f0:	e58c7188 	str	r7, [ip, #392]	; 0x188
 5f4:	058c018c 	streq	r0, [ip, #396]	; 0x18c
 5f8:	eaffffe9 	b	5a4 <__register_exitproc+0x94>
 5fc:	000008f4 	.word	0x000008f4
 600:	00000000 	.word	0x00000000

00000604 <__call_exitprocs>:
 604:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 608:	e59f3168 	ldr	r3, [pc, #360]	; 778 <__call_exitprocs+0x174>
 60c:	e5933000 	ldr	r3, [r3]
 610:	e24dd014 	sub	sp, sp, #20
 614:	e58d3004 	str	r3, [sp, #4]
 618:	e2833f52 	add	r3, r3, #328	; 0x148
 61c:	e58d0008 	str	r0, [sp, #8]
 620:	e58d300c 	str	r3, [sp, #12]
 624:	e1a07001 	mov	r7, r1
 628:	e3a08001 	mov	r8, #1
 62c:	e59d3004 	ldr	r3, [sp, #4]
 630:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 634:	e3560000 	cmp	r6, #0
 638:	e59db00c 	ldr	fp, [sp, #12]
 63c:	0a000033 	beq	710 <__call_exitprocs+0x10c>
 640:	e5965004 	ldr	r5, [r6, #4]
 644:	e2554001 	subs	r4, r5, #1
 648:	5286a088 	addpl	sl, r6, #136	; 0x88
 64c:	5285501f 	addpl	r5, r5, #31
 650:	508a5105 	addpl	r5, sl, r5, lsl #2
 654:	5a000007 	bpl	678 <__call_exitprocs+0x74>
 658:	ea000029 	b	704 <__call_exitprocs+0x100>
 65c:	e5953000 	ldr	r3, [r5]
 660:	e1530007 	cmp	r3, r7
 664:	0a000005 	beq	680 <__call_exitprocs+0x7c>
 668:	e2444001 	sub	r4, r4, #1
 66c:	e3740001 	cmn	r4, #1
 670:	e2455004 	sub	r5, r5, #4
 674:	0a000022 	beq	704 <__call_exitprocs+0x100>
 678:	e3570000 	cmp	r7, #0
 67c:	1afffff6 	bne	65c <__call_exitprocs+0x58>
 680:	e5963004 	ldr	r3, [r6, #4]
 684:	e06a2005 	rsb	r2, sl, r5
 688:	e2433001 	sub	r3, r3, #1
 68c:	e0862002 	add	r2, r6, r2
 690:	e1530004 	cmp	r3, r4
 694:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 698:	13a01000 	movne	r1, #0
 69c:	05864004 	streq	r4, [r6, #4]
 6a0:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 6a4:	e3530000 	cmp	r3, #0
 6a8:	0affffee 	beq	668 <__call_exitprocs+0x64>
 6ac:	e1a02418 	lsl	r2, r8, r4
 6b0:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 6b4:	e1120001 	tst	r2, r1
 6b8:	e5969004 	ldr	r9, [r6, #4]
 6bc:	0a000016 	beq	71c <__call_exitprocs+0x118>
 6c0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 6c4:	e1120001 	tst	r2, r1
 6c8:	1a000016 	bne	728 <__call_exitprocs+0x124>
 6cc:	e59d0008 	ldr	r0, [sp, #8]
 6d0:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 6d4:	e1a0e00f 	mov	lr, pc
 6d8:	e12fff13 	bx	r3
 6dc:	e5963004 	ldr	r3, [r6, #4]
 6e0:	e1530009 	cmp	r3, r9
 6e4:	1affffd0 	bne	62c <__call_exitprocs+0x28>
 6e8:	e59b3000 	ldr	r3, [fp]
 6ec:	e1530006 	cmp	r3, r6
 6f0:	1affffcd 	bne	62c <__call_exitprocs+0x28>
 6f4:	e2444001 	sub	r4, r4, #1
 6f8:	e3740001 	cmn	r4, #1
 6fc:	e2455004 	sub	r5, r5, #4
 700:	1affffdc 	bne	678 <__call_exitprocs+0x74>
 704:	e59f1070 	ldr	r1, [pc, #112]	; 77c <__call_exitprocs+0x178>
 708:	e3510000 	cmp	r1, #0
 70c:	1a000009 	bne	738 <__call_exitprocs+0x134>
 710:	e28dd014 	add	sp, sp, #20
 714:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 718:	e12fff1e 	bx	lr
 71c:	e1a0e00f 	mov	lr, pc
 720:	e12fff13 	bx	r3
 724:	eaffffec 	b	6dc <__call_exitprocs+0xd8>
 728:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 72c:	e1a0e00f 	mov	lr, pc
 730:	e12fff13 	bx	r3
 734:	eaffffe8 	b	6dc <__call_exitprocs+0xd8>
 738:	e5963004 	ldr	r3, [r6, #4]
 73c:	e3530000 	cmp	r3, #0
 740:	e5963000 	ldr	r3, [r6]
 744:	1a000008 	bne	76c <__call_exitprocs+0x168>
 748:	e3530000 	cmp	r3, #0
 74c:	0a000006 	beq	76c <__call_exitprocs+0x168>
 750:	e1a00006 	mov	r0, r6
 754:	e58b3000 	str	r3, [fp]
 758:	e320f000 	nop	{0}
 75c:	e59b6000 	ldr	r6, [fp]
 760:	e3560000 	cmp	r6, #0
 764:	1affffb5 	bne	640 <__call_exitprocs+0x3c>
 768:	eaffffe8 	b	710 <__call_exitprocs+0x10c>
 76c:	e1a0b006 	mov	fp, r6
 770:	e1a06003 	mov	r6, r3
 774:	eafffff9 	b	760 <__call_exitprocs+0x15c>
 778:	000008f4 	.word	0x000008f4
 77c:	00000000 	.word	0x00000000

00000780 <register_fini>:
 780:	e92d4008 	push	{r3, lr}
 784:	e59f3010 	ldr	r3, [pc, #16]	; 79c <register_fini+0x1c>
 788:	e3530000 	cmp	r3, #0
 78c:	159f000c 	ldrne	r0, [pc, #12]	; 7a0 <register_fini+0x20>
 790:	1bffff49 	blne	4bc <atexit>
 794:	e8bd4008 	pop	{r3, lr}
 798:	e12fff1e 	bx	lr
 79c:	0000091c 	.word	0x0000091c
 7a0:	000007a4 	.word	0x000007a4

000007a4 <__libc_fini_array>:
 7a4:	e92d4038 	push	{r3, r4, r5, lr}
 7a8:	e59f5030 	ldr	r5, [pc, #48]	; 7e0 <__libc_fini_array+0x3c>
 7ac:	e59f4030 	ldr	r4, [pc, #48]	; 7e4 <__libc_fini_array+0x40>
 7b0:	e0654004 	rsb	r4, r5, r4
 7b4:	e1b04144 	asrs	r4, r4, #2
 7b8:	10855104 	addne	r5, r5, r4, lsl #2
 7bc:	0a000004 	beq	7d4 <__libc_fini_array+0x30>
 7c0:	e5353004 	ldr	r3, [r5, #-4]!
 7c4:	e1a0e00f 	mov	lr, pc
 7c8:	e12fff13 	bx	r3
 7cc:	e2544001 	subs	r4, r4, #1
 7d0:	1afffffa 	bne	7c0 <__libc_fini_array+0x1c>
 7d4:	eb000050 	bl	91c <__libc_fini>
 7d8:	e8bd4038 	pop	{r3, r4, r5, lr}
 7dc:	e12fff1e 	bx	lr
 7e0:	00000934 	.word	0x00000934
 7e4:	00000938 	.word	0x00000938

000007e8 <__cs3_premain>:
 7e8:	e92d4008 	push	{r3, lr}
 7ec:	eb00001d 	bl	868 <__libc_init_array>
 7f0:	e59f3030 	ldr	r3, [pc, #48]	; 828 <__cs3_premain+0x40>
 7f4:	e3530000 	cmp	r3, #0
 7f8:	15930000 	ldrne	r0, [r3]
 7fc:	01a00003 	moveq	r0, r3
 800:	e59f3024 	ldr	r3, [pc, #36]	; 82c <__cs3_premain+0x44>
 804:	e3530000 	cmp	r3, #0
 808:	15931000 	ldrne	r1, [r3]
 80c:	01a01003 	moveq	r1, r3
 810:	e3a02000 	mov	r2, #0
 814:	ebfffedb 	bl	388 <main>
 818:	e59f3010 	ldr	r3, [pc, #16]	; 830 <__cs3_premain+0x48>
 81c:	e3530000 	cmp	r3, #0
 820:	1bffff2d 	blne	4dc <exit>
 824:	eafffffe 	b	824 <__cs3_premain+0x3c>
	...
 830:	000004dc 	.word	0x000004dc

00000834 <_exit>:
 834:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 838:	e3a00018 	mov	r0, #24
 83c:	e59f1004 	ldr	r1, [pc, #4]	; 848 <_exit+0x14>
 840:	ef123456 	svc	0x00123456
 844:	eafffffe 	b	844 <_exit+0x10>
 848:	00020026 	.word	0x00020026

0000084c <__cs3_isr_interrupt>:
 84c:	eafffffe 	b	84c <__cs3_isr_interrupt>

00000850 <__cs3_isr_undef>:
 850:	eafffffe 	b	850 <__cs3_isr_undef>

00000854 <__cs3_isr_swi>:
 854:	eafffffe 	b	854 <__cs3_isr_swi>

00000858 <__cs3_isr_pabort>:
 858:	eafffffe 	b	858 <__cs3_isr_pabort>

0000085c <__cs3_isr_dabort>:
 85c:	eafffffe 	b	85c <__cs3_isr_dabort>

00000860 <__cs3_isr_irq>:
 860:	eafffffe 	b	860 <__cs3_isr_irq>

00000864 <__cs3_isr_fiq>:
 864:	eafffffe 	b	864 <__cs3_isr_fiq>

00000868 <__libc_init_array>:
 868:	e92d4070 	push	{r4, r5, r6, lr}
 86c:	e59f506c 	ldr	r5, [pc, #108]	; 8e0 <__libc_init_array+0x78>
 870:	e59f606c 	ldr	r6, [pc, #108]	; 8e4 <__libc_init_array+0x7c>
 874:	e0656006 	rsb	r6, r5, r6
 878:	e1b06146 	asrs	r6, r6, #2
 87c:	12455004 	subne	r5, r5, #4
 880:	13a04000 	movne	r4, #0
 884:	0a000005 	beq	8a0 <__libc_init_array+0x38>
 888:	e5b53004 	ldr	r3, [r5, #4]!
 88c:	e2844001 	add	r4, r4, #1
 890:	e1a0e00f 	mov	lr, pc
 894:	e12fff13 	bx	r3
 898:	e1560004 	cmp	r6, r4
 89c:	1afffff9 	bne	888 <__libc_init_array+0x20>
 8a0:	e59f5040 	ldr	r5, [pc, #64]	; 8e8 <__libc_init_array+0x80>
 8a4:	e59f6040 	ldr	r6, [pc, #64]	; 8ec <__libc_init_array+0x84>
 8a8:	e0656006 	rsb	r6, r5, r6
 8ac:	eb000012 	bl	8fc <_init>
 8b0:	e1b06146 	asrs	r6, r6, #2
 8b4:	12455004 	subne	r5, r5, #4
 8b8:	13a04000 	movne	r4, #0
 8bc:	0a000005 	beq	8d8 <__libc_init_array+0x70>
 8c0:	e5b53004 	ldr	r3, [r5, #4]!
 8c4:	e2844001 	add	r4, r4, #1
 8c8:	e1a0e00f 	mov	lr, pc
 8cc:	e12fff13 	bx	r3
 8d0:	e1560004 	cmp	r6, r4
 8d4:	1afffff9 	bne	8c0 <__libc_init_array+0x58>
 8d8:	e8bd4070 	pop	{r4, r5, r6, lr}
 8dc:	e12fff1e 	bx	lr
 8e0:	00000914 	.word	0x00000914
 8e4:	00000914 	.word	0x00000914
 8e8:	00000914 	.word	0x00000914
 8ec:	0000091c 	.word	0x0000091c

Disassembly of section .rodata:

000008f4 <_global_impure_ptr>:
 8f4:	00000968 00000043                       h...C...

000008fc <_init>:
 8fc:	e1a0c00d 	mov	ip, sp
 900:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 904:	e24cb004 	sub	fp, ip, #4
 908:	e24bd028 	sub	sp, fp, #40	; 0x28
 90c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 910:	e12fff1e 	bx	lr

00000914 <__init_array_start>:
 914:	00000780 	.word	0x00000780

00000918 <__frame_dummy_init_array_entry>:
 918:	00000208                                ....

0000091c <__libc_fini>:
 91c:	e1a0c00d 	mov	ip, sp
 920:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 924:	e24cb004 	sub	fp, ip, #4
 928:	e24bd028 	sub	sp, fp, #40	; 0x28
 92c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 930:	e12fff1e 	bx	lr

00000934 <__fini_array_start>:
 934:	000001c4 	.word	0x000001c4

00000938 <__cs3_regions>:
	...
 944:	00000d98 	.word	0x00000d98
 948:	00000020 	.word	0x00000020

0000094c <__cs3_regions_end>:
 94c:	00000000 	.word	0x00000000
