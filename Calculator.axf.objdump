
Calculator.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 28 07 00 00 2c 07 00 00 30 07 00 00     @...(...,...0...
  30:	34 07 00 00 24 07 00 00 38 07 00 00 3c 07 00 00     4...$...8...<...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	ip, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	ip!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, ip
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, ip
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	ip, r2, r3
  bc:	e15e000c 	cmp	lr, ip
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000179 	bl	6c0 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000824 	.word	0x00000824

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000c68 	.word	0x00000c68

00000124 <__cs3_heap_start_ptr>:
 124:	00000c90 	.word	0x00000c90

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000c70 	.word	0x00000c70
 170:	00000c73 	.word	0x00000c73
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000c70 	.word	0x00000c70
 1bc:	00000c70 	.word	0x00000c70
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000c70 	.word	0x00000c70
 200:	00000000 	.word	0x00000000
 204:	000007c8 	.word	0x000007c8

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	000007c8 	.word	0x000007c8
 250:	00000c74 	.word	0x00000c74
 254:	00000828 	.word	0x00000828
 258:	00000000 	.word	0x00000000

0000025c <countDigit>:
}

//* utilty functions*//
int countDigit (int val) {
    int count = 0;
    while (val!= 0) {
 25c:	e2503000 	subs	r3, r0, #0
 260:	0a000008 	beq	288 <countDigit+0x2c>
                    bit5 << (0 * BYTE);
}

//* utilty functions*//
int countDigit (int val) {
    int count = 0;
 264:	e3a00000 	mov	r0, #0
    while (val!= 0) {
        val = val/10;
 268:	e3061667 	movw	r1, #26215	; 0x6667
 26c:	e3461666 	movt	r1, #26214	; 0x6666
 270:	e0c2c391 	smull	ip, r2, r1, r3
 274:	e1a03fc3 	asr	r3, r3, #31
        count++;
 278:	e2800001 	add	r0, r0, #1
}

//* utilty functions*//
int countDigit (int val) {
    int count = 0;
    while (val!= 0) {
 27c:	e0733142 	rsbs	r3, r3, r2, asr #2
 280:	1afffffa 	bne	270 <countDigit+0x14>
 284:	e12fff1e 	bx	lr
                    bit5 << (0 * BYTE);
}

//* utilty functions*//
int countDigit (int val) {
    int count = 0;
 288:	e3a00000 	mov	r0, #0
    while (val!= 0) {
        val = val/10;
        count++;
    }
    return count;
}
 28c:	e12fff1e 	bx	lr

00000290 <DisplayValue>:
volatile int *Display1_ptr = (int *)HEX3_HEX0_BASE;
volatile int *Display2_ptr = (int *)HEX5_HEX4_BASE;

// Displays number on 7 seg display
void DisplayValue(int value)
{   // max = 10, displays number from 0 - 9
 290:	e92d4008 	push	{r3, lr}
    int bit4 = lookUpTable[1]; 
    int bit5 = lookUpTable[1];
    int bit6 = lookUpTable[1];

    // if value can be represented by 6 digits
    if (countDigit(value) <= 6)
 294:	ebfffff0 	bl	25c <countDigit>
 298:	e3500006 	cmp	r0, #6
 29c:	ca000005 	bgt	2b8 <DisplayValue+0x28>

    // Displaying bit 1 - 4 of value 
    *Display1_ptr = bit4 << (3 * BYTE) |
 2a0:	e3003830 	movw	r3, #2096	; 0x830
 2a4:	e3403000 	movt	r3, #0
 2a8:	e5932000 	ldr	r2, [r3]
 2ac:	e3003606 	movw	r3, #1542	; 0x606
 2b0:	e7df3813 	bfi	r3, r3, #16, #16
 2b4:	e5823000 	str	r3, [r2]
                    bit2 << (1 * BYTE) |
                    bit1 << (0 * BYTE);


     // Displaying bit 5 - 6 of value 
    *Display2_ptr = bit6 << (1 * BYTE) |
 2b8:	e3003830 	movw	r3, #2096	; 0x830
 2bc:	e3403000 	movt	r3, #0
 2c0:	e5933004 	ldr	r3, [r3, #4]
 2c4:	e3002606 	movw	r2, #1542	; 0x606
 2c8:	e5832000 	str	r2, [r3]
 2cc:	e8bd8008 	pop	{r3, pc}

000002d0 <DisplayError>:
    int BYTE = 8;
    int Letter_E = 0x79;
    int letter_r = 0x50;
    int letter_o = 0x5C;
    // Displaying r + o
    *Display1_ptr = letter_r << (3 * BYTE) |
 2d0:	e3003830 	movw	r3, #2096	; 0x830
 2d4:	e3403000 	movt	r3, #0
 2d8:	e5931000 	ldr	r1, [r3]
 2dc:	e3052c50 	movw	r2, #23632	; 0x5c50
 2e0:	e3452050 	movt	r2, #20560	; 0x5050
 2e4:	e5812000 	str	r2, [r1]
                    letter_r << (2 * BYTE) |
                    letter_o << (1 * BYTE) |
                    letter_r << (0 * BYTE);
     // Displaying E
    *Display2_ptr = Letter_E;
 2e8:	e5933004 	ldr	r3, [r3, #4]
 2ec:	e3a02079 	mov	r2, #121	; 0x79
 2f0:	e5832000 	str	r2, [r3]
 2f4:	e12fff1e 	bx	lr

000002f8 <ReadSwitches>:

// Reads switches
int ReadSwitches(void)
{
    volatile int *SW_ptr = (int *)SW_BASE;
    return (*(SW_ptr));
 2f8:	e3a03000 	mov	r3, #0
 2fc:	e34f3f20 	movt	r3, #65312	; 0xff20
 300:	e5930040 	ldr	r0, [r3, #64]	; 0x40
}
 304:	e12fff1e 	bx	lr

00000308 <ReadButton>:
// Reads buttons
int ReadButton(int btn)
{
    volatile int *BTN_ptr = (int *)KEY_BASE;
    // Returns 1 if the given button is pressed, 0 otherwise due to & operator
    return ((*BTN_ptr >> (btn)) & 1);
 308:	e3a03000 	mov	r3, #0
 30c:	e34f3f20 	movt	r3, #65312	; 0xff20
 310:	e5933050 	ldr	r3, [r3, #80]	; 0x50
 314:	e1a00053 	asr	r0, r3, r0
}
 318:	e2000001 	and	r0, r0, #1
 31c:	e12fff1e 	bx	lr

00000320 <main>:

int main(void)
{
 320:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    // Sets initial display to 0
    DisplayValue(0);
 324:	e3a00000 	mov	r0, #0
 328:	ebffffd8 	bl	290 <DisplayValue>

    // Main loop
    while (1)
    {   
        // plus
        if (ReadButton(0))
 32c:	e3a07000 	mov	r7, #0
        {
            DisplayError();
        }
        // minus
        if (ReadButton(1))
 330:	e3a06001 	mov	r6, #1
        {

        }
        // multiply
        if (ReadButton(2))
 334:	e3a05002 	mov	r5, #2
        {

        }
        //divide
        if (ReadButton(3))
 338:	e3a04003 	mov	r4, #3

    // Main loop
    while (1)
    {   
        // plus
        if (ReadButton(0))
 33c:	e1a00007 	mov	r0, r7
 340:	ebfffff0 	bl	308 <ReadButton>
 344:	e3500000 	cmp	r0, #0
 348:	0a000000 	beq	350 <main+0x30>
        {
            DisplayError();
 34c:	ebffffdf 	bl	2d0 <DisplayError>
        }
        // minus
        if (ReadButton(1))
 350:	e1a00006 	mov	r0, r6
 354:	ebffffeb 	bl	308 <ReadButton>
        {

        }
        // multiply
        if (ReadButton(2))
 358:	e1a00005 	mov	r0, r5
 35c:	ebffffe9 	bl	308 <ReadButton>
        {

        }
        //divide
        if (ReadButton(3))
 360:	e1a00004 	mov	r0, r4
 364:	ebffffe7 	bl	308 <ReadButton>

        }


        // on / off 
        if (ReadSwitches() == 10)
 368:	ebffffe2 	bl	2f8 <ReadSwitches>
 36c:	e350000a 	cmp	r0, #10
 370:	0afffff1 	beq	33c <main+0x1c>
        {
            
        }

        // clear
        else if (ReadSwitches() == 9){
 374:	ebffffdf 	bl	2f8 <ReadSwitches>
 378:	e3500009 	cmp	r0, #9
 37c:	0affffee 	beq	33c <main+0x1c>
            
        }

        // show answer
        else if (ReadSwitches() == 8){
 380:	ebffffdc 	bl	2f8 <ReadSwitches>
 384:	e3500008 	cmp	r0, #8
 388:	0affffeb 	beq	33c <main+0x1c>
            
        }

        // switch mode
        else if (ReadSwitches() == 7){
 38c:	ebffffd9 	bl	2f8 <ReadSwitches>
 390:	eaffffe9 	b	33c <main+0x1c>

00000394 <atexit>:
 394:	e1a01000 	mov	r1, r0
 398:	e3a00000 	mov	r0, #0
 39c:	e92d4008 	push	{r3, lr}
 3a0:	e1a02000 	mov	r2, r0
 3a4:	e1a03000 	mov	r3, r0
 3a8:	eb00000e 	bl	3e8 <__register_exitproc>
 3ac:	e8bd4008 	pop	{r3, lr}
 3b0:	e12fff1e 	bx	lr

000003b4 <exit>:
 3b4:	e92d4008 	push	{r3, lr}
 3b8:	e3a01000 	mov	r1, #0
 3bc:	e1a04000 	mov	r4, r0
 3c0:	eb000045 	bl	4dc <__call_exitprocs>
 3c4:	e59f3018 	ldr	r3, [pc, #24]	; 3e4 <exit+0x30>
 3c8:	e5930000 	ldr	r0, [r3]
 3cc:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 3d0:	e3530000 	cmp	r3, #0
 3d4:	11a0e00f 	movne	lr, pc
 3d8:	112fff13 	bxne	r3
 3dc:	e1a00004 	mov	r0, r4
 3e0:	eb0000c9 	bl	70c <_exit>
 3e4:	000007cc 	.word	0x000007cc

000003e8 <__register_exitproc>:
 3e8:	e59fc0e4 	ldr	ip, [pc, #228]	; 4d4 <__register_exitproc+0xec>
 3ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 3f0:	e59c4000 	ldr	r4, [ip]
 3f4:	e594c148 	ldr	ip, [r4, #328]	; 0x148
 3f8:	e35c0000 	cmp	ip, #0
 3fc:	0284cf53 	addeq	ip, r4, #332	; 0x14c
 400:	e59c5004 	ldr	r5, [ip, #4]
 404:	0584c148 	streq	ip, [r4, #328]	; 0x148
 408:	e355001f 	cmp	r5, #31
 40c:	e24dd010 	sub	sp, sp, #16
 410:	e1a06000 	mov	r6, r0
 414:	da000015 	ble	470 <__register_exitproc+0x88>
 418:	e59f00b8 	ldr	r0, [pc, #184]	; 4d8 <__register_exitproc+0xf0>
 41c:	e3500000 	cmp	r0, #0
 420:	1a000001 	bne	42c <__register_exitproc+0x44>
 424:	e3e00000 	mvn	r0, #0
 428:	ea000018 	b	490 <__register_exitproc+0xa8>
 42c:	e3a00e19 	mov	r0, #400	; 0x190
 430:	e58d100c 	str	r1, [sp, #12]
 434:	e58d2008 	str	r2, [sp, #8]
 438:	e58d3004 	str	r3, [sp, #4]
 43c:	e320f000 	nop	{0}
 440:	e250c000 	subs	ip, r0, #0
 444:	e59d100c 	ldr	r1, [sp, #12]
 448:	e59d2008 	ldr	r2, [sp, #8]
 44c:	e59d3004 	ldr	r3, [sp, #4]
 450:	0afffff3 	beq	424 <__register_exitproc+0x3c>
 454:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 458:	e3a00000 	mov	r0, #0
 45c:	e58c0004 	str	r0, [ip, #4]
 460:	e58c5000 	str	r5, [ip]
 464:	e584c148 	str	ip, [r4, #328]	; 0x148
 468:	e58c0188 	str	r0, [ip, #392]	; 0x188
 46c:	e58c018c 	str	r0, [ip, #396]	; 0x18c
 470:	e3560000 	cmp	r6, #0
 474:	e59c4004 	ldr	r4, [ip, #4]
 478:	1a000007 	bne	49c <__register_exitproc+0xb4>
 47c:	e2843002 	add	r3, r4, #2
 480:	e2844001 	add	r4, r4, #1
 484:	e78c1103 	str	r1, [ip, r3, lsl #2]
 488:	e58c4004 	str	r4, [ip, #4]
 48c:	e3a00000 	mov	r0, #0
 490:	e28dd010 	add	sp, sp, #16
 494:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 498:	e12fff1e 	bx	lr
 49c:	e3a00001 	mov	r0, #1
 4a0:	e1a00410 	lsl	r0, r0, r4
 4a4:	e08c8104 	add	r8, ip, r4, lsl #2
 4a8:	e3560002 	cmp	r6, #2
 4ac:	e59c7188 	ldr	r7, [ip, #392]	; 0x188
 4b0:	e5883108 	str	r3, [r8, #264]	; 0x108
 4b4:	059c318c 	ldreq	r3, [ip, #396]	; 0x18c
 4b8:	e1877000 	orr	r7, r7, r0
 4bc:	01830000 	orreq	r0, r3, r0
 4c0:	e1a05008 	mov	r5, r8
 4c4:	e5882088 	str	r2, [r8, #136]	; 0x88
 4c8:	e58c7188 	str	r7, [ip, #392]	; 0x188
 4cc:	058c018c 	streq	r0, [ip, #396]	; 0x18c
 4d0:	eaffffe9 	b	47c <__register_exitproc+0x94>
 4d4:	000007cc 	.word	0x000007cc
 4d8:	00000000 	.word	0x00000000

000004dc <__call_exitprocs>:
 4dc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 4e0:	e59f3168 	ldr	r3, [pc, #360]	; 650 <__call_exitprocs+0x174>
 4e4:	e5933000 	ldr	r3, [r3]
 4e8:	e24dd014 	sub	sp, sp, #20
 4ec:	e58d3004 	str	r3, [sp, #4]
 4f0:	e2833f52 	add	r3, r3, #328	; 0x148
 4f4:	e58d0008 	str	r0, [sp, #8]
 4f8:	e58d300c 	str	r3, [sp, #12]
 4fc:	e1a07001 	mov	r7, r1
 500:	e3a08001 	mov	r8, #1
 504:	e59d3004 	ldr	r3, [sp, #4]
 508:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 50c:	e3560000 	cmp	r6, #0
 510:	e59db00c 	ldr	fp, [sp, #12]
 514:	0a000033 	beq	5e8 <__call_exitprocs+0x10c>
 518:	e5965004 	ldr	r5, [r6, #4]
 51c:	e2554001 	subs	r4, r5, #1
 520:	5286a088 	addpl	sl, r6, #136	; 0x88
 524:	5285501f 	addpl	r5, r5, #31
 528:	508a5105 	addpl	r5, sl, r5, lsl #2
 52c:	5a000007 	bpl	550 <__call_exitprocs+0x74>
 530:	ea000029 	b	5dc <__call_exitprocs+0x100>
 534:	e5953000 	ldr	r3, [r5]
 538:	e1530007 	cmp	r3, r7
 53c:	0a000005 	beq	558 <__call_exitprocs+0x7c>
 540:	e2444001 	sub	r4, r4, #1
 544:	e3740001 	cmn	r4, #1
 548:	e2455004 	sub	r5, r5, #4
 54c:	0a000022 	beq	5dc <__call_exitprocs+0x100>
 550:	e3570000 	cmp	r7, #0
 554:	1afffff6 	bne	534 <__call_exitprocs+0x58>
 558:	e5963004 	ldr	r3, [r6, #4]
 55c:	e06a2005 	rsb	r2, sl, r5
 560:	e2433001 	sub	r3, r3, #1
 564:	e0862002 	add	r2, r6, r2
 568:	e1530004 	cmp	r3, r4
 56c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 570:	13a01000 	movne	r1, #0
 574:	05864004 	streq	r4, [r6, #4]
 578:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 57c:	e3530000 	cmp	r3, #0
 580:	0affffee 	beq	540 <__call_exitprocs+0x64>
 584:	e1a02418 	lsl	r2, r8, r4
 588:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 58c:	e1120001 	tst	r2, r1
 590:	e5969004 	ldr	r9, [r6, #4]
 594:	0a000016 	beq	5f4 <__call_exitprocs+0x118>
 598:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 59c:	e1120001 	tst	r2, r1
 5a0:	1a000016 	bne	600 <__call_exitprocs+0x124>
 5a4:	e59d0008 	ldr	r0, [sp, #8]
 5a8:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 5ac:	e1a0e00f 	mov	lr, pc
 5b0:	e12fff13 	bx	r3
 5b4:	e5963004 	ldr	r3, [r6, #4]
 5b8:	e1530009 	cmp	r3, r9
 5bc:	1affffd0 	bne	504 <__call_exitprocs+0x28>
 5c0:	e59b3000 	ldr	r3, [fp]
 5c4:	e1530006 	cmp	r3, r6
 5c8:	1affffcd 	bne	504 <__call_exitprocs+0x28>
 5cc:	e2444001 	sub	r4, r4, #1
 5d0:	e3740001 	cmn	r4, #1
 5d4:	e2455004 	sub	r5, r5, #4
 5d8:	1affffdc 	bne	550 <__call_exitprocs+0x74>
 5dc:	e59f1070 	ldr	r1, [pc, #112]	; 654 <__call_exitprocs+0x178>
 5e0:	e3510000 	cmp	r1, #0
 5e4:	1a000009 	bne	610 <__call_exitprocs+0x134>
 5e8:	e28dd014 	add	sp, sp, #20
 5ec:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 5f0:	e12fff1e 	bx	lr
 5f4:	e1a0e00f 	mov	lr, pc
 5f8:	e12fff13 	bx	r3
 5fc:	eaffffec 	b	5b4 <__call_exitprocs+0xd8>
 600:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 604:	e1a0e00f 	mov	lr, pc
 608:	e12fff13 	bx	r3
 60c:	eaffffe8 	b	5b4 <__call_exitprocs+0xd8>
 610:	e5963004 	ldr	r3, [r6, #4]
 614:	e3530000 	cmp	r3, #0
 618:	e5963000 	ldr	r3, [r6]
 61c:	1a000008 	bne	644 <__call_exitprocs+0x168>
 620:	e3530000 	cmp	r3, #0
 624:	0a000006 	beq	644 <__call_exitprocs+0x168>
 628:	e1a00006 	mov	r0, r6
 62c:	e58b3000 	str	r3, [fp]
 630:	e320f000 	nop	{0}
 634:	e59b6000 	ldr	r6, [fp]
 638:	e3560000 	cmp	r6, #0
 63c:	1affffb5 	bne	518 <__call_exitprocs+0x3c>
 640:	eaffffe8 	b	5e8 <__call_exitprocs+0x10c>
 644:	e1a0b006 	mov	fp, r6
 648:	e1a06003 	mov	r6, r3
 64c:	eafffff9 	b	638 <__call_exitprocs+0x15c>
 650:	000007cc 	.word	0x000007cc
 654:	00000000 	.word	0x00000000

00000658 <register_fini>:
 658:	e92d4008 	push	{r3, lr}
 65c:	e59f3010 	ldr	r3, [pc, #16]	; 674 <register_fini+0x1c>
 660:	e3530000 	cmp	r3, #0
 664:	159f000c 	ldrne	r0, [pc, #12]	; 678 <register_fini+0x20>
 668:	1bffff49 	blne	394 <atexit>
 66c:	e8bd4008 	pop	{r3, lr}
 670:	e12fff1e 	bx	lr
 674:	000007f4 	.word	0x000007f4
 678:	0000067c 	.word	0x0000067c

0000067c <__libc_fini_array>:
 67c:	e92d4038 	push	{r3, r4, r5, lr}
 680:	e59f5030 	ldr	r5, [pc, #48]	; 6b8 <__libc_fini_array+0x3c>
 684:	e59f4030 	ldr	r4, [pc, #48]	; 6bc <__libc_fini_array+0x40>
 688:	e0654004 	rsb	r4, r5, r4
 68c:	e1b04144 	asrs	r4, r4, #2
 690:	10855104 	addne	r5, r5, r4, lsl #2
 694:	0a000004 	beq	6ac <__libc_fini_array+0x30>
 698:	e5353004 	ldr	r3, [r5, #-4]!
 69c:	e1a0e00f 	mov	lr, pc
 6a0:	e12fff13 	bx	r3
 6a4:	e2544001 	subs	r4, r4, #1
 6a8:	1afffffa 	bne	698 <__libc_fini_array+0x1c>
 6ac:	eb000050 	bl	7f4 <__libc_fini>
 6b0:	e8bd4038 	pop	{r3, r4, r5, lr}
 6b4:	e12fff1e 	bx	lr
 6b8:	0000080c 	.word	0x0000080c
 6bc:	00000810 	.word	0x00000810

000006c0 <__cs3_premain>:
 6c0:	e92d4008 	push	{r3, lr}
 6c4:	eb00001d 	bl	740 <__libc_init_array>
 6c8:	e59f3030 	ldr	r3, [pc, #48]	; 700 <__cs3_premain+0x40>
 6cc:	e3530000 	cmp	r3, #0
 6d0:	15930000 	ldrne	r0, [r3]
 6d4:	01a00003 	moveq	r0, r3
 6d8:	e59f3024 	ldr	r3, [pc, #36]	; 704 <__cs3_premain+0x44>
 6dc:	e3530000 	cmp	r3, #0
 6e0:	15931000 	ldrne	r1, [r3]
 6e4:	01a01003 	moveq	r1, r3
 6e8:	e3a02000 	mov	r2, #0
 6ec:	ebffff0b 	bl	320 <main>
 6f0:	e59f3010 	ldr	r3, [pc, #16]	; 708 <__cs3_premain+0x48>
 6f4:	e3530000 	cmp	r3, #0
 6f8:	1bffff2d 	blne	3b4 <exit>
 6fc:	eafffffe 	b	6fc <__cs3_premain+0x3c>
	...
 708:	000003b4 	.word	0x000003b4

0000070c <_exit>:
 70c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 710:	e3a00018 	mov	r0, #24
 714:	e59f1004 	ldr	r1, [pc, #4]	; 720 <_exit+0x14>
 718:	ef123456 	svc	0x00123456
 71c:	eafffffe 	b	71c <_exit+0x10>
 720:	00020026 	.word	0x00020026

00000724 <__cs3_isr_interrupt>:
 724:	eafffffe 	b	724 <__cs3_isr_interrupt>

00000728 <__cs3_isr_undef>:
 728:	eafffffe 	b	728 <__cs3_isr_undef>

0000072c <__cs3_isr_swi>:
 72c:	eafffffe 	b	72c <__cs3_isr_swi>

00000730 <__cs3_isr_pabort>:
 730:	eafffffe 	b	730 <__cs3_isr_pabort>

00000734 <__cs3_isr_dabort>:
 734:	eafffffe 	b	734 <__cs3_isr_dabort>

00000738 <__cs3_isr_irq>:
 738:	eafffffe 	b	738 <__cs3_isr_irq>

0000073c <__cs3_isr_fiq>:
 73c:	eafffffe 	b	73c <__cs3_isr_fiq>

00000740 <__libc_init_array>:
 740:	e92d4070 	push	{r4, r5, r6, lr}
 744:	e59f506c 	ldr	r5, [pc, #108]	; 7b8 <__libc_init_array+0x78>
 748:	e59f606c 	ldr	r6, [pc, #108]	; 7bc <__libc_init_array+0x7c>
 74c:	e0656006 	rsb	r6, r5, r6
 750:	e1b06146 	asrs	r6, r6, #2
 754:	12455004 	subne	r5, r5, #4
 758:	13a04000 	movne	r4, #0
 75c:	0a000005 	beq	778 <__libc_init_array+0x38>
 760:	e5b53004 	ldr	r3, [r5, #4]!
 764:	e2844001 	add	r4, r4, #1
 768:	e1a0e00f 	mov	lr, pc
 76c:	e12fff13 	bx	r3
 770:	e1560004 	cmp	r6, r4
 774:	1afffff9 	bne	760 <__libc_init_array+0x20>
 778:	e59f5040 	ldr	r5, [pc, #64]	; 7c0 <__libc_init_array+0x80>
 77c:	e59f6040 	ldr	r6, [pc, #64]	; 7c4 <__libc_init_array+0x84>
 780:	e0656006 	rsb	r6, r5, r6
 784:	eb000012 	bl	7d4 <_init>
 788:	e1b06146 	asrs	r6, r6, #2
 78c:	12455004 	subne	r5, r5, #4
 790:	13a04000 	movne	r4, #0
 794:	0a000005 	beq	7b0 <__libc_init_array+0x70>
 798:	e5b53004 	ldr	r3, [r5, #4]!
 79c:	e2844001 	add	r4, r4, #1
 7a0:	e1a0e00f 	mov	lr, pc
 7a4:	e12fff13 	bx	r3
 7a8:	e1560004 	cmp	r6, r4
 7ac:	1afffff9 	bne	798 <__libc_init_array+0x58>
 7b0:	e8bd4070 	pop	{r4, r5, r6, lr}
 7b4:	e12fff1e 	bx	lr
 7b8:	000007ec 	.word	0x000007ec
 7bc:	000007ec 	.word	0x000007ec
 7c0:	000007ec 	.word	0x000007ec
 7c4:	000007f4 	.word	0x000007f4

Disassembly of section .rodata:

000007cc <_global_impure_ptr>:
 7cc:	00000840 00000043                       @...C...

000007d4 <_init>:
 7d4:	e1a0c00d 	mov	ip, sp
 7d8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 7dc:	e24cb004 	sub	fp, ip, #4
 7e0:	e24bd028 	sub	sp, fp, #40	; 0x28
 7e4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 7e8:	e12fff1e 	bx	lr

000007ec <__init_array_start>:
 7ec:	00000658 	.word	0x00000658

000007f0 <__frame_dummy_init_array_entry>:
 7f0:	00000208                                ....

000007f4 <__libc_fini>:
 7f4:	e1a0c00d 	mov	ip, sp
 7f8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 7fc:	e24cb004 	sub	fp, ip, #4
 800:	e24bd028 	sub	sp, fp, #40	; 0x28
 804:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 808:	e12fff1e 	bx	lr

0000080c <__fini_array_start>:
 80c:	000001c4 	.word	0x000001c4

00000810 <__cs3_regions>:
	...
 81c:	00000c70 	.word	0x00000c70
 820:	00000020 	.word	0x00000020

00000824 <__cs3_regions_end>:
 824:	00000000 	.word	0x00000000
