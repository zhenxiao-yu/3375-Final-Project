
Calculator.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 50 0f 00 00 54 0f 00 00 58 0f 00 00     @...P...T...X...
  30:	5c 0f 00 00 4c 0f 00 00 60 0f 00 00 64 0f 00 00     \...L...`...d...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	ip, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	ip!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, ip
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, ip
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	ip, r2, r3
  bc:	e15e000c 	cmp	lr, ip
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000383 	bl	ee8 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	0000104c 	.word	0x0000104c

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001490 	.word	0x00001490

00000124 <__cs3_heap_start_ptr>:
 124:	000014c8 	.word	0x000014c8

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001498 	.word	0x00001498
 170:	0000149b 	.word	0x0000149b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001498 	.word	0x00001498
 1bc:	00001498 	.word	0x00001498
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001498 	.word	0x00001498
 200:	00000000 	.word	0x00000000
 204:	00000ff0 	.word	0x00000ff0

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000ff0 	.word	0x00000ff0
 250:	0000149c 	.word	0x0000149c
 254:	00001050 	.word	0x00001050
 258:	00000000 	.word	0x00000000

0000025c <countDigit>:
volatile int * Display2_ptr = (int * ) HEX5_HEX4_BASE;

//* utilty functions*//
int countDigit(int val) {
  int count = 0;
  while (val != 0) {
 25c:	e2503000 	subs	r3, r0, #0
 260:	0a000008 	beq	288 <countDigit+0x2c>
volatile int * Display1_ptr = (int * ) HEX3_HEX0_BASE;
volatile int * Display2_ptr = (int * ) HEX5_HEX4_BASE;

//* utilty functions*//
int countDigit(int val) {
  int count = 0;
 264:	e3a00000 	mov	r0, #0
  while (val != 0) {
    val = val / 10;
 268:	e3061667 	movw	r1, #26215	; 0x6667
 26c:	e3461666 	movt	r1, #26214	; 0x6666
 270:	e0c2c391 	smull	ip, r2, r1, r3
 274:	e1a03fc3 	asr	r3, r3, #31
    count++;
 278:	e2800001 	add	r0, r0, #1
volatile int * Display2_ptr = (int * ) HEX5_HEX4_BASE;

//* utilty functions*//
int countDigit(int val) {
  int count = 0;
  while (val != 0) {
 27c:	e0733142 	rsbs	r3, r3, r2, asr #2
 280:	1afffffa 	bne	270 <countDigit+0x14>
 284:	e12fff1e 	bx	lr
volatile int * Display1_ptr = (int * ) HEX3_HEX0_BASE;
volatile int * Display2_ptr = (int * ) HEX5_HEX4_BASE;

//* utilty functions*//
int countDigit(int val) {
  int count = 0;
 288:	e3a00000 	mov	r0, #0
  while (val != 0) {
    val = val / 10;
    count++;
  }
  return count;
}
 28c:	e12fff1e 	bx	lr

00000290 <intToBin>:

//convert from interger value to binary value
unsigned intToBin(unsigned k) {
 290:	e92d4010 	push	{r4, lr}
  if (k == 0) return 0;
 294:	e2504000 	subs	r4, r0, #0
 298:	0a000007 	beq	2bc <intToBin+0x2c>
  if (k == 1) return 1; /* optional */
 29c:	e3540001 	cmp	r4, #1
 2a0:	0a000007 	beq	2c4 <intToBin+0x34>
  return (k % 2) + 10 * intToBin(k / 2);
 2a4:	e1a000a4 	lsr	r0, r4, #1
 2a8:	ebfffff8 	bl	290 <intToBin>
 2ac:	e0800100 	add	r0, r0, r0, lsl #2
 2b0:	e2044001 	and	r4, r4, #1
 2b4:	e0840080 	add	r0, r4, r0, lsl #1
 2b8:	e8bd8010 	pop	{r4, pc}
  return count;
}

//convert from interger value to binary value
unsigned intToBin(unsigned k) {
  if (k == 0) return 0;
 2bc:	e3a00000 	mov	r0, #0
 2c0:	e8bd8010 	pop	{r4, pc}
  if (k == 1) return 1; /* optional */
 2c4:	e3a00001 	mov	r0, #1
  return (k % 2) + 10 * intToBin(k / 2);
}
 2c8:	e8bd8010 	pop	{r4, pc}

000002cc <DisplayError>:
  int BYTE = 8;
  int Letter_E = 0x79; //1111001
  int letter_r = 0x50; //1010000
  int letter_o = 0x5C; //1011100
  // Displaying r + o
  * Display1_ptr = letter_r << (3 * BYTE) |
 2cc:	e3013058 	movw	r3, #4184	; 0x1058
 2d0:	e3403000 	movt	r3, #0
 2d4:	e5931000 	ldr	r1, [r3]
 2d8:	e3052c50 	movw	r2, #23632	; 0x5c50
 2dc:	e3452050 	movt	r2, #20560	; 0x5050
 2e0:	e5812000 	str	r2, [r1]
    letter_r << (2 * BYTE) |
    letter_o << (1 * BYTE) |
    letter_r << (0 * BYTE);
  // Displaying E
  * Display2_ptr = Letter_E;
 2e4:	e5933004 	ldr	r3, [r3, #4]
 2e8:	e3a02079 	mov	r2, #121	; 0x79
 2ec:	e5832000 	str	r2, [r3]
 2f0:	e12fff1e 	bx	lr

000002f4 <DisplayOperator>:
}

//Display the Operator ID on 7-segment Display
void DisplayOperator(int oprID) {
 2f4:	e24dd008 	sub	sp, sp, #8
  char oprTable[5];
  oprTable[0] = 0x3F; // used as capital letter 'O'
 2f8:	e3a0303f 	mov	r3, #63	; 0x3f
 2fc:	e5cd3000 	strb	r3, [sp]
  oprTable[1] = 0x06; // + 
 300:	e3a03006 	mov	r3, #6
 304:	e5cd3001 	strb	r3, [sp, #1]
  oprTable[2] = 0x5B; // -
 308:	e3a0305b 	mov	r3, #91	; 0x5b
 30c:	e5cd3002 	strb	r3, [sp, #2]
  oprTable[3] = 0x4F; // x
 310:	e3a0304f 	mov	r3, #79	; 0x4f
 314:	e5cd3003 	strb	r3, [sp, #3]
  oprTable[4] = 0x66; // /
 318:	e3a03066 	mov	r3, #102	; 0x66
 31c:	e5cd3004 	strb	r3, [sp, #4]
  int BYTE = 8;
  int letter_p = 0x73; //1110011
  int letter_r = 0x50; //1010000
  // Displaying O + p + r + operator ID
  * Display1_ptr = oprTable[0] << (3 * BYTE) |
 320:	e3013058 	movw	r3, #4184	; 0x1058
 324:	e3403000 	movt	r3, #0
 328:	e5931000 	ldr	r1, [r3]
    letter_p << (2 * BYTE) |
    letter_r << (1 * BYTE) |
    oprTable[oprID] << (0 * BYTE);
 32c:	e28d2008 	add	r2, sp, #8
 330:	e0820000 	add	r0, r2, r0
 334:	e5500008 	ldrb	r0, [r0, #-8]
  int letter_p = 0x73; //1110011
  int letter_r = 0x50; //1010000
  // Displaying O + p + r + operator ID
  * Display1_ptr = oprTable[0] << (3 * BYTE) |
    letter_p << (2 * BYTE) |
    letter_r << (1 * BYTE) |
 338:	e3a02a05 	mov	r2, #20480	; 0x5000
 33c:	e3432f73 	movt	r2, #16243	; 0x3f73
 340:	e1802002 	orr	r2, r0, r2
  oprTable[4] = 0x66; // /
  int BYTE = 8;
  int letter_p = 0x73; //1110011
  int letter_r = 0x50; //1010000
  // Displaying O + p + r + operator ID
  * Display1_ptr = oprTable[0] << (3 * BYTE) |
 344:	e5812000 	str	r2, [r1]
    letter_p << (2 * BYTE) |
    letter_r << (1 * BYTE) |
    oprTable[oprID] << (0 * BYTE);
  // turn off
  * Display2_ptr = 0x00;
 348:	e5933004 	ldr	r3, [r3, #4]
 34c:	e3a02000 	mov	r2, #0
 350:	e5832000 	str	r2, [r3]
}
 354:	e28dd008 	add	sp, sp, #8
 358:	e12fff1e 	bx	lr

0000035c <DisplayValue>:

// Displays numbers on 7 seg display
void DisplayValue(int value) { // max = 10, displays number from 0 - 9
 35c:	e92d0030 	push	{r4, r5}
 360:	e24dd028 	sub	sp, sp, #40	; 0x28
  char lookUpTable[10];
  lookUpTable[0] = 0x3F;
 364:	e3a0303f 	mov	r3, #63	; 0x3f
 368:	e5cd301c 	strb	r3, [sp, #28]
  lookUpTable[1] = 0x06;
 36c:	e3a03006 	mov	r3, #6
 370:	e5cd301d 	strb	r3, [sp, #29]
  lookUpTable[2] = 0x5B;
 374:	e3a0305b 	mov	r3, #91	; 0x5b
 378:	e5cd301e 	strb	r3, [sp, #30]
  lookUpTable[3] = 0x4F;
 37c:	e3a0304f 	mov	r3, #79	; 0x4f
 380:	e5cd301f 	strb	r3, [sp, #31]
  lookUpTable[4] = 0x66;
 384:	e3a03066 	mov	r3, #102	; 0x66
 388:	e5cd3020 	strb	r3, [sp, #32]
  lookUpTable[5] = 0x6D;
 38c:	e3a0306d 	mov	r3, #109	; 0x6d
 390:	e5cd3021 	strb	r3, [sp, #33]	; 0x21
  lookUpTable[6] = 0x7D;
 394:	e3a0307d 	mov	r3, #125	; 0x7d
 398:	e5cd3022 	strb	r3, [sp, #34]	; 0x22
  lookUpTable[7] = 0x07;
 39c:	e3a03007 	mov	r3, #7
 3a0:	e5cd3023 	strb	r3, [sp, #35]	; 0x23
  lookUpTable[8] = 0x7F;
 3a4:	e3a0307f 	mov	r3, #127	; 0x7f
 3a8:	e5cd3024 	strb	r3, [sp, #36]	; 0x24
  lookUpTable[9] = 0x6F;
 3ac:	e3a0306f 	mov	r3, #111	; 0x6f
 3b0:	e5cd3025 	strb	r3, [sp, #37]	; 0x25
 3b4:	e28d2018 	add	r2, sp, #24
  // turn off
  * Display2_ptr = 0x00;
}

// Displays numbers on 7 seg display
void DisplayValue(int value) { // max = 10, displays number from 0 - 9
 3b8:	e1a0400d 	mov	r4, sp
  int BYTE = 8;
  // if value can be represented by 6 digits
  int bitArray[6];
  int i = 5;
  while (i >= 0) {
    bitArray[i] = value % 10;
 3bc:	e306c667 	movw	ip, #26215	; 0x6667
 3c0:	e346c666 	movt	ip, #26214	; 0x6666
 3c4:	e0c1309c 	smull	r3, r1, ip, r0
 3c8:	e1a03fc0 	asr	r3, r0, #31
 3cc:	e0633141 	rsb	r3, r3, r1, asr #2
 3d0:	e0831103 	add	r1, r3, r3, lsl #2
 3d4:	e0400081 	sub	r0, r0, r1, lsl #1
 3d8:	e4020004 	str	r0, [r2], #-4
    value /= 10;
 3dc:	e1a00003 	mov	r0, r3
  lookUpTable[9] = 0x6F;
  int BYTE = 8;
  // if value can be represented by 6 digits
  int bitArray[6];
  int i = 5;
  while (i >= 0) {
 3e0:	e1520004 	cmp	r2, r4
 3e4:	1afffff6 	bne	3c4 <DisplayValue+0x68>
    bitArray[i] = value % 10;
    value /= 10;
    i--;
  }
  //assign bit b=values with digits
  int bit6 = lookUpTable[bitArray[0]];
 3e8:	e59d3004 	ldr	r3, [sp, #4]
 3ec:	e28d4028 	add	r4, sp, #40	; 0x28
 3f0:	e0843003 	add	r3, r4, r3
 3f4:	e553100c 	ldrb	r1, [r3, #-12]
  int bit5 = lookUpTable[bitArray[1]];
 3f8:	e59d3008 	ldr	r3, [sp, #8]
 3fc:	e0843003 	add	r3, r4, r3
 400:	e553200c 	ldrb	r2, [r3, #-12]
  int bit3 = lookUpTable[bitArray[3]];
  int bit2 = lookUpTable[bitArray[4]];
  int bit1 = lookUpTable[bitArray[5]];

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
 404:	e3013058 	movw	r3, #4184	; 0x1058
 408:	e3403000 	movt	r3, #0
 40c:	e5930000 	ldr	r0, [r3]
    i--;
  }
  //assign bit b=values with digits
  int bit6 = lookUpTable[bitArray[0]];
  int bit5 = lookUpTable[bitArray[1]];
  int bit4 = lookUpTable[bitArray[2]];
 410:	e59dc00c 	ldr	ip, [sp, #12]
 414:	e084c00c 	add	ip, r4, ip
 418:	e55c400c 	ldrb	r4, [ip, #-12]
  int bit3 = lookUpTable[bitArray[3]];
 41c:	e59dc010 	ldr	ip, [sp, #16]
 420:	e28d5028 	add	r5, sp, #40	; 0x28
 424:	e085c00c 	add	ip, r5, ip
 428:	e55cc00c 	ldrb	ip, [ip, #-12]
  int bit2 = lookUpTable[bitArray[4]];
  int bit1 = lookUpTable[bitArray[5]];

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
    bit3 << (2 * BYTE) |
 42c:	e1a0c80c 	lsl	ip, ip, #16
  int bit3 = lookUpTable[bitArray[3]];
  int bit2 = lookUpTable[bitArray[4]];
  int bit1 = lookUpTable[bitArray[5]];

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
 430:	e18ccc04 	orr	ip, ip, r4, lsl #24
  int bit6 = lookUpTable[bitArray[0]];
  int bit5 = lookUpTable[bitArray[1]];
  int bit4 = lookUpTable[bitArray[2]];
  int bit3 = lookUpTable[bitArray[3]];
  int bit2 = lookUpTable[bitArray[4]];
  int bit1 = lookUpTable[bitArray[5]];
 434:	e59d4018 	ldr	r4, [sp, #24]
 438:	e0854004 	add	r4, r5, r4
 43c:	e554400c 	ldrb	r4, [r4, #-12]

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
    bit3 << (2 * BYTE) |
 440:	e18cc004 	orr	ip, ip, r4
  //assign bit b=values with digits
  int bit6 = lookUpTable[bitArray[0]];
  int bit5 = lookUpTable[bitArray[1]];
  int bit4 = lookUpTable[bitArray[2]];
  int bit3 = lookUpTable[bitArray[3]];
  int bit2 = lookUpTable[bitArray[4]];
 444:	e59d4014 	ldr	r4, [sp, #20]
 448:	e0854004 	add	r4, r5, r4
 44c:	e554400c 	ldrb	r4, [r4, #-12]
  int bit1 = lookUpTable[bitArray[5]];

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
    bit3 << (2 * BYTE) |
    bit2 << (1 * BYTE) |
 450:	e18cc404 	orr	ip, ip, r4, lsl #8
  int bit3 = lookUpTable[bitArray[3]];
  int bit2 = lookUpTable[bitArray[4]];
  int bit1 = lookUpTable[bitArray[5]];

  // Displaying bit 1 - 4 of value 
  * Display1_ptr = bit4 << (3 * BYTE) |
 454:	e580c000 	str	ip, [r0]
    bit3 << (2 * BYTE) |
    bit2 << (1 * BYTE) |
    bit1 << (0 * BYTE);

  // Displaying bit 5 - 6 of value 
  * Display2_ptr = bit6 << (1 * BYTE) |
 458:	e5933004 	ldr	r3, [r3, #4]
 45c:	e1822401 	orr	r2, r2, r1, lsl #8
 460:	e5832000 	str	r2, [r3]
    bit5 << (0 * BYTE);
}
 464:	e28dd028 	add	sp, sp, #40	; 0x28
 468:	e8bd0030 	pop	{r4, r5}
 46c:	e12fff1e 	bx	lr

00000470 <ReadButton>:

// Reads buttons
int ReadButton(int btn) {
  volatile int * BTN_ptr = (int * ) KEY_BASE;
  // Returns 1 if the given button is pressed, 0 otherwise due to & operator
  return (( * BTN_ptr >> (btn)) & 1);
 470:	e3a03000 	mov	r3, #0
 474:	e34f3f20 	movt	r3, #65312	; 0xff20
 478:	e5933050 	ldr	r3, [r3, #80]	; 0x50
 47c:	e1a00053 	asr	r0, r3, r0
}
 480:	e2000001 	and	r0, r0, #1
 484:	e12fff1e 	bx	lr

00000488 <ReadSwitch>:
// Reads switches
int ReadSwitch(int sw) {
  // pointer to switch address
  volatile int * SW_ptr = (int * ) SW_BASE;
  // Returns 1 if the given button is pressed, 0 otherwise due to & operator
  return (( * SW_ptr >> (sw)) & 1);
 488:	e3a03000 	mov	r3, #0
 48c:	e34f3f20 	movt	r3, #65312	; 0xff20
 490:	e5933040 	ldr	r3, [r3, #64]	; 0x40
 494:	e1a00053 	asr	r0, r3, r0
}
 498:	e2000001 	and	r0, r0, #1
 49c:	e12fff1e 	bx	lr

000004a0 <GetInput>:

// get input from switch 0 - 5
int GetInput(void) {
 4a0:	e24dd008 	sub	sp, sp, #8
  // pointer to switch address
  volatile int * SW_ptr = (int * ) SW_BASE;
  volatile int inputValue = * (SW_ptr);
 4a4:	e3a03000 	mov	r3, #0
 4a8:	e34f3f20 	movt	r3, #65312	; 0xff20
 4ac:	e5933040 	ldr	r3, [r3, #64]	; 0x40
 4b0:	e58d3004 	str	r3, [sp, #4]
  // reads slide switch bank and return current value (encoded in binary)
  // return lowest 6 bits in the switch bank (2 ^ 6)
  return (inputValue % (2 * 2 * 2 * 2 * 2 * 2));
 4b4:	e59d2004 	ldr	r2, [sp, #4]
 4b8:	e1a03fc2 	asr	r3, r2, #31
 4bc:	e1a03d23 	lsr	r3, r3, #26
 4c0:	e0822003 	add	r2, r2, r3
 4c4:	e202003f 	and	r0, r2, #63	; 0x3f
}
 4c8:	e0630000 	rsb	r0, r3, r0
 4cc:	e28dd008 	add	sp, sp, #8
 4d0:	e12fff1e 	bx	lr

000004d4 <showingOperator>:



int showingOperator() {
 4d4:	e92d4008 	push	{r3, lr}
  if (ReadButton(0) || ReadButton(1) || ReadButton(2) || ReadButton(3)) {
 4d8:	e3a00000 	mov	r0, #0
 4dc:	ebffffe3 	bl	470 <ReadButton>
 4e0:	e3500000 	cmp	r0, #0
 4e4:	1a00000c 	bne	51c <showingOperator+0x48>
 4e8:	e3a00001 	mov	r0, #1
 4ec:	ebffffdf 	bl	470 <ReadButton>
 4f0:	e3500000 	cmp	r0, #0
 4f4:	1a00000a 	bne	524 <showingOperator+0x50>
 4f8:	e3a00002 	mov	r0, #2
 4fc:	ebffffdb 	bl	470 <ReadButton>
 500:	e3500000 	cmp	r0, #0
 504:	1a000008 	bne	52c <showingOperator+0x58>
 508:	e3a00003 	mov	r0, #3
 50c:	ebffffd7 	bl	470 <ReadButton>
 510:	e2900000 	adds	r0, r0, #0
 514:	13a00001 	movne	r0, #1
 518:	e8bd8008 	pop	{r3, pc}
    return 1;
 51c:	e3a00001 	mov	r0, #1
 520:	e8bd8008 	pop	{r3, pc}
 524:	e3a00001 	mov	r0, #1
 528:	e8bd8008 	pop	{r3, pc}
 52c:	e3a00001 	mov	r0, #1
  } else {
    return 0;
  }
}
 530:	e8bd8008 	pop	{r3, pc}

00000534 <main>:
int answer;
int num1;
int num2;
int operator;

int main(void) {
 534:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  DisplayValue(0); // Initialize display
 538:	e3a00000 	mov	r0, #0
 53c:	ebffff86 	bl	35c <DisplayValue>
  // Main loop
  while (1) {
    //turn display off when switch 9 is not flipped
    if (!ReadSwitch(9)) {
 540:	e3a05009 	mov	r5, #9
      * Display2_ptr = 0x00;
 544:	e3016058 	movw	r6, #4184	; 0x1058
 548:	e3406000 	movt	r6, #0
 54c:	e3a04000 	mov	r4, #0
            num1 = answer;
        }
      }

      // switch mode
      if (ReadSwitch(6) && showingOperator() == 0 && !ReadSwitch(7)) {
 550:	e3a08006 	mov	r8, #6
          DisplayError();
        }
      }
      
      //clear answer
      if (ReadSwitch(8)) {
 554:	e3a0a008 	mov	sl, #8
          DisplayValue(0);
      }

      // show answer
      if (ReadSwitch(7) && !ReadSwitch(8)) {
        num2 = GetInput();
 558:	e30174b4 	movw	r7, #5300	; 0x14b4
 55c:	e3407000 	movt	r7, #0

  DisplayValue(0); // Initialize display
  // Main loop
  while (1) {
    //turn display off when switch 9 is not flipped
    if (!ReadSwitch(9)) {
 560:	e1a00005 	mov	r0, r5
 564:	ebffffc7 	bl	488 <ReadSwitch>
 568:	e3500000 	cmp	r0, #0
 56c:	1a000004 	bne	584 <main+0x50>
      * Display2_ptr = 0x00;
 570:	e5963004 	ldr	r3, [r6, #4]
 574:	e5834000 	str	r4, [r3]
      * Display1_ptr = 0x00;
 578:	e5963000 	ldr	r3, [r6]
 57c:	e5834000 	str	r4, [r3]
 580:	eafffff6 	b	560 <main+0x2c>
    } else if (ReadSwitch(9)) {
 584:	e1a00005 	mov	r0, r5
 588:	ebffffbe 	bl	488 <ReadSwitch>
 58c:	e3500000 	cmp	r0, #0
 590:	0afffff2 	beq	560 <main+0x2c>
      // plus
      if (ReadButton(0) && !ReadButton(1) && !ReadButton(2) && !ReadButton(3)) {
 594:	e1a00004 	mov	r0, r4
 598:	ebffffb4 	bl	470 <ReadButton>
 59c:	e3500000 	cmp	r0, #0
 5a0:	0a000016 	beq	600 <main+0xcc>
 5a4:	e3a00001 	mov	r0, #1
 5a8:	ebffffb0 	bl	470 <ReadButton>
 5ac:	e3500000 	cmp	r0, #0
 5b0:	1a000012 	bne	600 <main+0xcc>
 5b4:	e3a00002 	mov	r0, #2
 5b8:	ebffffac 	bl	470 <ReadButton>
 5bc:	e3500000 	cmp	r0, #0
 5c0:	1a00000e 	bne	600 <main+0xcc>
 5c4:	e3a00003 	mov	r0, #3
 5c8:	ebffffa8 	bl	470 <ReadButton>
 5cc:	e3500000 	cmp	r0, #0
 5d0:	1a00000a 	bne	600 <main+0xcc>
        DisplayOperator(1);
 5d4:	e3a00001 	mov	r0, #1
 5d8:	ebffff45 	bl	2f4 <DisplayOperator>
        operator = 1;
 5dc:	e3a03001 	mov	r3, #1
 5e0:	e5873000 	str	r3, [r7]
        if (!answer) {
 5e4:	e5973004 	ldr	r3, [r7, #4]
 5e8:	e3530000 	cmp	r3, #0
            num1 = GetInput();
        } else if (answer) {
            num1 = answer;
 5ec:	15873008 	strne	r3, [r7, #8]
    } else if (ReadSwitch(9)) {
      // plus
      if (ReadButton(0) && !ReadButton(1) && !ReadButton(2) && !ReadButton(3)) {
        DisplayOperator(1);
        operator = 1;
        if (!answer) {
 5f0:	1a000002 	bne	600 <main+0xcc>
            num1 = GetInput();
 5f4:	ebffffa9 	bl	4a0 <GetInput>
 5f8:	e5870008 	str	r0, [r7, #8]
 5fc:	eaffffff 	b	600 <main+0xcc>
        } else if (answer) {
            num1 = answer;
        }
      }
      // minus
      if (!ReadButton(0) && ReadButton(1) && !ReadButton(2) && !ReadButton(3)) {
 600:	e1a00004 	mov	r0, r4
 604:	ebffff99 	bl	470 <ReadButton>
 608:	e3500000 	cmp	r0, #0
 60c:	1a000016 	bne	66c <main+0x138>
 610:	e3a00001 	mov	r0, #1
 614:	ebffff95 	bl	470 <ReadButton>
 618:	e3500000 	cmp	r0, #0
 61c:	0a000012 	beq	66c <main+0x138>
 620:	e3a00002 	mov	r0, #2
 624:	ebffff91 	bl	470 <ReadButton>
 628:	e3500000 	cmp	r0, #0
 62c:	1a00000e 	bne	66c <main+0x138>
 630:	e3a00003 	mov	r0, #3
 634:	ebffff8d 	bl	470 <ReadButton>
 638:	e3500000 	cmp	r0, #0
 63c:	1a00000a 	bne	66c <main+0x138>
        DisplayOperator(2);
 640:	e3a00002 	mov	r0, #2
 644:	ebffff2a 	bl	2f4 <DisplayOperator>
        operator = 2;
 648:	e3a03002 	mov	r3, #2
 64c:	e5873000 	str	r3, [r7]
        if (!answer) {
 650:	e5973004 	ldr	r3, [r7, #4]
 654:	e3530000 	cmp	r3, #0
            num1 = GetInput();
        } else if (answer) {
            num1 = answer;
 658:	15873008 	strne	r3, [r7, #8]
      }
      // minus
      if (!ReadButton(0) && ReadButton(1) && !ReadButton(2) && !ReadButton(3)) {
        DisplayOperator(2);
        operator = 2;
        if (!answer) {
 65c:	1a000002 	bne	66c <main+0x138>
            num1 = GetInput();
 660:	ebffff8e 	bl	4a0 <GetInput>
 664:	e5870008 	str	r0, [r7, #8]
 668:	eaffffff 	b	66c <main+0x138>
        } else if (answer) {
            num1 = answer;
        }
      }
      // multiply
      if (!ReadButton(0) && !ReadButton(1) && ReadButton(2) && !ReadButton(3)) {
 66c:	e1a00004 	mov	r0, r4
 670:	ebffff7e 	bl	470 <ReadButton>
 674:	e3500000 	cmp	r0, #0
 678:	1a000016 	bne	6d8 <main+0x1a4>
 67c:	e3a00001 	mov	r0, #1
 680:	ebffff7a 	bl	470 <ReadButton>
 684:	e3500000 	cmp	r0, #0
 688:	1a000012 	bne	6d8 <main+0x1a4>
 68c:	e3a00002 	mov	r0, #2
 690:	ebffff76 	bl	470 <ReadButton>
 694:	e3500000 	cmp	r0, #0
 698:	0a00000e 	beq	6d8 <main+0x1a4>
 69c:	e3a00003 	mov	r0, #3
 6a0:	ebffff72 	bl	470 <ReadButton>
 6a4:	e3500000 	cmp	r0, #0
 6a8:	1a00000a 	bne	6d8 <main+0x1a4>
        DisplayOperator(3);
 6ac:	e3a00003 	mov	r0, #3
 6b0:	ebffff0f 	bl	2f4 <DisplayOperator>
        operator = 3;
 6b4:	e3a03003 	mov	r3, #3
 6b8:	e5873000 	str	r3, [r7]
        if (!answer) {
 6bc:	e5973004 	ldr	r3, [r7, #4]
 6c0:	e3530000 	cmp	r3, #0
            num1 = GetInput();
        } else if (answer) {
            num1 = answer;
 6c4:	15873008 	strne	r3, [r7, #8]
      }
      // multiply
      if (!ReadButton(0) && !ReadButton(1) && ReadButton(2) && !ReadButton(3)) {
        DisplayOperator(3);
        operator = 3;
        if (!answer) {
 6c8:	1a000002 	bne	6d8 <main+0x1a4>
            num1 = GetInput();
 6cc:	ebffff73 	bl	4a0 <GetInput>
 6d0:	e5870008 	str	r0, [r7, #8]
 6d4:	eaffffff 	b	6d8 <main+0x1a4>
        } else if (answer) {
            num1 = answer;
        }
      }
      //divide
      if (!ReadButton(0) && !ReadButton(1) && !ReadButton(2) && ReadButton(3)) {
 6d8:	e1a00004 	mov	r0, r4
 6dc:	ebffff63 	bl	470 <ReadButton>
 6e0:	e3500000 	cmp	r0, #0
 6e4:	1a000016 	bne	744 <main+0x210>
 6e8:	e3a00001 	mov	r0, #1
 6ec:	ebffff5f 	bl	470 <ReadButton>
 6f0:	e3500000 	cmp	r0, #0
 6f4:	1a000012 	bne	744 <main+0x210>
 6f8:	e3a00002 	mov	r0, #2
 6fc:	ebffff5b 	bl	470 <ReadButton>
 700:	e3500000 	cmp	r0, #0
 704:	1a00000e 	bne	744 <main+0x210>
 708:	e3a00003 	mov	r0, #3
 70c:	ebffff57 	bl	470 <ReadButton>
 710:	e3500000 	cmp	r0, #0
 714:	0a00000a 	beq	744 <main+0x210>
        DisplayOperator(4);
 718:	e3a00004 	mov	r0, #4
 71c:	ebfffef4 	bl	2f4 <DisplayOperator>
        operator = 4;
 720:	e3a03004 	mov	r3, #4
 724:	e5873000 	str	r3, [r7]
        if (!answer) {
 728:	e5973004 	ldr	r3, [r7, #4]
 72c:	e3530000 	cmp	r3, #0
            num1 = GetInput();
        } else if (answer) {
            num1 = answer;
 730:	15873008 	strne	r3, [r7, #8]
      }
      //divide
      if (!ReadButton(0) && !ReadButton(1) && !ReadButton(2) && ReadButton(3)) {
        DisplayOperator(4);
        operator = 4;
        if (!answer) {
 734:	1a000002 	bne	744 <main+0x210>
            num1 = GetInput();
 738:	ebffff58 	bl	4a0 <GetInput>
 73c:	e5870008 	str	r0, [r7, #8]
 740:	eaffffff 	b	744 <main+0x210>
            num1 = answer;
        }
      }

      // switch mode
      if (ReadSwitch(6) && showingOperator() == 0 && !ReadSwitch(7)) {
 744:	e1a00008 	mov	r0, r8
 748:	ebffff4e 	bl	488 <ReadSwitch>
 74c:	e3500000 	cmp	r0, #0
 750:	0a00000f 	beq	794 <main+0x260>
 754:	ebffff5e 	bl	4d4 <showingOperator>
 758:	e3500000 	cmp	r0, #0
 75c:	1a00000c 	bne	794 <main+0x260>
 760:	e3a00007 	mov	r0, #7
 764:	ebffff47 	bl	488 <ReadSwitch>
 768:	e3500000 	cmp	r0, #0
 76c:	1a000008 	bne	794 <main+0x260>
        // display decimal value
        if (countDigit(GetInput()) <= 6) {
 770:	ebffff4a 	bl	4a0 <GetInput>
 774:	ebfffeb8 	bl	25c <countDigit>
 778:	e3500006 	cmp	r0, #6
 77c:	ca000002 	bgt	78c <main+0x258>
          DisplayValue(GetInput());
 780:	ebffff46 	bl	4a0 <GetInput>
 784:	ebfffef4 	bl	35c <DisplayValue>
 788:	ea000016 	b	7e8 <main+0x2b4>
        } else {
          DisplayError();
 78c:	ebfffece 	bl	2cc <DisplayError>
 790:	ea000014 	b	7e8 <main+0x2b4>
        }
      } else if (!ReadSwitch(6) && showingOperator() == 0 && !ReadSwitch(7)) {
 794:	e1a00008 	mov	r0, r8
 798:	ebffff3a 	bl	488 <ReadSwitch>
 79c:	e3500000 	cmp	r0, #0
 7a0:	1a000010 	bne	7e8 <main+0x2b4>
 7a4:	ebffff4a 	bl	4d4 <showingOperator>
 7a8:	e3500000 	cmp	r0, #0
 7ac:	1a00000d 	bne	7e8 <main+0x2b4>
 7b0:	e3a00007 	mov	r0, #7
 7b4:	ebffff33 	bl	488 <ReadSwitch>
 7b8:	e3500000 	cmp	r0, #0
 7bc:	1a000009 	bne	7e8 <main+0x2b4>
        // display binary value
        if (countDigit(intToBin(GetInput())) <= 6) {
 7c0:	ebffff36 	bl	4a0 <GetInput>
 7c4:	ebfffeb1 	bl	290 <intToBin>
 7c8:	ebfffea3 	bl	25c <countDigit>
 7cc:	e3500006 	cmp	r0, #6
 7d0:	ca000003 	bgt	7e4 <main+0x2b0>
          DisplayValue(intToBin(GetInput()));
 7d4:	ebffff31 	bl	4a0 <GetInput>
 7d8:	ebfffeac 	bl	290 <intToBin>
 7dc:	ebfffede 	bl	35c <DisplayValue>
 7e0:	ea000000 	b	7e8 <main+0x2b4>
        } else {
          DisplayError();
 7e4:	ebfffeb8 	bl	2cc <DisplayError>
        }
      }
      
      //clear answer
      if (ReadSwitch(8)) {
 7e8:	e1a0000a 	mov	r0, sl
 7ec:	ebffff25 	bl	488 <ReadSwitch>
 7f0:	e3500000 	cmp	r0, #0
 7f4:	0a000005 	beq	810 <main+0x2dc>
          num1 = 0;
 7f8:	e5874008 	str	r4, [r7, #8]
          num2 = 0;
 7fc:	e587400c 	str	r4, [r7, #12]
          answer = 0;
 800:	e5874004 	str	r4, [r7, #4]
          operator = 0;
 804:	e5874000 	str	r4, [r7]
          DisplayValue(0);
 808:	e1a00004 	mov	r0, r4
 80c:	ebfffed2 	bl	35c <DisplayValue>
      }

      // show answer
      if (ReadSwitch(7) && !ReadSwitch(8)) {
 810:	e3a00007 	mov	r0, #7
 814:	ebffff1b 	bl	488 <ReadSwitch>
 818:	e3500000 	cmp	r0, #0
 81c:	0affff4f 	beq	560 <main+0x2c>
 820:	e1a0000a 	mov	r0, sl
 824:	ebffff17 	bl	488 <ReadSwitch>
 828:	e3500000 	cmp	r0, #0
 82c:	1affff4b 	bne	560 <main+0x2c>
        num2 = GetInput();
 830:	ebffff1a 	bl	4a0 <GetInput>
 834:	e1a01000 	mov	r1, r0
 838:	e587000c 	str	r0, [r7, #12]
        if (operator == 1) {
 83c:	e5973000 	ldr	r3, [r7]
 840:	e3530001 	cmp	r3, #1
 844:	1a000020 	bne	8cc <main+0x398>
          answer = num1 + num2;
 848:	e5973008 	ldr	r3, [r7, #8]
 84c:	e0801003 	add	r1, r0, r3
 850:	e5871004 	str	r1, [r7, #4]
          if (!ReadSwitch(6)) { //not in decimal mode
 854:	e1a00008 	mov	r0, r8
 858:	ebffff0a 	bl	488 <ReadSwitch>
 85c:	e3500000 	cmp	r0, #0
 860:	1a00000d 	bne	89c <main+0x368>
            if (countDigit(intToBin(answer)) <= 6 && answer>=0) {
 864:	e5979004 	ldr	r9, [r7, #4]
 868:	e1a00009 	mov	r0, r9
 86c:	ebfffe87 	bl	290 <intToBin>
 870:	e1a0b000 	mov	fp, r0
 874:	ebfffe78 	bl	25c <countDigit>
 878:	e3500006 	cmp	r0, #6
 87c:	ca000004 	bgt	894 <main+0x360>
 880:	e3590000 	cmp	r9, #0
 884:	ba000002 	blt	894 <main+0x360>
              DisplayValue(intToBin(answer));
 888:	e1a0000b 	mov	r0, fp
 88c:	ebfffeb2 	bl	35c <DisplayValue>
 890:	eaffff32 	b	560 <main+0x2c>
            } else {
              DisplayError();
 894:	ebfffe8c 	bl	2cc <DisplayError>
 898:	eaffff30 	b	560 <main+0x2c>
            }
          } else {
            if (countDigit(answer) <= 6 && answer>=0) {
 89c:	e5979004 	ldr	r9, [r7, #4]
 8a0:	e1a00009 	mov	r0, r9
 8a4:	ebfffe6c 	bl	25c <countDigit>
 8a8:	e3500006 	cmp	r0, #6
 8ac:	ca000004 	bgt	8c4 <main+0x390>
 8b0:	e3590000 	cmp	r9, #0
 8b4:	ba000002 	blt	8c4 <main+0x390>
              DisplayValue(answer);
 8b8:	e1a00009 	mov	r0, r9
 8bc:	ebfffea6 	bl	35c <DisplayValue>
 8c0:	eaffff26 	b	560 <main+0x2c>
            } else {
              DisplayError();
 8c4:	ebfffe80 	bl	2cc <DisplayError>
 8c8:	eaffff24 	b	560 <main+0x2c>
            }
          }
        } else if (operator == 2) {
 8cc:	e3530002 	cmp	r3, #2
 8d0:	1a000020 	bne	958 <main+0x424>
          answer = num1 - num2;
 8d4:	e5973008 	ldr	r3, [r7, #8]
 8d8:	e0601003 	rsb	r1, r0, r3
 8dc:	e5871004 	str	r1, [r7, #4]
          if (!ReadSwitch(6)) { //not in decimal mode
 8e0:	e1a00008 	mov	r0, r8
 8e4:	ebfffee7 	bl	488 <ReadSwitch>
 8e8:	e3500000 	cmp	r0, #0
 8ec:	1a00000d 	bne	928 <main+0x3f4>
            if (countDigit(intToBin(answer)) <= 6 && answer>=0) {
 8f0:	e5979004 	ldr	r9, [r7, #4]
 8f4:	e1a00009 	mov	r0, r9
 8f8:	ebfffe64 	bl	290 <intToBin>
 8fc:	e1a0b000 	mov	fp, r0
 900:	ebfffe55 	bl	25c <countDigit>
 904:	e3500006 	cmp	r0, #6
 908:	ca000004 	bgt	920 <main+0x3ec>
 90c:	e3590000 	cmp	r9, #0
 910:	ba000002 	blt	920 <main+0x3ec>
              DisplayValue(intToBin(answer));
 914:	e1a0000b 	mov	r0, fp
 918:	ebfffe8f 	bl	35c <DisplayValue>
 91c:	eaffff0f 	b	560 <main+0x2c>
            } else {
              DisplayError();
 920:	ebfffe69 	bl	2cc <DisplayError>
 924:	eaffff0d 	b	560 <main+0x2c>
            }
          } else {
            if (countDigit(answer) <= 6 && answer>=0) {
 928:	e5979004 	ldr	r9, [r7, #4]
 92c:	e1a00009 	mov	r0, r9
 930:	ebfffe49 	bl	25c <countDigit>
 934:	e3500006 	cmp	r0, #6
 938:	ca000004 	bgt	950 <main+0x41c>
 93c:	e3590000 	cmp	r9, #0
 940:	ba000002 	blt	950 <main+0x41c>
              DisplayValue(answer);
 944:	e1a00009 	mov	r0, r9
 948:	ebfffe83 	bl	35c <DisplayValue>
 94c:	eaffff03 	b	560 <main+0x2c>
            } else {
              DisplayError();
 950:	ebfffe5d 	bl	2cc <DisplayError>
 954:	eaffff01 	b	560 <main+0x2c>
            }
          }
        } else if (operator == 3) {
 958:	e3530003 	cmp	r3, #3
 95c:	1a000020 	bne	9e4 <main+0x4b0>
          answer = num1 * num2;
 960:	e5973008 	ldr	r3, [r7, #8]
 964:	e0010093 	mul	r1, r3, r0
 968:	e5871004 	str	r1, [r7, #4]
          if (!ReadSwitch(6)) { //not in decimal mode
 96c:	e1a00008 	mov	r0, r8
 970:	ebfffec4 	bl	488 <ReadSwitch>
 974:	e3500000 	cmp	r0, #0
 978:	1a00000d 	bne	9b4 <main+0x480>
            if (countDigit(intToBin(answer)) <= 6 && answer>=0) {
 97c:	e5979004 	ldr	r9, [r7, #4]
 980:	e1a00009 	mov	r0, r9
 984:	ebfffe41 	bl	290 <intToBin>
 988:	e1a0b000 	mov	fp, r0
 98c:	ebfffe32 	bl	25c <countDigit>
 990:	e3500006 	cmp	r0, #6
 994:	ca000004 	bgt	9ac <main+0x478>
 998:	e3590000 	cmp	r9, #0
 99c:	ba000002 	blt	9ac <main+0x478>
              DisplayValue(intToBin(answer));
 9a0:	e1a0000b 	mov	r0, fp
 9a4:	ebfffe6c 	bl	35c <DisplayValue>
 9a8:	eafffeec 	b	560 <main+0x2c>
            } else {
              DisplayError();
 9ac:	ebfffe46 	bl	2cc <DisplayError>
 9b0:	eafffeea 	b	560 <main+0x2c>
            }
          } else {
            if (countDigit(answer) <= 6 && answer>=0) {
 9b4:	e5979004 	ldr	r9, [r7, #4]
 9b8:	e1a00009 	mov	r0, r9
 9bc:	ebfffe26 	bl	25c <countDigit>
 9c0:	e3500006 	cmp	r0, #6
 9c4:	ca000004 	bgt	9dc <main+0x4a8>
 9c8:	e3590000 	cmp	r9, #0
 9cc:	ba000002 	blt	9dc <main+0x4a8>
              DisplayValue(answer);
 9d0:	e1a00009 	mov	r0, r9
 9d4:	ebfffe60 	bl	35c <DisplayValue>
 9d8:	eafffee0 	b	560 <main+0x2c>
            } else {
              DisplayError();
 9dc:	ebfffe3a 	bl	2cc <DisplayError>
 9e0:	eafffede 	b	560 <main+0x2c>
            }
          }
        } else if (operator == 4) {
 9e4:	e3530004 	cmp	r3, #4
 9e8:	1afffedc 	bne	560 <main+0x2c>
          answer = num1 / num2;
 9ec:	e5970008 	ldr	r0, [r7, #8]
 9f0:	eb00001e 	bl	a70 <__aeabi_idiv>
 9f4:	e5870004 	str	r0, [r7, #4]
          if (!ReadSwitch(6)) { //not in decimal mode
 9f8:	e1a00008 	mov	r0, r8
 9fc:	ebfffea1 	bl	488 <ReadSwitch>
 a00:	e3500000 	cmp	r0, #0
 a04:	1a00000d 	bne	a40 <main+0x50c>
            if (countDigit(intToBin(answer)) <= 6 && answer>=0) {
 a08:	e5979004 	ldr	r9, [r7, #4]
 a0c:	e1a00009 	mov	r0, r9
 a10:	ebfffe1e 	bl	290 <intToBin>
 a14:	e1a0b000 	mov	fp, r0
 a18:	ebfffe0f 	bl	25c <countDigit>
 a1c:	e3500006 	cmp	r0, #6
 a20:	ca000004 	bgt	a38 <main+0x504>
 a24:	e3590000 	cmp	r9, #0
 a28:	ba000002 	blt	a38 <main+0x504>
              DisplayValue(intToBin(answer));
 a2c:	e1a0000b 	mov	r0, fp
 a30:	ebfffe49 	bl	35c <DisplayValue>
 a34:	eafffec9 	b	560 <main+0x2c>
            } else {
              DisplayError();
 a38:	ebfffe23 	bl	2cc <DisplayError>
 a3c:	eafffec7 	b	560 <main+0x2c>
            }
          } else {
            if (countDigit(answer) <= 6 && answer>=0) {
 a40:	e5979004 	ldr	r9, [r7, #4]
 a44:	e1a00009 	mov	r0, r9
 a48:	ebfffe03 	bl	25c <countDigit>
 a4c:	e3500006 	cmp	r0, #6
 a50:	ca000004 	bgt	a68 <main+0x534>
 a54:	e3590000 	cmp	r9, #0
 a58:	ba000002 	blt	a68 <main+0x534>
              DisplayValue(answer);
 a5c:	e1a00009 	mov	r0, r9
 a60:	ebfffe3d 	bl	35c <DisplayValue>
 a64:	eafffebd 	b	560 <main+0x2c>
            } else {
              DisplayError();
 a68:	ebfffe17 	bl	2cc <DisplayError>
 a6c:	eafffebb 	b	560 <main+0x2c>

00000a70 <__aeabi_idiv>:
 a70:	e3510000 	cmp	r1, #0
 a74:	0a000043 	beq	b88 <.divsi3_skip_div0_test+0x110>

00000a78 <.divsi3_skip_div0_test>:
 a78:	e020c001 	eor	ip, r0, r1
 a7c:	42611000 	rsbmi	r1, r1, #0
 a80:	e2512001 	subs	r2, r1, #1
 a84:	0a000027 	beq	b28 <.divsi3_skip_div0_test+0xb0>
 a88:	e1b03000 	movs	r3, r0
 a8c:	42603000 	rsbmi	r3, r0, #0
 a90:	e1530001 	cmp	r3, r1
 a94:	9a000026 	bls	b34 <.divsi3_skip_div0_test+0xbc>
 a98:	e1110002 	tst	r1, r2
 a9c:	0a000028 	beq	b44 <.divsi3_skip_div0_test+0xcc>
 aa0:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 aa4:	01a01181 	lsleq	r1, r1, #3
 aa8:	03a02008 	moveq	r2, #8
 aac:	13a02001 	movne	r2, #1
 ab0:	e3510201 	cmp	r1, #268435456	; 0x10000000
 ab4:	31510003 	cmpcc	r1, r3
 ab8:	31a01201 	lslcc	r1, r1, #4
 abc:	31a02202 	lslcc	r2, r2, #4
 ac0:	3afffffa 	bcc	ab0 <.divsi3_skip_div0_test+0x38>
 ac4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 ac8:	31510003 	cmpcc	r1, r3
 acc:	31a01081 	lslcc	r1, r1, #1
 ad0:	31a02082 	lslcc	r2, r2, #1
 ad4:	3afffffa 	bcc	ac4 <.divsi3_skip_div0_test+0x4c>
 ad8:	e3a00000 	mov	r0, #0
 adc:	e1530001 	cmp	r3, r1
 ae0:	20433001 	subcs	r3, r3, r1
 ae4:	21800002 	orrcs	r0, r0, r2
 ae8:	e15300a1 	cmp	r3, r1, lsr #1
 aec:	204330a1 	subcs	r3, r3, r1, lsr #1
 af0:	218000a2 	orrcs	r0, r0, r2, lsr #1
 af4:	e1530121 	cmp	r3, r1, lsr #2
 af8:	20433121 	subcs	r3, r3, r1, lsr #2
 afc:	21800122 	orrcs	r0, r0, r2, lsr #2
 b00:	e15301a1 	cmp	r3, r1, lsr #3
 b04:	204331a1 	subcs	r3, r3, r1, lsr #3
 b08:	218001a2 	orrcs	r0, r0, r2, lsr #3
 b0c:	e3530000 	cmp	r3, #0
 b10:	11b02222 	lsrsne	r2, r2, #4
 b14:	11a01221 	lsrne	r1, r1, #4
 b18:	1affffef 	bne	adc <.divsi3_skip_div0_test+0x64>
 b1c:	e35c0000 	cmp	ip, #0
 b20:	42600000 	rsbmi	r0, r0, #0
 b24:	e12fff1e 	bx	lr
 b28:	e13c0000 	teq	ip, r0
 b2c:	42600000 	rsbmi	r0, r0, #0
 b30:	e12fff1e 	bx	lr
 b34:	33a00000 	movcc	r0, #0
 b38:	01a00fcc 	asreq	r0, ip, #31
 b3c:	03800001 	orreq	r0, r0, #1
 b40:	e12fff1e 	bx	lr
 b44:	e3510801 	cmp	r1, #65536	; 0x10000
 b48:	21a01821 	lsrcs	r1, r1, #16
 b4c:	23a02010 	movcs	r2, #16
 b50:	33a02000 	movcc	r2, #0
 b54:	e3510c01 	cmp	r1, #256	; 0x100
 b58:	21a01421 	lsrcs	r1, r1, #8
 b5c:	22822008 	addcs	r2, r2, #8
 b60:	e3510010 	cmp	r1, #16
 b64:	21a01221 	lsrcs	r1, r1, #4
 b68:	22822004 	addcs	r2, r2, #4
 b6c:	e3510004 	cmp	r1, #4
 b70:	82822003 	addhi	r2, r2, #3
 b74:	908220a1 	addls	r2, r2, r1, lsr #1
 b78:	e35c0000 	cmp	ip, #0
 b7c:	e1a00233 	lsr	r0, r3, r2
 b80:	42600000 	rsbmi	r0, r0, #0
 b84:	e12fff1e 	bx	lr
 b88:	e3500000 	cmp	r0, #0
 b8c:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
 b90:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
 b94:	ea000007 	b	bb8 <__aeabi_idiv0>

00000b98 <__aeabi_idivmod>:
 b98:	e3510000 	cmp	r1, #0
 b9c:	0afffff9 	beq	b88 <.divsi3_skip_div0_test+0x110>
 ba0:	e92d4003 	push	{r0, r1, lr}
 ba4:	ebffffb3 	bl	a78 <.divsi3_skip_div0_test>
 ba8:	e8bd4006 	pop	{r1, r2, lr}
 bac:	e0030092 	mul	r3, r2, r0
 bb0:	e0411003 	sub	r1, r1, r3
 bb4:	e12fff1e 	bx	lr

00000bb8 <__aeabi_idiv0>:
 bb8:	e12fff1e 	bx	lr

00000bbc <atexit>:
 bbc:	e1a01000 	mov	r1, r0
 bc0:	e3a00000 	mov	r0, #0
 bc4:	e92d4008 	push	{r3, lr}
 bc8:	e1a02000 	mov	r2, r0
 bcc:	e1a03000 	mov	r3, r0
 bd0:	eb00000e 	bl	c10 <__register_exitproc>
 bd4:	e8bd4008 	pop	{r3, lr}
 bd8:	e12fff1e 	bx	lr

00000bdc <exit>:
 bdc:	e92d4008 	push	{r3, lr}
 be0:	e3a01000 	mov	r1, #0
 be4:	e1a04000 	mov	r4, r0
 be8:	eb000045 	bl	d04 <__call_exitprocs>
 bec:	e59f3018 	ldr	r3, [pc, #24]	; c0c <exit+0x30>
 bf0:	e5930000 	ldr	r0, [r3]
 bf4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 bf8:	e3530000 	cmp	r3, #0
 bfc:	11a0e00f 	movne	lr, pc
 c00:	112fff13 	bxne	r3
 c04:	e1a00004 	mov	r0, r4
 c08:	eb0000c9 	bl	f34 <_exit>
 c0c:	00000ff4 	.word	0x00000ff4

00000c10 <__register_exitproc>:
 c10:	e59fc0e4 	ldr	ip, [pc, #228]	; cfc <__register_exitproc+0xec>
 c14:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 c18:	e59c4000 	ldr	r4, [ip]
 c1c:	e594c148 	ldr	ip, [r4, #328]	; 0x148
 c20:	e35c0000 	cmp	ip, #0
 c24:	0284cf53 	addeq	ip, r4, #332	; 0x14c
 c28:	e59c5004 	ldr	r5, [ip, #4]
 c2c:	0584c148 	streq	ip, [r4, #328]	; 0x148
 c30:	e355001f 	cmp	r5, #31
 c34:	e24dd010 	sub	sp, sp, #16
 c38:	e1a06000 	mov	r6, r0
 c3c:	da000015 	ble	c98 <__register_exitproc+0x88>
 c40:	e59f00b8 	ldr	r0, [pc, #184]	; d00 <__register_exitproc+0xf0>
 c44:	e3500000 	cmp	r0, #0
 c48:	1a000001 	bne	c54 <__register_exitproc+0x44>
 c4c:	e3e00000 	mvn	r0, #0
 c50:	ea000018 	b	cb8 <__register_exitproc+0xa8>
 c54:	e3a00e19 	mov	r0, #400	; 0x190
 c58:	e58d100c 	str	r1, [sp, #12]
 c5c:	e58d2008 	str	r2, [sp, #8]
 c60:	e58d3004 	str	r3, [sp, #4]
 c64:	e320f000 	nop	{0}
 c68:	e250c000 	subs	ip, r0, #0
 c6c:	e59d100c 	ldr	r1, [sp, #12]
 c70:	e59d2008 	ldr	r2, [sp, #8]
 c74:	e59d3004 	ldr	r3, [sp, #4]
 c78:	0afffff3 	beq	c4c <__register_exitproc+0x3c>
 c7c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 c80:	e3a00000 	mov	r0, #0
 c84:	e58c0004 	str	r0, [ip, #4]
 c88:	e58c5000 	str	r5, [ip]
 c8c:	e584c148 	str	ip, [r4, #328]	; 0x148
 c90:	e58c0188 	str	r0, [ip, #392]	; 0x188
 c94:	e58c018c 	str	r0, [ip, #396]	; 0x18c
 c98:	e3560000 	cmp	r6, #0
 c9c:	e59c4004 	ldr	r4, [ip, #4]
 ca0:	1a000007 	bne	cc4 <__register_exitproc+0xb4>
 ca4:	e2843002 	add	r3, r4, #2
 ca8:	e2844001 	add	r4, r4, #1
 cac:	e78c1103 	str	r1, [ip, r3, lsl #2]
 cb0:	e58c4004 	str	r4, [ip, #4]
 cb4:	e3a00000 	mov	r0, #0
 cb8:	e28dd010 	add	sp, sp, #16
 cbc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 cc0:	e12fff1e 	bx	lr
 cc4:	e3a00001 	mov	r0, #1
 cc8:	e1a00410 	lsl	r0, r0, r4
 ccc:	e08c8104 	add	r8, ip, r4, lsl #2
 cd0:	e3560002 	cmp	r6, #2
 cd4:	e59c7188 	ldr	r7, [ip, #392]	; 0x188
 cd8:	e5883108 	str	r3, [r8, #264]	; 0x108
 cdc:	059c318c 	ldreq	r3, [ip, #396]	; 0x18c
 ce0:	e1877000 	orr	r7, r7, r0
 ce4:	01830000 	orreq	r0, r3, r0
 ce8:	e1a05008 	mov	r5, r8
 cec:	e5882088 	str	r2, [r8, #136]	; 0x88
 cf0:	e58c7188 	str	r7, [ip, #392]	; 0x188
 cf4:	058c018c 	streq	r0, [ip, #396]	; 0x18c
 cf8:	eaffffe9 	b	ca4 <__register_exitproc+0x94>
 cfc:	00000ff4 	.word	0x00000ff4
 d00:	00000000 	.word	0x00000000

00000d04 <__call_exitprocs>:
 d04:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 d08:	e59f3168 	ldr	r3, [pc, #360]	; e78 <__call_exitprocs+0x174>
 d0c:	e5933000 	ldr	r3, [r3]
 d10:	e24dd014 	sub	sp, sp, #20
 d14:	e58d3004 	str	r3, [sp, #4]
 d18:	e2833f52 	add	r3, r3, #328	; 0x148
 d1c:	e58d0008 	str	r0, [sp, #8]
 d20:	e58d300c 	str	r3, [sp, #12]
 d24:	e1a07001 	mov	r7, r1
 d28:	e3a08001 	mov	r8, #1
 d2c:	e59d3004 	ldr	r3, [sp, #4]
 d30:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 d34:	e3560000 	cmp	r6, #0
 d38:	e59db00c 	ldr	fp, [sp, #12]
 d3c:	0a000033 	beq	e10 <__call_exitprocs+0x10c>
 d40:	e5965004 	ldr	r5, [r6, #4]
 d44:	e2554001 	subs	r4, r5, #1
 d48:	5286a088 	addpl	sl, r6, #136	; 0x88
 d4c:	5285501f 	addpl	r5, r5, #31
 d50:	508a5105 	addpl	r5, sl, r5, lsl #2
 d54:	5a000007 	bpl	d78 <__call_exitprocs+0x74>
 d58:	ea000029 	b	e04 <__call_exitprocs+0x100>
 d5c:	e5953000 	ldr	r3, [r5]
 d60:	e1530007 	cmp	r3, r7
 d64:	0a000005 	beq	d80 <__call_exitprocs+0x7c>
 d68:	e2444001 	sub	r4, r4, #1
 d6c:	e3740001 	cmn	r4, #1
 d70:	e2455004 	sub	r5, r5, #4
 d74:	0a000022 	beq	e04 <__call_exitprocs+0x100>
 d78:	e3570000 	cmp	r7, #0
 d7c:	1afffff6 	bne	d5c <__call_exitprocs+0x58>
 d80:	e5963004 	ldr	r3, [r6, #4]
 d84:	e06a2005 	rsb	r2, sl, r5
 d88:	e2433001 	sub	r3, r3, #1
 d8c:	e0862002 	add	r2, r6, r2
 d90:	e1530004 	cmp	r3, r4
 d94:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 d98:	13a01000 	movne	r1, #0
 d9c:	05864004 	streq	r4, [r6, #4]
 da0:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 da4:	e3530000 	cmp	r3, #0
 da8:	0affffee 	beq	d68 <__call_exitprocs+0x64>
 dac:	e1a02418 	lsl	r2, r8, r4
 db0:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 db4:	e1120001 	tst	r2, r1
 db8:	e5969004 	ldr	r9, [r6, #4]
 dbc:	0a000016 	beq	e1c <__call_exitprocs+0x118>
 dc0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 dc4:	e1120001 	tst	r2, r1
 dc8:	1a000016 	bne	e28 <__call_exitprocs+0x124>
 dcc:	e59d0008 	ldr	r0, [sp, #8]
 dd0:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 dd4:	e1a0e00f 	mov	lr, pc
 dd8:	e12fff13 	bx	r3
 ddc:	e5963004 	ldr	r3, [r6, #4]
 de0:	e1530009 	cmp	r3, r9
 de4:	1affffd0 	bne	d2c <__call_exitprocs+0x28>
 de8:	e59b3000 	ldr	r3, [fp]
 dec:	e1530006 	cmp	r3, r6
 df0:	1affffcd 	bne	d2c <__call_exitprocs+0x28>
 df4:	e2444001 	sub	r4, r4, #1
 df8:	e3740001 	cmn	r4, #1
 dfc:	e2455004 	sub	r5, r5, #4
 e00:	1affffdc 	bne	d78 <__call_exitprocs+0x74>
 e04:	e59f1070 	ldr	r1, [pc, #112]	; e7c <__call_exitprocs+0x178>
 e08:	e3510000 	cmp	r1, #0
 e0c:	1a000009 	bne	e38 <__call_exitprocs+0x134>
 e10:	e28dd014 	add	sp, sp, #20
 e14:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 e18:	e12fff1e 	bx	lr
 e1c:	e1a0e00f 	mov	lr, pc
 e20:	e12fff13 	bx	r3
 e24:	eaffffec 	b	ddc <__call_exitprocs+0xd8>
 e28:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 e2c:	e1a0e00f 	mov	lr, pc
 e30:	e12fff13 	bx	r3
 e34:	eaffffe8 	b	ddc <__call_exitprocs+0xd8>
 e38:	e5963004 	ldr	r3, [r6, #4]
 e3c:	e3530000 	cmp	r3, #0
 e40:	e5963000 	ldr	r3, [r6]
 e44:	1a000008 	bne	e6c <__call_exitprocs+0x168>
 e48:	e3530000 	cmp	r3, #0
 e4c:	0a000006 	beq	e6c <__call_exitprocs+0x168>
 e50:	e1a00006 	mov	r0, r6
 e54:	e58b3000 	str	r3, [fp]
 e58:	e320f000 	nop	{0}
 e5c:	e59b6000 	ldr	r6, [fp]
 e60:	e3560000 	cmp	r6, #0
 e64:	1affffb5 	bne	d40 <__call_exitprocs+0x3c>
 e68:	eaffffe8 	b	e10 <__call_exitprocs+0x10c>
 e6c:	e1a0b006 	mov	fp, r6
 e70:	e1a06003 	mov	r6, r3
 e74:	eafffff9 	b	e60 <__call_exitprocs+0x15c>
 e78:	00000ff4 	.word	0x00000ff4
 e7c:	00000000 	.word	0x00000000

00000e80 <register_fini>:
 e80:	e92d4008 	push	{r3, lr}
 e84:	e59f3010 	ldr	r3, [pc, #16]	; e9c <register_fini+0x1c>
 e88:	e3530000 	cmp	r3, #0
 e8c:	159f000c 	ldrne	r0, [pc, #12]	; ea0 <register_fini+0x20>
 e90:	1bffff49 	blne	bbc <atexit>
 e94:	e8bd4008 	pop	{r3, lr}
 e98:	e12fff1e 	bx	lr
 e9c:	0000101c 	.word	0x0000101c
 ea0:	00000ea4 	.word	0x00000ea4

00000ea4 <__libc_fini_array>:
 ea4:	e92d4038 	push	{r3, r4, r5, lr}
 ea8:	e59f5030 	ldr	r5, [pc, #48]	; ee0 <__libc_fini_array+0x3c>
 eac:	e59f4030 	ldr	r4, [pc, #48]	; ee4 <__libc_fini_array+0x40>
 eb0:	e0654004 	rsb	r4, r5, r4
 eb4:	e1b04144 	asrs	r4, r4, #2
 eb8:	10855104 	addne	r5, r5, r4, lsl #2
 ebc:	0a000004 	beq	ed4 <__libc_fini_array+0x30>
 ec0:	e5353004 	ldr	r3, [r5, #-4]!
 ec4:	e1a0e00f 	mov	lr, pc
 ec8:	e12fff13 	bx	r3
 ecc:	e2544001 	subs	r4, r4, #1
 ed0:	1afffffa 	bne	ec0 <__libc_fini_array+0x1c>
 ed4:	eb000050 	bl	101c <__libc_fini>
 ed8:	e8bd4038 	pop	{r3, r4, r5, lr}
 edc:	e12fff1e 	bx	lr
 ee0:	00001034 	.word	0x00001034
 ee4:	00001038 	.word	0x00001038

00000ee8 <__cs3_premain>:
 ee8:	e92d4008 	push	{r3, lr}
 eec:	eb00001d 	bl	f68 <__libc_init_array>
 ef0:	e59f3030 	ldr	r3, [pc, #48]	; f28 <__cs3_premain+0x40>
 ef4:	e3530000 	cmp	r3, #0
 ef8:	15930000 	ldrne	r0, [r3]
 efc:	01a00003 	moveq	r0, r3
 f00:	e59f3024 	ldr	r3, [pc, #36]	; f2c <__cs3_premain+0x44>
 f04:	e3530000 	cmp	r3, #0
 f08:	15931000 	ldrne	r1, [r3]
 f0c:	01a01003 	moveq	r1, r3
 f10:	e3a02000 	mov	r2, #0
 f14:	ebfffd86 	bl	534 <main>
 f18:	e59f3010 	ldr	r3, [pc, #16]	; f30 <__cs3_premain+0x48>
 f1c:	e3530000 	cmp	r3, #0
 f20:	1bffff2d 	blne	bdc <exit>
 f24:	eafffffe 	b	f24 <__cs3_premain+0x3c>
	...
 f30:	00000bdc 	.word	0x00000bdc

00000f34 <_exit>:
 f34:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 f38:	e3a00018 	mov	r0, #24
 f3c:	e59f1004 	ldr	r1, [pc, #4]	; f48 <_exit+0x14>
 f40:	ef123456 	svc	0x00123456
 f44:	eafffffe 	b	f44 <_exit+0x10>
 f48:	00020026 	.word	0x00020026

00000f4c <__cs3_isr_interrupt>:
 f4c:	eafffffe 	b	f4c <__cs3_isr_interrupt>

00000f50 <__cs3_isr_undef>:
 f50:	eafffffe 	b	f50 <__cs3_isr_undef>

00000f54 <__cs3_isr_swi>:
 f54:	eafffffe 	b	f54 <__cs3_isr_swi>

00000f58 <__cs3_isr_pabort>:
 f58:	eafffffe 	b	f58 <__cs3_isr_pabort>

00000f5c <__cs3_isr_dabort>:
 f5c:	eafffffe 	b	f5c <__cs3_isr_dabort>

00000f60 <__cs3_isr_irq>:
 f60:	eafffffe 	b	f60 <__cs3_isr_irq>

00000f64 <__cs3_isr_fiq>:
 f64:	eafffffe 	b	f64 <__cs3_isr_fiq>

00000f68 <__libc_init_array>:
 f68:	e92d4070 	push	{r4, r5, r6, lr}
 f6c:	e59f506c 	ldr	r5, [pc, #108]	; fe0 <__libc_init_array+0x78>
 f70:	e59f606c 	ldr	r6, [pc, #108]	; fe4 <__libc_init_array+0x7c>
 f74:	e0656006 	rsb	r6, r5, r6
 f78:	e1b06146 	asrs	r6, r6, #2
 f7c:	12455004 	subne	r5, r5, #4
 f80:	13a04000 	movne	r4, #0
 f84:	0a000005 	beq	fa0 <__libc_init_array+0x38>
 f88:	e5b53004 	ldr	r3, [r5, #4]!
 f8c:	e2844001 	add	r4, r4, #1
 f90:	e1a0e00f 	mov	lr, pc
 f94:	e12fff13 	bx	r3
 f98:	e1560004 	cmp	r6, r4
 f9c:	1afffff9 	bne	f88 <__libc_init_array+0x20>
 fa0:	e59f5040 	ldr	r5, [pc, #64]	; fe8 <__libc_init_array+0x80>
 fa4:	e59f6040 	ldr	r6, [pc, #64]	; fec <__libc_init_array+0x84>
 fa8:	e0656006 	rsb	r6, r5, r6
 fac:	eb000012 	bl	ffc <_init>
 fb0:	e1b06146 	asrs	r6, r6, #2
 fb4:	12455004 	subne	r5, r5, #4
 fb8:	13a04000 	movne	r4, #0
 fbc:	0a000005 	beq	fd8 <__libc_init_array+0x70>
 fc0:	e5b53004 	ldr	r3, [r5, #4]!
 fc4:	e2844001 	add	r4, r4, #1
 fc8:	e1a0e00f 	mov	lr, pc
 fcc:	e12fff13 	bx	r3
 fd0:	e1560004 	cmp	r6, r4
 fd4:	1afffff9 	bne	fc0 <__libc_init_array+0x58>
 fd8:	e8bd4070 	pop	{r4, r5, r6, lr}
 fdc:	e12fff1e 	bx	lr
 fe0:	00001014 	.word	0x00001014
 fe4:	00001014 	.word	0x00001014
 fe8:	00001014 	.word	0x00001014
 fec:	0000101c 	.word	0x0000101c

Disassembly of section .rodata:

00000ff4 <_global_impure_ptr>:
     ff4:	00001068 00000043                       h...C...

00000ffc <_init>:
     ffc:	e1a0c00d 	mov	ip, sp
    1000:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
    1004:	e24cb004 	sub	fp, ip, #4
    1008:	e24bd028 	sub	sp, fp, #40	; 0x28
    100c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    1010:	e12fff1e 	bx	lr

00001014 <__init_array_start>:
    1014:	00000e80 	.word	0x00000e80

00001018 <__frame_dummy_init_array_entry>:
    1018:	00000208                                ....

0000101c <__libc_fini>:
    101c:	e1a0c00d 	mov	ip, sp
    1020:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
    1024:	e24cb004 	sub	fp, ip, #4
    1028:	e24bd028 	sub	sp, fp, #40	; 0x28
    102c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    1030:	e12fff1e 	bx	lr

00001034 <__fini_array_start>:
    1034:	000001c4 	.word	0x000001c4

00001038 <__cs3_regions>:
	...
    1044:	00001498 	.word	0x00001498
    1048:	00000030 	.word	0x00000030

0000104c <__cs3_regions_end>:
    104c:	00000000 	.word	0x00000000
